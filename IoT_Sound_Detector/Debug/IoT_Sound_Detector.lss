
IoT_Sound_Detector.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005a  00802800  00002221  000022d5  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002194  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008d  00006194  00002194  00002248  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          00000137  0080285a  0080285a  0000232f  2**0
                  ALLOC
  4 .comment      0000005c  00000000  00000000  0000232f  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000238c  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000005e0  00000000  00000000  000023d0  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00008bb8  00000000  00000000  000029b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003d71  00000000  00000000  0000b568  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00003161  00000000  00000000  0000f2d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000df0  00000000  00000000  0001243c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00003017  00000000  00000000  0001322c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000035d5  00000000  00000000  00016243  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000005a0  00000000  00000000  00019818  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__ctors_end>
       4:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
       8:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
       c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      10:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      14:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      18:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      1c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__vector_7>
      20:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      24:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      28:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      2c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      30:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      34:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      38:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      3c:	0c 94 d3 0b 	jmp	0x17a6	; 0x17a6 <__vector_15>
      40:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      44:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      48:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      4c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      50:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      54:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      58:	0c 94 9b 00 	jmp	0x136	; 0x136 <__vector_22>
      5c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      60:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      64:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      68:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      6c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      70:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      74:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      78:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      7c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      80:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      84:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      88:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      8c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      90:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      94:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      98:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      9c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>

000000a0 <__trampolines_end>:
      a0:	00 00       	nop
      a2:	00 04       	cpc	r0, r0
      a4:	d4 02       	muls	r29, r20
      a6:	87 01       	movw	r16, r14
      a8:	c7 00       	.word	0x00c7	; ????
      aa:	64 00       	.word	0x0064	; ????
      ac:	32 00       	.word	0x0032	; ????

000000ae <cosTable>:
      ae:	00 fc 00 00 d4 02 b2 03 ec 03 fb 03 fe 03           ..............

000000bc <__ctors_end>:
      bc:	11 24       	eor	r1, r1
      be:	1f be       	out	0x3f, r1	; 63
      c0:	cf ef       	ldi	r28, 0xFF	; 255
      c2:	cd bf       	out	0x3d, r28	; 61
      c4:	df e3       	ldi	r29, 0x3F	; 63
      c6:	de bf       	out	0x3e, r29	; 62

000000c8 <__do_copy_data>:
      c8:	18 e2       	ldi	r17, 0x28	; 40
      ca:	a0 e0       	ldi	r26, 0x00	; 0
      cc:	b8 e2       	ldi	r27, 0x28	; 40
      ce:	e1 e2       	ldi	r30, 0x21	; 33
      d0:	f2 e2       	ldi	r31, 0x22	; 34
      d2:	02 c0       	rjmp	.+4      	; 0xd8 <__do_copy_data+0x10>
      d4:	05 90       	lpm	r0, Z+
      d6:	0d 92       	st	X+, r0
      d8:	aa 35       	cpi	r26, 0x5A	; 90
      da:	b1 07       	cpc	r27, r17
      dc:	d9 f7       	brne	.-10     	; 0xd4 <__do_copy_data+0xc>

000000de <__do_clear_bss>:
      de:	29 e2       	ldi	r18, 0x29	; 41
      e0:	aa e5       	ldi	r26, 0x5A	; 90
      e2:	b8 e2       	ldi	r27, 0x28	; 40
      e4:	01 c0       	rjmp	.+2      	; 0xe8 <.do_clear_bss_start>

000000e6 <.do_clear_bss_loop>:
      e6:	1d 92       	st	X+, r1

000000e8 <.do_clear_bss_start>:
      e8:	a1 39       	cpi	r26, 0x91	; 145
      ea:	b2 07       	cpc	r27, r18
      ec:	e1 f7       	brne	.-8      	; 0xe6 <.do_clear_bss_loop>
      ee:	0e 94 3a 04 	call	0x874	; 0x874 <main>
      f2:	0c 94 c8 10 	jmp	0x2190	; 0x2190 <_exit>

000000f6 <__bad_interrupt>:
      f6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000fa <start_sampling>:
	}
	else
	{
		return 0;
	}
}
      fa:	81 e0       	ldi	r24, 0x01	; 1
      fc:	80 93 5b 28 	sts	0x285B, r24	; 0x80285b <enable_sampling>
     100:	08 95       	ret

00000102 <return_sampled_signal>:
     102:	80 91 86 29 	lds	r24, 0x2986	; 0x802986 <samples_rdy>
     106:	88 23       	and	r24, r24
     108:	e1 f3       	breq	.-8      	; 0x102 <return_sampled_signal>
     10a:	10 92 86 29 	sts	0x2986, r1	; 0x802986 <samples_rdy>
     10e:	86 e8       	ldi	r24, 0x86	; 134
     110:	98 e2       	ldi	r25, 0x28	; 40
     112:	08 95       	ret

00000114 <__vector_7>:

ISR(TCA0_OVF_vect)
{
     114:	1f 92       	push	r1
     116:	0f 92       	push	r0
     118:	0f b6       	in	r0, 0x3f	; 63
     11a:	0f 92       	push	r0
     11c:	11 24       	eor	r1, r1
     11e:	8f 93       	push	r24
	TCA0.SINGLE.INTFLAGS = TCA_SINGLE_OVF_bm;
     120:	81 e0       	ldi	r24, 0x01	; 1
     122:	80 93 0b 0a 	sts	0x0A0B, r24	; 0x800a0b <__TEXT_REGION_LENGTH__+0x7f4a0b>
	ADC0.COMMAND = 1;	// Start ADC conversion
     126:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__TEXT_REGION_LENGTH__+0x7f4608>
}
     12a:	8f 91       	pop	r24
     12c:	0f 90       	pop	r0
     12e:	0f be       	out	0x3f, r0	; 63
     130:	0f 90       	pop	r0
     132:	1f 90       	pop	r1
     134:	18 95       	reti

00000136 <__vector_22>:

ISR(ADC0_RESRDY_vect)
{
     136:	1f 92       	push	r1
     138:	0f 92       	push	r0
     13a:	0f b6       	in	r0, 0x3f	; 63
     13c:	0f 92       	push	r0
     13e:	11 24       	eor	r1, r1
     140:	2f 93       	push	r18
     142:	3f 93       	push	r19
     144:	4f 93       	push	r20
     146:	5f 93       	push	r21
     148:	6f 93       	push	r22
     14a:	7f 93       	push	r23
     14c:	8f 93       	push	r24
     14e:	9f 93       	push	r25
     150:	af 93       	push	r26
     152:	bf 93       	push	r27
     154:	ef 93       	push	r30
     156:	ff 93       	push	r31
	if (enable_sampling)
     158:	80 91 5b 28 	lds	r24, 0x285B	; 0x80285b <enable_sampling>
     15c:	88 23       	and	r24, r24
     15e:	d1 f1       	breq	.+116    	; 0x1d4 <__vector_22+0x9e>
		
		// The 10-bit ADC results are subtracted 669 to be centered around 0.
		// It is then scaled by a factor of 32 giving it a maximum range of [-16384, 16384]
		// This is a requirement from the FHT algorithm
		
		sampled_signal[sample_counter] = (ADC0.RES-669) * 32;
     160:	80 91 5a 28 	lds	r24, 0x285A	; 0x80285a <__data_end>
     164:	20 91 10 06 	lds	r18, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x7f4610>
     168:	30 91 11 06 	lds	r19, 0x0611	; 0x800611 <__TEXT_REGION_LENGTH__+0x7f4611>
     16c:	48 2f       	mov	r20, r24
     16e:	50 e0       	ldi	r21, 0x00	; 0
     170:	fa 01       	movw	r30, r20
     172:	ee 0f       	add	r30, r30
     174:	ff 1f       	adc	r31, r31
     176:	ea 57       	subi	r30, 0x7A	; 122
     178:	f7 4d       	sbci	r31, 0xD7	; 215
     17a:	2d 59       	subi	r18, 0x9D	; 157
     17c:	3a 4f       	sbci	r19, 0xFA	; 250
     17e:	22 0f       	add	r18, r18
     180:	33 1f       	adc	r19, r19
     182:	22 95       	swap	r18
     184:	32 95       	swap	r19
     186:	30 7f       	andi	r19, 0xF0	; 240
     188:	32 27       	eor	r19, r18
     18a:	20 7f       	andi	r18, 0xF0	; 240
     18c:	32 27       	eor	r19, r18
     18e:	20 83       	st	Z, r18
     190:	31 83       	std	Z+1, r19	; 0x01
		
		// Report batch ready and hold off sampling for 0.1 seconds
		if (sample_counter == number_of_samples)
     192:	60 91 06 28 	lds	r22, 0x2806	; 0x802806 <number_of_samples>
     196:	70 91 07 28 	lds	r23, 0x2807	; 0x802807 <number_of_samples+0x1>
     19a:	46 17       	cp	r20, r22
     19c:	57 07       	cpc	r21, r23
     19e:	49 f4       	brne	.+18     	; 0x1b2 <__vector_22+0x7c>
		{
			samples_rdy  = 1;
     1a0:	91 e0       	ldi	r25, 0x01	; 1
     1a2:	90 93 86 29 	sts	0x2986, r25	; 0x802986 <samples_rdy>
			TCA0.SINGLE.PER = 12500;	// Wait 0.1 seconds
     1a6:	24 ed       	ldi	r18, 0xD4	; 212
     1a8:	30 e3       	ldi	r19, 0x30	; 48
     1aa:	20 93 26 0a 	sts	0x0A26, r18	; 0x800a26 <__TEXT_REGION_LENGTH__+0x7f4a26>
     1ae:	30 93 27 0a 	sts	0x0A27, r19	; 0x800a27 <__TEXT_REGION_LENGTH__+0x7f4a27>
		}
		
		// Resume sampling after hold-off
		if (sample_counter == 0)
     1b2:	81 11       	cpse	r24, r1
     1b4:	06 c0       	rjmp	.+12     	; 0x1c2 <__vector_22+0x8c>
		{
			TCA0.SINGLE.PER = 15;
     1b6:	2f e0       	ldi	r18, 0x0F	; 15
     1b8:	30 e0       	ldi	r19, 0x00	; 0
     1ba:	20 93 26 0a 	sts	0x0A26, r18	; 0x800a26 <__TEXT_REGION_LENGTH__+0x7f4a26>
     1be:	30 93 27 0a 	sts	0x0A27, r19	; 0x800a27 <__TEXT_REGION_LENGTH__+0x7f4a27>
		}
		
		// Update sample counter
		sample_counter++;
		sample_counter %= (number_of_samples + 1);
     1c2:	8f 5f       	subi	r24, 0xFF	; 255
     1c4:	90 e0       	ldi	r25, 0x00	; 0
     1c6:	6f 5f       	subi	r22, 0xFF	; 255
     1c8:	7f 4f       	sbci	r23, 0xFF	; 255
     1ca:	0e 94 33 0c 	call	0x1866	; 0x1866 <__udivmodhi4>
     1ce:	80 93 5a 28 	sts	0x285A, r24	; 0x80285a <__data_end>
     1d2:	09 c0       	rjmp	.+18     	; 0x1e6 <__vector_22+0xb0>
	}
	else
	{
		uint8_t adc_res  = ADC0.RES;
     1d4:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x7f4610>
     1d8:	90 91 11 06 	lds	r25, 0x0611	; 0x800611 <__TEXT_REGION_LENGTH__+0x7f4611>
		if (adc_res > 200)	// Tweak this threshold if microphone gain is modified
     1dc:	89 3c       	cpi	r24, 0xC9	; 201
     1de:	18 f0       	brcs	.+6      	; 0x1e6 <__vector_22+0xb0>
		{
			enable_sampling = 1;
     1e0:	81 e0       	ldi	r24, 0x01	; 1
     1e2:	80 93 5b 28 	sts	0x285B, r24	; 0x80285b <enable_sampling>
		}
	}
}
     1e6:	ff 91       	pop	r31
     1e8:	ef 91       	pop	r30
     1ea:	bf 91       	pop	r27
     1ec:	af 91       	pop	r26
     1ee:	9f 91       	pop	r25
     1f0:	8f 91       	pop	r24
     1f2:	7f 91       	pop	r23
     1f4:	6f 91       	pop	r22
     1f6:	5f 91       	pop	r21
     1f8:	4f 91       	pop	r20
     1fa:	3f 91       	pop	r19
     1fc:	2f 91       	pop	r18
     1fe:	0f 90       	pop	r0
     200:	0f be       	out	0x3f, r0	; 63
     202:	0f 90       	pop	r0
     204:	1f 90       	pop	r1
     206:	18 95       	reti

00000208 <fhtDitInt>:
// the calculations.  Due to the scaling the result
// is always half of the input range (-8192 to +8191).
//

void fhtDitInt(int16_t *fx)
{
     208:	2f 92       	push	r2
     20a:	3f 92       	push	r3
     20c:	4f 92       	push	r4
     20e:	5f 92       	push	r5
     210:	6f 92       	push	r6
     212:	7f 92       	push	r7
     214:	8f 92       	push	r8
     216:	9f 92       	push	r9
     218:	af 92       	push	r10
     21a:	bf 92       	push	r11
     21c:	cf 92       	push	r12
     21e:	df 92       	push	r13
     220:	ef 92       	push	r14
     222:	ff 92       	push	r15
     224:	0f 93       	push	r16
     226:	1f 93       	push	r17
     228:	cf 93       	push	r28
     22a:	df 93       	push	r29
     22c:	cd b7       	in	r28, 0x3d	; 61
     22e:	de b7       	in	r29, 0x3e	; 62
     230:	e4 97       	sbiw	r28, 0x34	; 52
     232:	cd bf       	out	0x3d, r28	; 61
     234:	de bf       	out	0x3e, r29	; 62
     236:	89 a3       	std	Y+33, r24	; 0x21
     238:	9a a3       	std	Y+34, r25	; 0x22
     23a:	e9 a1       	ldd	r30, Y+33	; 0x21
     23c:	e9 ab       	std	Y+49, r30	; 0x31
     23e:	fa a1       	ldd	r31, Y+34	; 0x22
     240:	fa ab       	std	Y+50, r31	; 0x32
     242:	fc 01       	movw	r30, r24
	int16_t temp16bit1, butdis, butloc;
	int32_t temp32bit1, temp32bit2;
	uint8_t tablePointer;

	// Permute - bit reversal
	butdis = 0;
     244:	20 e0       	ldi	r18, 0x00	; 0
     246:	30 e0       	ldi	r19, 0x00	; 0
	for (k = 0; k < FHT_LEN; k++)
     248:	40 e0       	ldi	r20, 0x00	; 0
     24a:	50 e0       	ldi	r21, 0x00	; 0
	{
		if (k <= butdis)
     24c:	24 17       	cp	r18, r20
     24e:	35 07       	cpc	r19, r21
     250:	84 f0       	brlt	.+32     	; 0x272 <fhtDitInt+0x6a>
		{
			temp16bit1 = fx[butdis];
     252:	d9 01       	movw	r26, r18
     254:	aa 0f       	add	r26, r26
     256:	bb 1f       	adc	r27, r27
     258:	89 a1       	ldd	r24, Y+33	; 0x21
     25a:	9a a1       	ldd	r25, Y+34	; 0x22
     25c:	a8 0f       	add	r26, r24
     25e:	b9 1f       	adc	r27, r25
     260:	8d 91       	ld	r24, X+
     262:	9c 91       	ld	r25, X
     264:	11 97       	sbiw	r26, 0x01	; 1
			fx[butdis] = fx[k];
     266:	60 81       	ld	r22, Z
     268:	71 81       	ldd	r23, Z+1	; 0x01
     26a:	6d 93       	st	X+, r22
     26c:	7c 93       	st	X, r23
			fx[k] = temp16bit1;
     26e:	80 83       	st	Z, r24
     270:	91 83       	std	Z+1, r25	; 0x01
		}
		butloc = FHT_LEN >> 1;

		while(butdis >= butloc && butloc > 0)
     272:	20 34       	cpi	r18, 0x40	; 64
     274:	31 05       	cpc	r19, r1
     276:	6c f0       	brlt	.+26     	; 0x292 <fhtDitInt+0x8a>
     278:	80 e4       	ldi	r24, 0x40	; 64
     27a:	90 e0       	ldi	r25, 0x00	; 0
		{
			butdis -= butloc;
     27c:	28 1b       	sub	r18, r24
     27e:	39 0b       	sbc	r19, r25
			butloc = butloc >> 1;
     280:	95 95       	asr	r25
     282:	87 95       	ror	r24
			fx[butdis] = fx[k];
			fx[k] = temp16bit1;
		}
		butloc = FHT_LEN >> 1;

		while(butdis >= butloc && butloc > 0)
     284:	28 17       	cp	r18, r24
     286:	39 07       	cpc	r19, r25
     288:	34 f0       	brlt	.+12     	; 0x296 <fhtDitInt+0x8e>
     28a:	18 16       	cp	r1, r24
     28c:	19 06       	cpc	r1, r25
     28e:	b4 f3       	brlt	.-20     	; 0x27c <fhtDitInt+0x74>
     290:	02 c0       	rjmp	.+4      	; 0x296 <fhtDitInt+0x8e>
		{
			temp16bit1 = fx[butdis];
			fx[butdis] = fx[k];
			fx[k] = temp16bit1;
		}
		butloc = FHT_LEN >> 1;
     292:	80 e4       	ldi	r24, 0x40	; 64
     294:	90 e0       	ldi	r25, 0x00	; 0
		while(butdis >= butloc && butloc > 0)
		{
			butdis -= butloc;
			butloc = butloc >> 1;
		}
		butdis += butloc;
     296:	28 0f       	add	r18, r24
     298:	39 1f       	adc	r19, r25
	int32_t temp32bit1, temp32bit2;
	uint8_t tablePointer;

	// Permute - bit reversal
	butdis = 0;
	for (k = 0; k < FHT_LEN; k++)
     29a:	4f 5f       	subi	r20, 0xFF	; 255
     29c:	5f 4f       	sbci	r21, 0xFF	; 255
     29e:	32 96       	adiw	r30, 0x02	; 2
     2a0:	40 38       	cpi	r20, 0x80	; 128
     2a2:	51 05       	cpc	r21, r1
     2a4:	99 f6       	brne	.-90     	; 0x24c <fhtDitInt+0x44>
     2a6:	ee ea       	ldi	r30, 0xAE	; 174
     2a8:	f0 e0       	ldi	r31, 0x00	; 0
     2aa:	ed a7       	std	Y+45, r30	; 0x2d
     2ac:	fe a7       	std	Y+46, r31	; 0x2e
     2ae:	e0 ea       	ldi	r30, 0xA0	; 160
     2b0:	f0 e0       	ldi	r31, 0x00	; 0
     2b2:	ef a7       	std	Y+47, r30	; 0x2f
     2b4:	f8 ab       	std	Y+48, r31	; 0x30
     2b6:	e1 e0       	ldi	r30, 0x01	; 1
     2b8:	f0 e0       	ldi	r31, 0x00	; 0
     2ba:	ed a3       	std	Y+37, r30	; 0x25
     2bc:	fe a3       	std	Y+38, r31	; 0x26
	n = 1;
	tablePointer = 0;

	while (n < FHT_LEN)
	{
		istep = n << 1;
     2be:	ed a1       	ldd	r30, Y+37	; 0x25
     2c0:	fe a1       	ldd	r31, Y+38	; 0x26
     2c2:	ee 0f       	add	r30, r30
     2c4:	ff 1f       	adc	r31, r31
     2c6:	eb a7       	std	Y+43, r30	; 0x2b
     2c8:	fc a7       	std	Y+44, r31	; 0x2c
     2ca:	ed 87       	std	Y+13, r30	; 0x0d
     2cc:	fe 87       	std	Y+14, r31	; 0x0e

		// Get the sine and cosine data from the look-up tables
		dcos = (int32_t)cosTable[tablePointer];
     2ce:	ed a5       	ldd	r30, Y+45	; 0x2d
     2d0:	fe a5       	ldd	r31, Y+46	; 0x2e
     2d2:	65 91       	lpm	r22, Z+
     2d4:	75 91       	lpm	r23, Z+
     2d6:	ed a7       	std	Y+45, r30	; 0x2d
     2d8:	fe a7       	std	Y+46, r31	; 0x2e
		dsin = (int32_t)sinTable[tablePointer];
     2da:	ef a5       	ldd	r30, Y+47	; 0x2f
     2dc:	f8 a9       	ldd	r31, Y+48	; 0x30
     2de:	25 91       	lpm	r18, Z+
     2e0:	35 91       	lpm	r19, Z+
     2e2:	ef a7       	std	Y+47, r30	; 0x2f
     2e4:	f8 ab       	std	Y+48, r31	; 0x30
     2e6:	6b a4       	ldd	r6, Y+43	; 0x2b
     2e8:	7c a4       	ldd	r7, Y+44	; 0x2c
     2ea:	66 0c       	add	r6, r6
     2ec:	77 1c       	adc	r7, r7
     2ee:	a9 a1       	ldd	r26, Y+33	; 0x21
     2f0:	ba a1       	ldd	r27, Y+34	; 0x22
     2f2:	eb a5       	ldd	r30, Y+43	; 0x2b
     2f4:	fc a5       	ldd	r31, Y+44	; 0x2c
     2f6:	ae 0f       	add	r26, r30
     2f8:	bf 1f       	adc	r27, r31
     2fa:	e9 a9       	ldd	r30, Y+49	; 0x31
     2fc:	fa a9       	ldd	r31, Y+50	; 0x32
		fcos = dcos;
		fsin = dsin;
		tablePointer++;

		// Zero Frequency loop
		for (k = 0; k < FHT_LEN; k += istep)
     2fe:	40 e0       	ldi	r20, 0x00	; 0
     300:	50 e0       	ldi	r21, 0x00	; 0
     302:	0d 85       	ldd	r16, Y+13	; 0x0d
     304:	1e 85       	ldd	r17, Y+14	; 0x0e
     306:	29 83       	std	Y+1, r18	; 0x01
     308:	3a 83       	std	Y+2, r19	; 0x02
		{
			temp16bit1 = fx[k + n];
     30a:	ed 90       	ld	r14, X+
     30c:	fc 90       	ld	r15, X
     30e:	11 97       	sbiw	r26, 0x01	; 1
			fx[k + n] = (fx[k] - temp16bit1) >> 1;
     310:	20 81       	ld	r18, Z
     312:	31 81       	ldd	r19, Z+1	; 0x01
     314:	2e 19       	sub	r18, r14
     316:	3f 09       	sbc	r19, r15
     318:	35 95       	asr	r19
     31a:	27 95       	ror	r18
     31c:	2d 93       	st	X+, r18
     31e:	3c 93       	st	X, r19
     320:	11 97       	sbiw	r26, 0x01	; 1
			fx[k] = (fx[k] + temp16bit1) >> 1;
     322:	80 81       	ld	r24, Z
     324:	91 81       	ldd	r25, Z+1	; 0x01
     326:	8e 0d       	add	r24, r14
     328:	9f 1d       	adc	r25, r15
     32a:	95 95       	asr	r25
     32c:	87 95       	ror	r24
     32e:	80 83       	st	Z, r24
     330:	91 83       	std	Z+1, r25	; 0x01
		fcos = dcos;
		fsin = dsin;
		tablePointer++;

		// Zero Frequency loop
		for (k = 0; k < FHT_LEN; k += istep)
     332:	40 0f       	add	r20, r16
     334:	51 1f       	adc	r21, r17
     336:	a6 0d       	add	r26, r6
     338:	b7 1d       	adc	r27, r7
     33a:	e6 0d       	add	r30, r6
     33c:	f7 1d       	adc	r31, r7
     33e:	40 38       	cpi	r20, 0x80	; 128
     340:	51 05       	cpc	r21, r1
     342:	1c f3       	brlt	.-58     	; 0x30a <fhtDitInt+0x102>
			fx[k + n] = (fx[k] - temp16bit1) >> 1;
			fx[k] = (fx[k] + temp16bit1) >> 1;
		}
		// End zero frequency loop

		if (n > 2)
     344:	ed a1       	ldd	r30, Y+37	; 0x25
     346:	fe a1       	ldd	r31, Y+38	; 0x26
     348:	e3 30       	cpi	r30, 0x03	; 3
     34a:	f1 05       	cpc	r31, r1
     34c:	08 f4       	brcc	.+2      	; 0x350 <fhtDitInt+0x148>
     34e:	be c1       	rjmp	.+892    	; 0x6cc <__LOCK_REGION_LENGTH__+0x2cc>
		{
			// Double butterfly
			butdis = n - 2;
			for (butloc = 1; butloc < (n >> 1); butloc++)
     350:	f6 95       	lsr	r31
     352:	e7 95       	ror	r30
     354:	eb a3       	std	Y+35, r30	; 0x23
     356:	fc a3       	std	Y+36, r31	; 0x24
     358:	32 97       	sbiw	r30, 0x02	; 2
     35a:	08 f4       	brcc	.+2      	; 0x35e <fhtDitInt+0x156>
     35c:	b7 c1       	rjmp	.+878    	; 0x6cc <__LOCK_REGION_LENGTH__+0x2cc>
	while (n < FHT_LEN)
	{
		istep = n << 1;

		// Get the sine and cosine data from the look-up tables
		dcos = (int32_t)cosTable[tablePointer];
     35e:	9b 01       	movw	r18, r22
     360:	77 0f       	add	r23, r23
     362:	44 0b       	sbc	r20, r20
     364:	55 0b       	sbc	r21, r21
     366:	2d 8b       	std	Y+21, r18	; 0x15
     368:	3e 8b       	std	Y+22, r19	; 0x16
     36a:	4f 8b       	std	Y+23, r20	; 0x17
     36c:	58 8f       	std	Y+24, r21	; 0x18
		dsin = (int32_t)sinTable[tablePointer];
     36e:	89 81       	ldd	r24, Y+1	; 0x01
     370:	9a 81       	ldd	r25, Y+2	; 0x02
     372:	09 2e       	mov	r0, r25
     374:	00 0c       	add	r0, r0
     376:	aa 0b       	sbc	r26, r26
     378:	bb 0b       	sbc	r27, r27
     37a:	89 8f       	std	Y+25, r24	; 0x19
     37c:	9a 8f       	std	Y+26, r25	; 0x1a
     37e:	ab 8f       	std	Y+27, r26	; 0x1b
     380:	bc 8f       	std	Y+28, r27	; 0x1c
     382:	8b a5       	ldd	r24, Y+43	; 0x2b
     384:	9c a5       	ldd	r25, Y+44	; 0x2c
     386:	02 97       	sbiw	r24, 0x02	; 2
     388:	e9 a1       	ldd	r30, Y+33	; 0x21
     38a:	fa a1       	ldd	r31, Y+34	; 0x22
     38c:	e8 0f       	add	r30, r24
     38e:	f9 1f       	adc	r31, r25
     390:	ef a3       	std	Y+39, r30	; 0x27
     392:	f8 a7       	std	Y+40, r31	; 0x28
     394:	eb a5       	ldd	r30, Y+43	; 0x2b
     396:	fc a5       	ldd	r31, Y+44	; 0x2c
     398:	ed 8f       	std	Y+29, r30	; 0x1d
     39a:	fe 8f       	std	Y+30, r31	; 0x1e
     39c:	29 8d       	ldd	r18, Y+25	; 0x19
     39e:	3a 8d       	ldd	r19, Y+26	; 0x1a
     3a0:	4b 8d       	ldd	r20, Y+27	; 0x1b
     3a2:	5c 8d       	ldd	r21, Y+28	; 0x1c
     3a4:	2d 83       	std	Y+5, r18	; 0x05
     3a6:	3e 83       	std	Y+6, r19	; 0x06
     3a8:	4f 83       	std	Y+7, r20	; 0x07
     3aa:	58 87       	std	Y+8, r21	; 0x08
     3ac:	8d 89       	ldd	r24, Y+21	; 0x15
     3ae:	9e 89       	ldd	r25, Y+22	; 0x16
     3b0:	af 89       	ldd	r26, Y+23	; 0x17
     3b2:	b8 8d       	ldd	r27, Y+24	; 0x18
     3b4:	89 87       	std	Y+9, r24	; 0x09
     3b6:	9a 87       	std	Y+10, r25	; 0x0a
     3b8:	ab 87       	std	Y+11, r26	; 0x0b
     3ba:	bc 87       	std	Y+12, r27	; 0x0c
     3bc:	eb a1       	ldd	r30, Y+35	; 0x23
     3be:	fc a1       	ldd	r31, Y+36	; 0x24
     3c0:	ef 8f       	std	Y+31, r30	; 0x1f
     3c2:	f8 a3       	std	Y+32, r31	; 0x20

		if (n > 2)
		{
			// Double butterfly
			butdis = n - 2;
			for (butloc = 1; butloc < (n >> 1); butloc++)
     3c4:	31 96       	adiw	r30, 0x01	; 1
     3c6:	e9 a7       	std	Y+41, r30	; 0x29
     3c8:	fa a7       	std	Y+42, r31	; 0x2a
     3ca:	e9 a1       	ldd	r30, Y+33	; 0x21
     3cc:	fa a1       	ldd	r31, Y+34	; 0x22
     3ce:	32 96       	adiw	r30, 0x02	; 2
     3d0:	e9 8b       	std	Y+17, r30	; 0x11
     3d2:	fa 8b       	std	Y+18, r31	; 0x12
				{
					// Double butterfly
					butdis = n - 2;
					for (butloc = 1; butloc < (n >> 1); butloc++)
					{
						for (k = butloc; k <= FHT_LEN; k += istep)
     3d4:	ef a1       	ldd	r30, Y+39	; 0x27
     3d6:	f8 a5       	ldd	r31, Y+40	; 0x28
     3d8:	eb 8b       	std	Y+19, r30	; 0x13
     3da:	fc 8b       	std	Y+20, r31	; 0x14
     3dc:	e1 e0       	ldi	r30, 0x01	; 1
     3de:	f0 e0       	ldi	r31, 0x00	; 0
     3e0:	ef 87       	std	Y+15, r30	; 0x0f
     3e2:	f8 8b       	std	Y+16, r31	; 0x10
     3e4:	5a c1       	rjmp	.+692    	; 0x69a <__LOCK_REGION_LENGTH__+0x29a>
						{
							// Using 32 bit integers for the main multiplication to prevent overflow errors
							// and we add 1 to SC_SCALE to divide the result by 2 or the addition below can overflow
							temp32bit1 = ((fcos * (int32_t)fx[k + n]) + (fsin * (int32_t)fx[k + n + butdis])) >> (SC_SCALE + 1);
     3e6:	d5 01       	movw	r26, r10
     3e8:	2d 90       	ld	r2, X+
     3ea:	3c 90       	ld	r3, X
     3ec:	03 2c       	mov	r0, r3
     3ee:	00 0c       	add	r0, r0
     3f0:	44 08       	sbc	r4, r4
     3f2:	55 08       	sbc	r5, r5
     3f4:	d8 01       	movw	r26, r16
     3f6:	cd 90       	ld	r12, X+
     3f8:	dc 90       	ld	r13, X
     3fa:	0d 2c       	mov	r0, r13
     3fc:	00 0c       	add	r0, r0
     3fe:	ee 08       	sbc	r14, r14
     400:	ff 08       	sbc	r15, r15
							temp32bit2 = ((fsin * (int32_t)fx[k + n]) - (fcos * (int32_t)fx[k + n + butdis])) >> (SC_SCALE + 1);

							fx[k + n] = (fx[k] >> 1) - (int16_t)temp32bit1;
     402:	a2 01       	movw	r20, r4
     404:	91 01       	movw	r18, r2
     406:	69 85       	ldd	r22, Y+9	; 0x09
     408:	7a 85       	ldd	r23, Y+10	; 0x0a
     40a:	8b 85       	ldd	r24, Y+11	; 0x0b
     40c:	9c 85       	ldd	r25, Y+12	; 0x0c
     40e:	0e 94 23 0c 	call	0x1846	; 0x1846 <__mulsi3>
     412:	69 83       	std	Y+1, r22	; 0x01
     414:	7a 83       	std	Y+2, r23	; 0x02
     416:	8b 83       	std	Y+3, r24	; 0x03
     418:	9c 83       	std	Y+4, r25	; 0x04
     41a:	a7 01       	movw	r20, r14
     41c:	96 01       	movw	r18, r12
     41e:	6d 81       	ldd	r22, Y+5	; 0x05
     420:	7e 81       	ldd	r23, Y+6	; 0x06
     422:	8f 81       	ldd	r24, Y+7	; 0x07
     424:	98 85       	ldd	r25, Y+8	; 0x08
     426:	0e 94 23 0c 	call	0x1846	; 0x1846 <__mulsi3>
     42a:	29 81       	ldd	r18, Y+1	; 0x01
     42c:	3a 81       	ldd	r19, Y+2	; 0x02
     42e:	4b 81       	ldd	r20, Y+3	; 0x03
     430:	5c 81       	ldd	r21, Y+4	; 0x04
     432:	26 0f       	add	r18, r22
     434:	37 1f       	adc	r19, r23
     436:	48 1f       	adc	r20, r24
     438:	59 1f       	adc	r21, r25
     43a:	01 2e       	mov	r0, r17
     43c:	1b e0       	ldi	r17, 0x0B	; 11
     43e:	55 95       	asr	r21
     440:	47 95       	ror	r20
     442:	37 95       	ror	r19
     444:	27 95       	ror	r18
     446:	1a 95       	dec	r17
     448:	d1 f7       	brne	.-12     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     44a:	10 2d       	mov	r17, r0
     44c:	29 83       	std	Y+1, r18	; 0x01
     44e:	3a 83       	std	Y+2, r19	; 0x02
     450:	4b 83       	std	Y+3, r20	; 0x03
     452:	5c 83       	std	Y+4, r21	; 0x04
     454:	ab a9       	ldd	r26, Y+51	; 0x33
     456:	bc a9       	ldd	r27, Y+52	; 0x34
     458:	8d 91       	ld	r24, X+
     45a:	9c 91       	ld	r25, X
     45c:	95 95       	asr	r25
     45e:	87 95       	ror	r24
     460:	82 1b       	sub	r24, r18
     462:	93 0b       	sbc	r25, r19
     464:	d5 01       	movw	r26, r10
     466:	8d 93       	st	X+, r24
     468:	9c 93       	st	X, r25
							fx[k + n + butdis] = (fx[k + butdis] >> 1) - (int16_t)temp32bit2;
     46a:	a2 01       	movw	r20, r4
     46c:	91 01       	movw	r18, r2
     46e:	6d 81       	ldd	r22, Y+5	; 0x05
     470:	7e 81       	ldd	r23, Y+6	; 0x06
     472:	8f 81       	ldd	r24, Y+7	; 0x07
     474:	98 85       	ldd	r25, Y+8	; 0x08
     476:	0e 94 23 0c 	call	0x1846	; 0x1846 <__mulsi3>
     47a:	1b 01       	movw	r2, r22
     47c:	2c 01       	movw	r4, r24
     47e:	a7 01       	movw	r20, r14
     480:	96 01       	movw	r18, r12
     482:	69 85       	ldd	r22, Y+9	; 0x09
     484:	7a 85       	ldd	r23, Y+10	; 0x0a
     486:	8b 85       	ldd	r24, Y+11	; 0x0b
     488:	9c 85       	ldd	r25, Y+12	; 0x0c
     48a:	0e 94 23 0c 	call	0x1846	; 0x1846 <__mulsi3>
     48e:	a2 01       	movw	r20, r4
     490:	91 01       	movw	r18, r2
     492:	26 1b       	sub	r18, r22
     494:	37 0b       	sbc	r19, r23
     496:	48 0b       	sbc	r20, r24
     498:	59 0b       	sbc	r21, r25
     49a:	69 01       	movw	r12, r18
     49c:	7a 01       	movw	r14, r20
     49e:	0b 2e       	mov	r0, r27
     4a0:	bb e0       	ldi	r27, 0x0B	; 11
     4a2:	f5 94       	asr	r15
     4a4:	e7 94       	ror	r14
     4a6:	d7 94       	ror	r13
     4a8:	c7 94       	ror	r12
     4aa:	ba 95       	dec	r27
     4ac:	d1 f7       	brne	.-12     	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
     4ae:	b0 2d       	mov	r27, r0
     4b0:	80 81       	ld	r24, Z
     4b2:	91 81       	ldd	r25, Z+1	; 0x01
     4b4:	95 95       	asr	r25
     4b6:	87 95       	ror	r24
     4b8:	8c 19       	sub	r24, r12
     4ba:	9d 09       	sbc	r25, r13
     4bc:	d8 01       	movw	r26, r16
     4be:	8d 93       	st	X+, r24
     4c0:	9c 93       	st	X, r25
							fx[k] = (fx[k] >> 1) + (int16_t)temp32bit1;
     4c2:	ab a9       	ldd	r26, Y+51	; 0x33
     4c4:	bc a9       	ldd	r27, Y+52	; 0x34
     4c6:	6d 91       	ld	r22, X+
     4c8:	7c 91       	ld	r23, X
     4ca:	11 97       	sbiw	r26, 0x01	; 1
     4cc:	75 95       	asr	r23
     4ce:	67 95       	ror	r22
     4d0:	29 81       	ldd	r18, Y+1	; 0x01
     4d2:	3a 81       	ldd	r19, Y+2	; 0x02
     4d4:	62 0f       	add	r22, r18
     4d6:	73 1f       	adc	r23, r19
     4d8:	6d 93       	st	X+, r22
     4da:	7c 93       	st	X, r23
     4dc:	11 97       	sbiw	r26, 0x01	; 1
							fx[k + butdis] = (fx[k + butdis] >> 1) + (int16_t)temp32bit2;
     4de:	80 81       	ld	r24, Z
     4e0:	91 81       	ldd	r25, Z+1	; 0x01
     4e2:	95 95       	asr	r25
     4e4:	87 95       	ror	r24
     4e6:	1c 01       	movw	r2, r24
     4e8:	2c 0c       	add	r2, r12
     4ea:	3d 1c       	adc	r3, r13
     4ec:	20 82       	st	Z, r2
     4ee:	31 82       	std	Z+1, r3	; 0x01
				{
					// Double butterfly
					butdis = n - 2;
					for (butloc = 1; butloc < (n >> 1); butloc++)
					{
						for (k = butloc; k <= FHT_LEN; k += istep)
     4f0:	4d 85       	ldd	r20, Y+13	; 0x0d
     4f2:	5e 85       	ldd	r21, Y+14	; 0x0e
     4f4:	84 0e       	add	r8, r20
     4f6:	95 1e       	adc	r9, r21
     4f8:	a6 0c       	add	r10, r6
     4fa:	b7 1c       	adc	r11, r7
     4fc:	06 0d       	add	r16, r6
     4fe:	17 1d       	adc	r17, r7
     500:	a6 0d       	add	r26, r6
     502:	b7 1d       	adc	r27, r7
     504:	ab ab       	std	Y+51, r26	; 0x33
     506:	bc ab       	std	Y+52, r27	; 0x34
     508:	e6 0d       	add	r30, r6
     50a:	f7 1d       	adc	r31, r7
     50c:	51 e8       	ldi	r21, 0x81	; 129
     50e:	85 16       	cp	r8, r21
     510:	91 04       	cpc	r9, r1
     512:	0c f4       	brge	.+2      	; 0x516 <__LOCK_REGION_LENGTH__+0x116>
     514:	68 cf       	rjmp	.-304    	; 0x3e6 <fhtDitInt+0x1de>
							fx[k + n + butdis] = (fx[k + butdis] >> 1) - (int16_t)temp32bit2;
							fx[k] = (fx[k] >> 1) + (int16_t)temp32bit1;
							fx[k + butdis] = (fx[k + butdis] >> 1) + (int16_t)temp32bit2;
						}

						temp32bit1 = (fcos * dcos - fsin * dsin) >> SC_SCALE;
     516:	2d 89       	ldd	r18, Y+21	; 0x15
     518:	3e 89       	ldd	r19, Y+22	; 0x16
     51a:	4f 89       	ldd	r20, Y+23	; 0x17
     51c:	58 8d       	ldd	r21, Y+24	; 0x18
     51e:	69 85       	ldd	r22, Y+9	; 0x09
     520:	7a 85       	ldd	r23, Y+10	; 0x0a
     522:	8b 85       	ldd	r24, Y+11	; 0x0b
     524:	9c 85       	ldd	r25, Y+12	; 0x0c
     526:	0e 94 23 0c 	call	0x1846	; 0x1846 <__mulsi3>
     52a:	6b 01       	movw	r12, r22
     52c:	7c 01       	movw	r14, r24
     52e:	29 8d       	ldd	r18, Y+25	; 0x19
     530:	3a 8d       	ldd	r19, Y+26	; 0x1a
     532:	4b 8d       	ldd	r20, Y+27	; 0x1b
     534:	5c 8d       	ldd	r21, Y+28	; 0x1c
     536:	6d 81       	ldd	r22, Y+5	; 0x05
     538:	7e 81       	ldd	r23, Y+6	; 0x06
     53a:	8f 81       	ldd	r24, Y+7	; 0x07
     53c:	98 85       	ldd	r25, Y+8	; 0x08
     53e:	0e 94 23 0c 	call	0x1846	; 0x1846 <__mulsi3>
     542:	c6 1a       	sub	r12, r22
     544:	d7 0a       	sbc	r13, r23
     546:	e8 0a       	sbc	r14, r24
     548:	f9 0a       	sbc	r15, r25
     54a:	0b 2e       	mov	r0, r27
     54c:	ba e0       	ldi	r27, 0x0A	; 10
     54e:	f5 94       	asr	r15
     550:	e7 94       	ror	r14
     552:	d7 94       	ror	r13
     554:	c7 94       	ror	r12
     556:	ba 95       	dec	r27
     558:	d1 f7       	brne	.-12     	; 0x54e <__LOCK_REGION_LENGTH__+0x14e>
     55a:	b0 2d       	mov	r27, r0
						fsin = (fsin * dcos + fcos * dsin) >> SC_SCALE;
     55c:	2d 89       	ldd	r18, Y+21	; 0x15
     55e:	3e 89       	ldd	r19, Y+22	; 0x16
     560:	4f 89       	ldd	r20, Y+23	; 0x17
     562:	58 8d       	ldd	r21, Y+24	; 0x18
     564:	6d 81       	ldd	r22, Y+5	; 0x05
     566:	7e 81       	ldd	r23, Y+6	; 0x06
     568:	8f 81       	ldd	r24, Y+7	; 0x07
     56a:	98 85       	ldd	r25, Y+8	; 0x08
     56c:	0e 94 23 0c 	call	0x1846	; 0x1846 <__mulsi3>
     570:	4b 01       	movw	r8, r22
     572:	5c 01       	movw	r10, r24
     574:	29 8d       	ldd	r18, Y+25	; 0x19
     576:	3a 8d       	ldd	r19, Y+26	; 0x1a
     578:	4b 8d       	ldd	r20, Y+27	; 0x1b
     57a:	5c 8d       	ldd	r21, Y+28	; 0x1c
     57c:	69 85       	ldd	r22, Y+9	; 0x09
     57e:	7a 85       	ldd	r23, Y+10	; 0x0a
     580:	8b 85       	ldd	r24, Y+11	; 0x0b
     582:	9c 85       	ldd	r25, Y+12	; 0x0c
     584:	0e 94 23 0c 	call	0x1846	; 0x1846 <__mulsi3>
     588:	dc 01       	movw	r26, r24
     58a:	cb 01       	movw	r24, r22
     58c:	88 0d       	add	r24, r8
     58e:	99 1d       	adc	r25, r9
     590:	aa 1d       	adc	r26, r10
     592:	bb 1d       	adc	r27, r11
     594:	9c 01       	movw	r18, r24
     596:	ad 01       	movw	r20, r26
     598:	01 2e       	mov	r0, r17
     59a:	1a e0       	ldi	r17, 0x0A	; 10
     59c:	55 95       	asr	r21
     59e:	47 95       	ror	r20
     5a0:	37 95       	ror	r19
     5a2:	27 95       	ror	r18
     5a4:	1a 95       	dec	r17
     5a6:	d1 f7       	brne	.-12     	; 0x59c <__LOCK_REGION_LENGTH__+0x19c>
     5a8:	10 2d       	mov	r17, r0
     5aa:	2d 83       	std	Y+5, r18	; 0x05
     5ac:	3e 83       	std	Y+6, r19	; 0x06
     5ae:	4f 83       	std	Y+7, r20	; 0x07
     5b0:	58 87       	std	Y+8, r21	; 0x08
			{
				if (n > 2)
				{
					// Double butterfly
					butdis = n - 2;
					for (butloc = 1; butloc < (n >> 1); butloc++)
     5b2:	ef 85       	ldd	r30, Y+15	; 0x0f
     5b4:	f8 89       	ldd	r31, Y+16	; 0x10
     5b6:	31 96       	adiw	r30, 0x01	; 1
     5b8:	ef 87       	std	Y+15, r30	; 0x0f
     5ba:	f8 8b       	std	Y+16, r31	; 0x10
     5bc:	e9 89       	ldd	r30, Y+17	; 0x11
     5be:	fa 89       	ldd	r31, Y+18	; 0x12
     5c0:	32 96       	adiw	r30, 0x02	; 2
     5c2:	e9 8b       	std	Y+17, r30	; 0x11
     5c4:	fa 8b       	std	Y+18, r31	; 0x12
     5c6:	eb 89       	ldd	r30, Y+19	; 0x13
     5c8:	fc 89       	ldd	r31, Y+20	; 0x14
     5ca:	32 97       	sbiw	r30, 0x02	; 2
     5cc:	eb 8b       	std	Y+19, r30	; 0x13
     5ce:	fc 8b       	std	Y+20, r31	; 0x14
     5d0:	ef 8d       	ldd	r30, Y+31	; 0x1f
     5d2:	f8 a1       	ldd	r31, Y+32	; 0x20
     5d4:	2f 85       	ldd	r18, Y+15	; 0x0f
     5d6:	38 89       	ldd	r19, Y+16	; 0x10
     5d8:	e2 17       	cp	r30, r18
     5da:	f3 07       	cpc	r31, r19
     5dc:	09 f0       	breq	.+2      	; 0x5e0 <__LOCK_REGION_LENGTH__+0x1e0>
     5de:	59 c0       	rjmp	.+178    	; 0x692 <__LOCK_REGION_LENGTH__+0x292>
						butdis -= 2;
					}
					// End double butterfly
				}

				temp32bit1 = (fcos * dcos - fsin * dsin) >> SC_SCALE;
     5e0:	2d 89       	ldd	r18, Y+21	; 0x15
     5e2:	3e 89       	ldd	r19, Y+22	; 0x16
     5e4:	4f 89       	ldd	r20, Y+23	; 0x17
     5e6:	58 8d       	ldd	r21, Y+24	; 0x18
     5e8:	c7 01       	movw	r24, r14
     5ea:	b6 01       	movw	r22, r12
     5ec:	0e 94 23 0c 	call	0x1846	; 0x1846 <__mulsi3>
     5f0:	4b 01       	movw	r8, r22
     5f2:	5c 01       	movw	r10, r24
     5f4:	29 8d       	ldd	r18, Y+25	; 0x19
     5f6:	3a 8d       	ldd	r19, Y+26	; 0x1a
     5f8:	4b 8d       	ldd	r20, Y+27	; 0x1b
     5fa:	5c 8d       	ldd	r21, Y+28	; 0x1c
     5fc:	6d 81       	ldd	r22, Y+5	; 0x05
     5fe:	7e 81       	ldd	r23, Y+6	; 0x06
     600:	8f 81       	ldd	r24, Y+7	; 0x07
     602:	98 85       	ldd	r25, Y+8	; 0x08
     604:	0e 94 23 0c 	call	0x1846	; 0x1846 <__mulsi3>
     608:	86 1a       	sub	r8, r22
     60a:	97 0a       	sbc	r9, r23
     60c:	a8 0a       	sbc	r10, r24
     60e:	b9 0a       	sbc	r11, r25
     610:	d5 01       	movw	r26, r10
     612:	c4 01       	movw	r24, r8
     614:	07 2e       	mov	r0, r23
     616:	7a e0       	ldi	r23, 0x0A	; 10
     618:	b5 95       	asr	r27
     61a:	a7 95       	ror	r26
     61c:	97 95       	ror	r25
     61e:	87 95       	ror	r24
     620:	7a 95       	dec	r23
     622:	d1 f7       	brne	.-12     	; 0x618 <__LOCK_REGION_LENGTH__+0x218>
     624:	70 2d       	mov	r23, r0
     626:	89 87       	std	Y+9, r24	; 0x09
     628:	9a 87       	std	Y+10, r25	; 0x0a
     62a:	ab 87       	std	Y+11, r26	; 0x0b
     62c:	bc 87       	std	Y+12, r27	; 0x0c
				fsin = (fsin * dcos + fcos * dsin) >> SC_SCALE;
     62e:	2d 89       	ldd	r18, Y+21	; 0x15
     630:	3e 89       	ldd	r19, Y+22	; 0x16
     632:	4f 89       	ldd	r20, Y+23	; 0x17
     634:	58 8d       	ldd	r21, Y+24	; 0x18
     636:	6d 81       	ldd	r22, Y+5	; 0x05
     638:	7e 81       	ldd	r23, Y+6	; 0x06
     63a:	8f 81       	ldd	r24, Y+7	; 0x07
     63c:	98 85       	ldd	r25, Y+8	; 0x08
     63e:	0e 94 23 0c 	call	0x1846	; 0x1846 <__mulsi3>
     642:	4b 01       	movw	r8, r22
     644:	5c 01       	movw	r10, r24
     646:	29 8d       	ldd	r18, Y+25	; 0x19
     648:	3a 8d       	ldd	r19, Y+26	; 0x1a
     64a:	4b 8d       	ldd	r20, Y+27	; 0x1b
     64c:	5c 8d       	ldd	r21, Y+28	; 0x1c
     64e:	c7 01       	movw	r24, r14
     650:	b6 01       	movw	r22, r12
     652:	0e 94 23 0c 	call	0x1846	; 0x1846 <__mulsi3>
     656:	dc 01       	movw	r26, r24
     658:	cb 01       	movw	r24, r22
     65a:	88 0d       	add	r24, r8
     65c:	99 1d       	adc	r25, r9
     65e:	aa 1d       	adc	r26, r10
     660:	bb 1d       	adc	r27, r11
     662:	9c 01       	movw	r18, r24
     664:	ad 01       	movw	r20, r26
     666:	01 2e       	mov	r0, r17
     668:	1a e0       	ldi	r17, 0x0A	; 10
     66a:	55 95       	asr	r21
     66c:	47 95       	ror	r20
     66e:	37 95       	ror	r19
     670:	27 95       	ror	r18
     672:	1a 95       	dec	r17
     674:	d1 f7       	brne	.-12     	; 0x66a <__LOCK_REGION_LENGTH__+0x26a>
     676:	10 2d       	mov	r17, r0
     678:	2d 83       	std	Y+5, r18	; 0x05
     67a:	3e 83       	std	Y+6, r19	; 0x06
     67c:	4f 83       	std	Y+7, r20	; 0x07
     67e:	58 87       	std	Y+8, r21	; 0x08

		if (n > 2)
		{
			// Double butterfly
			butdis = n - 2;
			for (butloc = 1; butloc < (n >> 1); butloc++)
     680:	e9 a5       	ldd	r30, Y+41	; 0x29
     682:	fa a5       	ldd	r31, Y+42	; 0x2a
     684:	2b a1       	ldd	r18, Y+35	; 0x23
     686:	3c a1       	ldd	r19, Y+36	; 0x24
     688:	e2 17       	cp	r30, r18
     68a:	f3 07       	cpc	r31, r19
     68c:	08 f4       	brcc	.+2      	; 0x690 <__LOCK_REGION_LENGTH__+0x290>
     68e:	9d ce       	rjmp	.-710    	; 0x3ca <fhtDitInt+0x1c2>
     690:	1d c0       	rjmp	.+58     	; 0x6cc <__LOCK_REGION_LENGTH__+0x2cc>
							fx[k + n + butdis] = (fx[k + butdis] >> 1) - (int16_t)temp32bit2;
							fx[k] = (fx[k] >> 1) + (int16_t)temp32bit1;
							fx[k + butdis] = (fx[k + butdis] >> 1) + (int16_t)temp32bit2;
						}

						temp32bit1 = (fcos * dcos - fsin * dsin) >> SC_SCALE;
     692:	c9 86       	std	Y+9, r12	; 0x09
     694:	da 86       	std	Y+10, r13	; 0x0a
     696:	eb 86       	std	Y+11, r14	; 0x0b
     698:	fc 86       	std	Y+12, r15	; 0x0c
				{
					// Double butterfly
					butdis = n - 2;
					for (butloc = 1; butloc < (n >> 1); butloc++)
					{
						for (k = butloc; k <= FHT_LEN; k += istep)
     69a:	ef 85       	ldd	r30, Y+15	; 0x0f
     69c:	f8 89       	ldd	r31, Y+16	; 0x10
     69e:	e1 38       	cpi	r30, 0x81	; 129
     6a0:	f1 05       	cpc	r31, r1
     6a2:	0c f0       	brlt	.+2      	; 0x6a6 <__LOCK_REGION_LENGTH__+0x2a6>
     6a4:	38 cf       	rjmp	.-400    	; 0x516 <__LOCK_REGION_LENGTH__+0x116>
     6a6:	a9 88       	ldd	r10, Y+17	; 0x11
     6a8:	ba 88       	ldd	r11, Y+18	; 0x12
     6aa:	ed 8d       	ldd	r30, Y+29	; 0x1d
     6ac:	fe 8d       	ldd	r31, Y+30	; 0x1e
     6ae:	ae 0e       	add	r10, r30
     6b0:	bf 1e       	adc	r11, r31
     6b2:	0b 89       	ldd	r16, Y+19	; 0x13
     6b4:	1c 89       	ldd	r17, Y+20	; 0x14
     6b6:	0e 0f       	add	r16, r30
     6b8:	1f 1f       	adc	r17, r31
     6ba:	eb 89       	ldd	r30, Y+19	; 0x13
     6bc:	fc 89       	ldd	r31, Y+20	; 0x14
     6be:	29 89       	ldd	r18, Y+17	; 0x11
     6c0:	3a 89       	ldd	r19, Y+18	; 0x12
     6c2:	8f 84       	ldd	r8, Y+15	; 0x0f
     6c4:	98 88       	ldd	r9, Y+16	; 0x10
     6c6:	2b ab       	std	Y+51, r18	; 0x33
     6c8:	3c ab       	std	Y+52, r19	; 0x34
     6ca:	8d ce       	rjmp	.-742    	; 0x3e6 <fhtDitInt+0x1de>
				fcos = temp32bit1;
				butdis -= 2;
			}
		}

		if (n > 1)
     6cc:	ed a1       	ldd	r30, Y+37	; 0x25
     6ce:	fe a1       	ldd	r31, Y+38	; 0x26
     6d0:	e2 30       	cpi	r30, 0x02	; 2
     6d2:	f1 05       	cpc	r31, r1
     6d4:	b8 f1       	brcs	.+110    	; 0x744 <__LOCK_REGION_LENGTH__+0x344>
		{
			// Nyquist Frequency Loop
			for (k = (n >> 1); k < FHT_LEN; k += istep)
     6d6:	f6 95       	lsr	r31
     6d8:	e7 95       	ror	r30
     6da:	af 01       	movw	r20, r30
     6dc:	e0 38       	cpi	r30, 0x80	; 128
     6de:	f1 05       	cpc	r31, r1
     6e0:	8c f5       	brge	.+98     	; 0x744 <__LOCK_REGION_LENGTH__+0x344>
     6e2:	ad a1       	ldd	r26, Y+37	; 0x25
     6e4:	be a1       	ldd	r27, Y+38	; 0x26
     6e6:	ae 0f       	add	r26, r30
     6e8:	bf 1f       	adc	r27, r31
     6ea:	aa 0f       	add	r26, r26
     6ec:	bb 1f       	adc	r27, r27
     6ee:	29 a1       	ldd	r18, Y+33	; 0x21
     6f0:	3a a1       	ldd	r19, Y+34	; 0x22
     6f2:	a2 0f       	add	r26, r18
     6f4:	b3 1f       	adc	r27, r19
     6f6:	ee 0f       	add	r30, r30
     6f8:	ff 1f       	adc	r31, r31
     6fa:	e2 0f       	add	r30, r18
     6fc:	f3 1f       	adc	r31, r19
     6fe:	6d 85       	ldd	r22, Y+13	; 0x0d
     700:	7e 85       	ldd	r23, Y+14	; 0x0e
			{
				temp16bit1 = fx[k + n];
     702:	8d 91       	ld	r24, X+
     704:	9c 91       	ld	r25, X
     706:	11 97       	sbiw	r26, 0x01	; 1
     708:	89 83       	std	Y+1, r24	; 0x01
     70a:	9a 83       	std	Y+2, r25	; 0x02
				fx[k + n] = (fx[k] - temp16bit1) >> 1;
     70c:	20 81       	ld	r18, Z
     70e:	31 81       	ldd	r19, Z+1	; 0x01
     710:	28 1b       	sub	r18, r24
     712:	39 0b       	sbc	r19, r25
     714:	35 95       	asr	r19
     716:	27 95       	ror	r18
     718:	2d 93       	st	X+, r18
     71a:	3c 93       	st	X, r19
     71c:	11 97       	sbiw	r26, 0x01	; 1
				fx[k] = (fx[k] + temp16bit1) >> 1;
     71e:	80 81       	ld	r24, Z
     720:	91 81       	ldd	r25, Z+1	; 0x01
     722:	29 81       	ldd	r18, Y+1	; 0x01
     724:	3a 81       	ldd	r19, Y+2	; 0x02
     726:	82 0f       	add	r24, r18
     728:	93 1f       	adc	r25, r19
     72a:	95 95       	asr	r25
     72c:	87 95       	ror	r24
     72e:	80 83       	st	Z, r24
     730:	91 83       	std	Z+1, r25	; 0x01
		}

		if (n > 1)
		{
			// Nyquist Frequency Loop
			for (k = (n >> 1); k < FHT_LEN; k += istep)
     732:	46 0f       	add	r20, r22
     734:	57 1f       	adc	r21, r23
     736:	a6 0d       	add	r26, r6
     738:	b7 1d       	adc	r27, r7
     73a:	e6 0d       	add	r30, r6
     73c:	f7 1d       	adc	r31, r7
     73e:	40 38       	cpi	r20, 0x80	; 128
     740:	51 05       	cpc	r21, r1
     742:	fc f2       	brlt	.-66     	; 0x702 <__LOCK_REGION_LENGTH__+0x302>
     744:	eb a5       	ldd	r30, Y+43	; 0x2b
     746:	fc a5       	ldd	r31, Y+44	; 0x2c
     748:	ed a3       	std	Y+37, r30	; 0x25
     74a:	fe a3       	std	Y+38, r31	; 0x26

	// Start of FHT function
	n = 1;
	tablePointer = 0;

	while (n < FHT_LEN)
     74c:	2c eb       	ldi	r18, 0xBC	; 188
     74e:	30 e0       	ldi	r19, 0x00	; 0
     750:	ed a5       	ldd	r30, Y+45	; 0x2d
     752:	fe a5       	ldd	r31, Y+46	; 0x2e
     754:	2e 17       	cp	r18, r30
     756:	3f 07       	cpc	r19, r31
     758:	09 f0       	breq	.+2      	; 0x75c <__LOCK_REGION_LENGTH__+0x35c>
     75a:	b1 cd       	rjmp	.-1182   	; 0x2be <fhtDitInt+0xb6>
			// End Nyquist frequency loop
		}
		n = istep;
	}
	// End FHT
}
     75c:	e4 96       	adiw	r28, 0x34	; 52
     75e:	cd bf       	out	0x3d, r28	; 61
     760:	de bf       	out	0x3e, r29	; 62
     762:	df 91       	pop	r29
     764:	cf 91       	pop	r28
     766:	1f 91       	pop	r17
     768:	0f 91       	pop	r16
     76a:	ff 90       	pop	r15
     76c:	ef 90       	pop	r14
     76e:	df 90       	pop	r13
     770:	cf 90       	pop	r12
     772:	bf 90       	pop	r11
     774:	af 90       	pop	r10
     776:	9f 90       	pop	r9
     778:	8f 90       	pop	r8
     77a:	7f 90       	pop	r7
     77c:	6f 90       	pop	r6
     77e:	5f 90       	pop	r5
     780:	4f 90       	pop	r4
     782:	3f 90       	pop	r3
     784:	2f 90       	pop	r2
     786:	08 95       	ret

00000788 <get_peak_power_bin>:

#include "fhtConfig.h"
#include "peak_power.h"

uint8_t get_peak_power_bin(int16_t *fx)
{
     788:	cf 93       	push	r28
     78a:	df 93       	push	r29
     78c:	fc 01       	movw	r30, r24
     78e:	32 96       	adiw	r30, 0x02	; 2
     790:	dc 01       	movw	r26, r24
     792:	b3 95       	inc	r27
	uint16_t max_val = 0;
	uint8_t max_pos = 0;

	for (uint8_t k = 1; k < (FHT_LEN / 2); k++)
     794:	91 e0       	ldi	r25, 0x01	; 1
#include "peak_power.h"

uint8_t get_peak_power_bin(int16_t *fx)
{
	uint16_t max_val = 0;
	uint8_t max_pos = 0;
     796:	80 e0       	ldi	r24, 0x00	; 0
#include "fhtConfig.h"
#include "peak_power.h"

uint8_t get_peak_power_bin(int16_t *fx)
{
	uint16_t max_val = 0;
     798:	60 e0       	ldi	r22, 0x00	; 0
     79a:	70 e0       	ldi	r23, 0x00	; 0
     79c:	ef 01       	movw	r28, r30
	uint8_t max_pos = 0;

	for (uint8_t k = 1; k < (FHT_LEN / 2); k++)
	{
		uint16_t a = abs(fx[k]);
     79e:	20 81       	ld	r18, Z
     7a0:	31 81       	ldd	r19, Z+1	; 0x01
     7a2:	33 23       	and	r19, r19
     7a4:	1c f4       	brge	.+6      	; 0x7ac <get_peak_power_bin+0x24>
     7a6:	31 95       	neg	r19
     7a8:	21 95       	neg	r18
     7aa:	31 09       	sbc	r19, r1
     7ac:	a9 01       	movw	r20, r18
		uint16_t b = abs(fx[FHT_LEN-k]);
     7ae:	3e 91       	ld	r19, -X
     7b0:	2e 91       	ld	r18, -X
     7b2:	33 23       	and	r19, r19
     7b4:	1c f4       	brge	.+6      	; 0x7bc <get_peak_power_bin+0x34>
     7b6:	31 95       	neg	r19
     7b8:	21 95       	neg	r18
     7ba:	31 09       	sbc	r19, r1

		uint16_t c = a > b? a+b/2 : b+a/2;
     7bc:	24 17       	cp	r18, r20
     7be:	35 07       	cpc	r19, r21
     7c0:	28 f4       	brcc	.+10     	; 0x7cc <get_peak_power_bin+0x44>
     7c2:	36 95       	lsr	r19
     7c4:	27 95       	ror	r18
     7c6:	24 0f       	add	r18, r20
     7c8:	35 1f       	adc	r19, r21
     7ca:	04 c0       	rjmp	.+8      	; 0x7d4 <get_peak_power_bin+0x4c>
     7cc:	56 95       	lsr	r21
     7ce:	47 95       	ror	r20
     7d0:	24 0f       	add	r18, r20
     7d2:	35 1f       	adc	r19, r21
		c = c > 1024? c : 0;
     7d4:	21 30       	cpi	r18, 0x01	; 1
     7d6:	44 e0       	ldi	r20, 0x04	; 4
     7d8:	34 07       	cpc	r19, r20
     7da:	60 f0       	brcs	.+24     	; 0x7f4 <get_peak_power_bin+0x6c>

		fx[k] = c;
     7dc:	28 83       	st	Y, r18
     7de:	39 83       	std	Y+1, r19	; 0x01

		if (c > max_val)
     7e0:	62 17       	cp	r22, r18
     7e2:	73 07       	cpc	r23, r19
     7e4:	10 f4       	brcc	.+4      	; 0x7ea <get_peak_power_bin+0x62>
     7e6:	89 2f       	mov	r24, r25
	{
		uint16_t a = abs(fx[k]);
		uint16_t b = abs(fx[FHT_LEN-k]);

		uint16_t c = a > b? a+b/2 : b+a/2;
		c = c > 1024? c : 0;
     7e8:	b9 01       	movw	r22, r18
uint8_t get_peak_power_bin(int16_t *fx)
{
	uint16_t max_val = 0;
	uint8_t max_pos = 0;

	for (uint8_t k = 1; k < (FHT_LEN / 2); k++)
     7ea:	9f 5f       	subi	r25, 0xFF	; 255
     7ec:	32 96       	adiw	r30, 0x02	; 2
     7ee:	90 34       	cpi	r25, 0x40	; 64
     7f0:	a9 f6       	brne	.-86     	; 0x79c <get_peak_power_bin+0x14>
     7f2:	03 c0       	rjmp	.+6      	; 0x7fa <get_peak_power_bin+0x72>
		uint16_t b = abs(fx[FHT_LEN-k]);

		uint16_t c = a > b? a+b/2 : b+a/2;
		c = c > 1024? c : 0;

		fx[k] = c;
     7f4:	18 82       	st	Y, r1
     7f6:	19 82       	std	Y+1, r1	; 0x01
     7f8:	f8 cf       	rjmp	.-16     	; 0x7ea <get_peak_power_bin+0x62>
			max_pos = k;
		}
	}

	return max_pos;
}
     7fa:	df 91       	pop	r29
     7fc:	cf 91       	pop	r28
     7fe:	08 95       	ret

00000800 <tca_init>:
	TCA0.SINGLE.CTRLA = TCA_SINGLE_ENABLE_bm | TCA_SINGLE_CLKSEL_DIV64_gc;  
}

void tcb_init(void)
{
	TCB0.CTRLA = 0b101; // Enable timer and set clk source to TCA
     800:	e0 e0       	ldi	r30, 0x00	; 0
     802:	fa e0       	ldi	r31, 0x0A	; 10
     804:	81 e0       	ldi	r24, 0x01	; 1
     806:	82 87       	std	Z+10, r24	; 0x0a
     808:	8f e0       	ldi	r24, 0x0F	; 15
     80a:	90 e0       	ldi	r25, 0x00	; 0
     80c:	86 a3       	std	Z+38, r24	; 0x26
     80e:	97 a3       	std	Z+39, r25	; 0x27
     810:	8b e0       	ldi	r24, 0x0B	; 11
     812:	80 83       	st	Z, r24
     814:	08 95       	ret

00000816 <adc0_init>:
}

void adc0_init(void)
{
	ADC0.CTRLC = ADC_PRESC_DIV16_gc | ADC_SAMPCAP_bm;
     816:	e0 e0       	ldi	r30, 0x00	; 0
     818:	f6 e0       	ldi	r31, 0x06	; 6
     81a:	83 e4       	ldi	r24, 0x43	; 67
     81c:	82 83       	std	Z+2, r24	; 0x02
	ADC0.MUXPOS = ADC_MUXPOS_AIN2_gc;
     81e:	82 e0       	ldi	r24, 0x02	; 2
     820:	86 83       	std	Z+6, r24	; 0x06
	ADC0.SAMPCTRL = 19;
     822:	83 e1       	ldi	r24, 0x13	; 19
     824:	85 83       	std	Z+5, r24	; 0x05
	//ADC0.EVCTRL = ADC_STARTEI_bm;
	ADC0.INTCTRL = ADC_RESRDY_bm;
     826:	81 e0       	ldi	r24, 0x01	; 1
     828:	82 87       	std	Z+10, r24	; 0x0a
	ADC0.CTRLA = ADC_ENABLE_bm | ADC_RESSEL_10BIT_gc;
     82a:	80 83       	st	Z, r24

	// Disable digital input buffers on analog input
	PORTD.PIN2CTRL = PORT_ISC_INPUT_DISABLE_gc;
     82c:	94 e0       	ldi	r25, 0x04	; 4
     82e:	90 93 72 04 	sts	0x0472, r25	; 0x800472 <__TEXT_REGION_LENGTH__+0x7f4472>

	// Configure ADC0 voltage reference
	VREF.CTRLA = VREF_ADC0REFSEL_2V5_gc;
     832:	90 e2       	ldi	r25, 0x20	; 32
     834:	90 93 a0 00 	sts	0x00A0, r25	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7f40a0>

	ADC0.INTCTRL = 0x01;	// RESRDY interrupt enable
     838:	82 87       	std	Z+10, r24	; 0x0a
     83a:	08 95       	ret

0000083c <io_pin_init>:
	//SPI0.CTRLB = 1 << SPI_SSD_bp; 
//}

void io_pin_init(void)
{
	PORTF.DIR |= (1 << PIN5_bp);		// Built-in LED OUTPUT
     83c:	e0 ea       	ldi	r30, 0xA0	; 160
     83e:	f4 e0       	ldi	r31, 0x04	; 4
     840:	80 81       	ld	r24, Z
     842:	80 62       	ori	r24, 0x20	; 32
     844:	80 83       	st	Z, r24
     846:	08 95       	ret

00000848 <initialize>:

void initialize(void)
{
	// System clock set at 8 MHz (16 Mhz / prescaler = 2)
	
	system_init();						// Atmel start driver init
     848:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <system_init>
	tca_init();
     84c:	0e 94 00 04 	call	0x800	; 0x800 <tca_init>
	TCA0.SINGLE.CTRLA = TCA_SINGLE_ENABLE_bm | TCA_SINGLE_CLKSEL_DIV64_gc;  
}

void tcb_init(void)
{
	TCB0.CTRLA = 0b101; // Enable timer and set clk source to TCA
     850:	85 e0       	ldi	r24, 0x05	; 5
     852:	80 93 80 0a 	sts	0x0A80, r24	; 0x800a80 <__TEXT_REGION_LENGTH__+0x7f4a80>
	// System clock set at 8 MHz (16 Mhz / prescaler = 2)
	
	system_init();						// Atmel start driver init
	tca_init();
	tcb_init();
	adc0_init();						// ADC
     856:	0e 94 0b 04 	call	0x816	; 0x816 <adc0_init>
		
	io_pin_init();
     85a:	0e 94 1e 04 	call	0x83c	; 0x83c <io_pin_init>
	fdevopen(CDC_USART_3_write, NULL);	// Initialize standard out
     85e:	60 e0       	ldi	r22, 0x00	; 0
     860:	70 e0       	ldi	r23, 0x00	; 0
     862:	8b e1       	ldi	r24, 0x1B	; 27
     864:	9c e0       	ldi	r25, 0x0C	; 12
     866:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <fdevopen>
	sd_init(0);							// Initialize SD-card communication
     86a:	80 e0       	ldi	r24, 0x00	; 0
     86c:	0e 94 88 08 	call	0x1110	; 0x1110 <sd_init>
	
	sei();								// Enable global interrupts
     870:	78 94       	sei
     872:	08 95       	ret

00000874 <main>:
#include "pattern_detection/pattern_detection.h"
#include "audio_sampler/audio_sampler.h"


int main(void)
{
     874:	cf 93       	push	r28
     876:	df 93       	push	r29
     878:	cd b7       	in	r28, 0x3d	; 61
     87a:	de b7       	in	r29, 0x3e	; 62
     87c:	c5 55       	subi	r28, 0x55	; 85
     87e:	d1 40       	sbci	r29, 0x01	; 1
     880:	cd bf       	out	0x3d, r28	; 61
     882:	de bf       	out	0x3e, r29	; 62
	initialize();
     884:	0e 94 24 04 	call	0x848	; 0x848 <initialize>
	
	uint8_t record[PATTERN_LENGTH] = {0xff};
     888:	fe 01       	movw	r30, r28
     88a:	31 96       	adiw	r30, 0x01	; 1
     88c:	80 e7       	ldi	r24, 0x70	; 112
     88e:	df 01       	movw	r26, r30
     890:	1d 92       	st	X+, r1
     892:	8a 95       	dec	r24
     894:	e9 f7       	brne	.-6      	; 0x890 <main+0x1c>
     896:	8f ef       	ldi	r24, 0xFF	; 255
     898:	89 83       	std	Y+1, r24	; 0x01
	uint8_t r_end = 0;
	int16_t detection_score = -20000;
	StorageInfo storage_info;
	uint8_t error_tracker = 0xff;
     89a:	e2 96       	adiw	r28, 0x32	; 50
     89c:	8f af       	std	Y+63, r24	; 0x3f
     89e:	e2 97       	sbiw	r28, 0x32	; 50
	
	while (1)
	{		
		// Retrieve info about patterns stored on SDC.
		// E.g. number of stored audio patterns
		storage_info = retrieve_storage_info(&error_tracker);	
     8a0:	ce 01       	movw	r24, r28
     8a2:	8f 58       	subi	r24, 0x8F	; 143
     8a4:	9f 4f       	sbci	r25, 0xFF	; 255
     8a6:	0e 94 e6 05 	call	0xbcc	; 0xbcc <retrieve_storage_info>
     8aa:	7c 01       	movw	r14, r24
		
		// On-switch for the audio_sampler module
		start_sampling();
     8ac:	0e 94 7d 00 	call	0xfa	; 0xfa <start_sampling>
		
		// Returns pointer to the sampled signal array, containing 128 raw samples
		sampled_sig_ptr = return_sampled_signal();
     8b0:	0e 94 81 00 	call	0x102	; 0x102 <return_sampled_signal>
		
		// Executes frequency analysis on the sampled signal,
		// and returns the dominant frequency bin of said signal
		record[r_end] = get_main_freq(sampled_sig_ptr);	
     8b4:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <get_main_freq>
     8b8:	89 83       	std	Y+1, r24	; 0x01

		r_end++;	// Iterator for the record array
     8ba:	44 24       	eor	r4, r4
     8bc:	43 94       	inc	r4
		{			
			// Fetch pattern from SD-card
			pattern = retrieve_pattern(pattern_ind, &error_tracker);	
			
			// Evaluate to what degree the recorded pattern matches the stored pattern from the SD-card
			detection_score = evaluate_pattern_match(record, pattern.data);	
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	4c 01       	movw	r8, r24
			
			// Check for pattern match
			if (detection_score >= pattern.detection_threshold)		
			{
				printf("PATTERN %d DETECTED!\n\r", pattern_ind);
     8c4:	0f 2e       	mov	r0, r31
     8c6:	f4 e9       	ldi	r31, 0x94	; 148
     8c8:	af 2e       	mov	r10, r31
     8ca:	f1 e6       	ldi	r31, 0x61	; 97
     8cc:	bf 2e       	mov	r11, r31
     8ce:	f0 2d       	mov	r31, r0
				printf("Detection value: %d\n\r", detection_score);
     8d0:	0f 2e       	mov	r0, r31
     8d2:	fb ea       	ldi	r31, 0xAB	; 171
     8d4:	cf 2e       	mov	r12, r31
     8d6:	f1 e6       	ldi	r31, 0x61	; 97
     8d8:	df 2e       	mov	r13, r31
     8da:	f0 2d       	mov	r31, r0
		{			
			// Fetch pattern from SD-card
			pattern = retrieve_pattern(pattern_ind, &error_tracker);	
			
			// Evaluate to what degree the recorded pattern matches the stored pattern from the SD-card
			detection_score = evaluate_pattern_match(record, pattern.data);	
     8dc:	58 2e       	mov	r5, r24
     8de:	09 2d       	mov	r16, r9
     8e0:	01 c0       	rjmp	.+2      	; 0x8e4 <main+0x70>
		r_end++;	// Iterator for the record array
		
		// If the iterator exceeds the size of the record array, reset it to zero
		if (r_end >= sizeof(record))	
		{
			r_end = 0;
     8e2:	41 2c       	mov	r4, r1
		}
		
		// Run through all patterns stored on SD-card
		for (uint8_t pattern_ind = 1; pattern_ind <= storage_info.n_patterns_stored; pattern_ind++)	
     8e4:	e1 14       	cp	r14, r1
     8e6:	f1 04       	cpc	r15, r1
     8e8:	09 f4       	brne	.+2      	; 0x8ec <main+0x78>
     8ea:	45 c0       	rjmp	.+138    	; 0x976 <main+0x102>
     8ec:	61 e0       	ldi	r22, 0x01	; 1
     8ee:	70 e0       	ldi	r23, 0x00	; 0
     8f0:	11 e0       	ldi	r17, 0x01	; 1
		{			
			// Fetch pattern from SD-card
			pattern = retrieve_pattern(pattern_ind, &error_tracker);	
     8f2:	ae 01       	movw	r20, r28
     8f4:	4f 58       	subi	r20, 0x8F	; 143
     8f6:	5f 4f       	sbci	r21, 0xFF	; 255
     8f8:	ce 01       	movw	r24, r28
     8fa:	8c 51       	subi	r24, 0x1C	; 28
     8fc:	9f 4f       	sbci	r25, 0xFF	; 255
     8fe:	0e 94 94 05 	call	0xb28	; 0xb28 <retrieve_pattern>
     902:	82 e7       	ldi	r24, 0x72	; 114
     904:	fe 01       	movw	r30, r28
     906:	ec 51       	subi	r30, 0x1C	; 28
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	de 01       	movw	r26, r28
     90c:	ae 58       	subi	r26, 0x8E	; 142
     90e:	bf 4f       	sbci	r27, 0xFF	; 255
     910:	01 90       	ld	r0, Z+
     912:	0d 92       	st	X+, r0
     914:	8a 95       	dec	r24
     916:	e1 f7       	brne	.-8      	; 0x910 <main+0x9c>
			
			// Evaluate to what degree the recorded pattern matches the stored pattern from the SD-card
			detection_score = evaluate_pattern_match(record, pattern.data);	
     918:	be 01       	movw	r22, r28
     91a:	6e 58       	subi	r22, 0x8E	; 142
     91c:	7f 4f       	sbci	r23, 0xFF	; 255
     91e:	85 2d       	mov	r24, r5
     920:	90 2f       	mov	r25, r16
     922:	0e 94 43 05 	call	0xa86	; 0xa86 <evaluate_pattern_match>
     926:	3c 01       	movw	r6, r24
			
			// Check for pattern match
			if (detection_score >= pattern.detection_threshold)		
     928:	ce 51       	subi	r28, 0x1E	; 30
     92a:	df 4f       	sbci	r29, 0xFF	; 255
     92c:	88 81       	ld	r24, Y
     92e:	99 81       	ldd	r25, Y+1	; 0x01
     930:	c2 5e       	subi	r28, 0xE2	; 226
     932:	d0 40       	sbci	r29, 0x00	; 0
     934:	68 16       	cp	r6, r24
     936:	79 06       	cpc	r7, r25
     938:	bc f0       	brlt	.+46     	; 0x968 <main+0xf4>
			{
				printf("PATTERN %d DETECTED!\n\r", pattern_ind);
     93a:	1f 92       	push	r1
     93c:	1f 93       	push	r17
     93e:	bf 92       	push	r11
     940:	af 92       	push	r10
     942:	0e 94 b3 0c 	call	0x1966	; 0x1966 <printf>
				printf("Detection value: %d\n\r", detection_score);
     946:	7f 92       	push	r7
     948:	6f 92       	push	r6
     94a:	df 92       	push	r13
     94c:	cf 92       	push	r12
     94e:	0e 94 b3 0c 	call	0x1966	; 0x1966 <printf>
				
				// When a pattern is detected, reset the recorded signal
				memset(record, 0xff, PATTERN_LENGTH);		
     952:	40 e7       	ldi	r20, 0x70	; 112
     954:	50 e0       	ldi	r21, 0x00	; 0
     956:	6f ef       	ldi	r22, 0xFF	; 255
     958:	70 e0       	ldi	r23, 0x00	; 0
     95a:	85 2d       	mov	r24, r5
     95c:	90 2f       	mov	r25, r16
     95e:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <memset>
     962:	cd bf       	out	0x3d, r28	; 61
     964:	de bf       	out	0x3e, r29	; 62
				r_end = 0;
     966:	41 2c       	mov	r4, r1
		{
			r_end = 0;
		}
		
		// Run through all patterns stored on SD-card
		for (uint8_t pattern_ind = 1; pattern_ind <= storage_info.n_patterns_stored; pattern_ind++)	
     968:	1f 5f       	subi	r17, 0xFF	; 255
     96a:	61 2f       	mov	r22, r17
     96c:	70 e0       	ldi	r23, 0x00	; 0
     96e:	e6 16       	cp	r14, r22
     970:	f7 06       	cpc	r15, r23
     972:	08 f0       	brcs	.+2      	; 0x976 <main+0x102>
     974:	be cf       	rjmp	.-132    	; 0x8f2 <main+0x7e>
	
	while (1)
	{		
		// Retrieve info about patterns stored on SDC.
		// E.g. number of stored audio patterns
		storage_info = retrieve_storage_info(&error_tracker);	
     976:	ce 01       	movw	r24, r28
     978:	8f 58       	subi	r24, 0x8F	; 143
     97a:	9f 4f       	sbci	r25, 0xFF	; 255
     97c:	0e 94 e6 05 	call	0xbcc	; 0xbcc <retrieve_storage_info>
     980:	7c 01       	movw	r14, r24
		
		// On-switch for the audio_sampler module
		start_sampling();
     982:	0e 94 7d 00 	call	0xfa	; 0xfa <start_sampling>
		
		// Returns pointer to the sampled signal array, containing 128 raw samples
		sampled_sig_ptr = return_sampled_signal();
     986:	0e 94 81 00 	call	0x102	; 0x102 <return_sampled_signal>
		
		// Executes frequency analysis on the sampled signal,
		// and returns the dominant frequency bin of said signal
		record[r_end] = get_main_freq(sampled_sig_ptr);	
     98a:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <get_main_freq>
     98e:	f4 01       	movw	r30, r8
     990:	e4 0d       	add	r30, r4
     992:	f1 1d       	adc	r31, r1
     994:	80 83       	st	Z, r24

		r_end++;	// Iterator for the record array
     996:	43 94       	inc	r4
		
		// If the iterator exceeds the size of the record array, reset it to zero
		if (r_end >= sizeof(record))	
     998:	bf e6       	ldi	r27, 0x6F	; 111
     99a:	b4 15       	cp	r27, r4
     99c:	08 f4       	brcc	.+2      	; 0x9a0 <main+0x12c>
     99e:	a1 cf       	rjmp	.-190    	; 0x8e2 <main+0x6e>
     9a0:	a1 cf       	rjmp	.-190    	; 0x8e4 <main+0x70>

000009a2 <get_main_freq>:
#include "fht/fht.h"
#include "fht/peak_power.h"
#include "pattern_detection.h"

uint8_t get_main_freq(int16_t *sampled_signal)
{
     9a2:	cf 93       	push	r28
     9a4:	df 93       	push	r29
     9a6:	ec 01       	movw	r28, r24
	fhtDitInt(sampled_signal);
     9a8:	0e 94 04 01 	call	0x208	; 0x208 <fhtDitInt>
	return get_peak_power_bin(sampled_signal);
     9ac:	ce 01       	movw	r24, r28
     9ae:	0e 94 c4 03 	call	0x788	; 0x788 <get_peak_power_bin>
}
     9b2:	df 91       	pop	r29
     9b4:	cf 91       	pop	r28
     9b6:	08 95       	ret

000009b8 <find_initial_offset>:
	return detection_top_val;
}


uint8_t find_initial_offset(uint8_t *recorded_pattern, uint8_t *reference_pattern)
{
     9b8:	af 92       	push	r10
     9ba:	bf 92       	push	r11
     9bc:	cf 92       	push	r12
     9be:	df 92       	push	r13
     9c0:	ff 92       	push	r15
     9c2:	0f 93       	push	r16
     9c4:	1f 93       	push	r17
     9c6:	cf 93       	push	r28
     9c8:	df 93       	push	r29
	// Lookahead determines how many consecutive values must be equal to
	// be deemed a sufficient starting point
	uint8_t lookahead = 4;
	uint8_t p_idx = 0;
	int8_t p = reference_pattern[p_idx];
     9ca:	eb 01       	movw	r28, r22
     9cc:	28 81       	ld	r18, Y
     9ce:	fc 01       	movw	r30, r24
     9d0:	f2 2e       	mov	r15, r18
		
	// Search through recorded_pattern to find value equal to reference_pattern[0]
	for (uint8_t r_idx = 0; r_idx < RECORD_SIZE; r_idx++)
     9d2:	80 e0       	ldi	r24, 0x00	; 0
			for (uint8_t i = 0; i < lookahead; i++)
			{
				p = reference_pattern[p_idx+i];
				r = recorded_pattern[r_idx+i];
				match_distance = abs(r-p);
				if (match_distance != 0)
     9d4:	a2 2e       	mov	r10, r18
     9d6:	02 2e       	mov	r0, r18
     9d8:	00 0c       	add	r0, r0
     9da:	bb 08       	sbc	r11, r11
		// then check that the next 4 (lookahead) values are equal as well
		if (match_distance == 0)
		{
			for (uint8_t i = 0; i < lookahead; i++)
			{
				p = reference_pattern[p_idx+i];
     9dc:	92 2f       	mov	r25, r18
     9de:	db 01       	movw	r26, r22
     9e0:	14 96       	adiw	r26, 0x04	; 4
	int8_t p = reference_pattern[p_idx];
		
	// Search through recorded_pattern to find value equal to reference_pattern[0]
	for (uint8_t r_idx = 0; r_idx < RECORD_SIZE; r_idx++)
	{
		int8_t r = recorded_pattern[r_idx];
     9e2:	21 91       	ld	r18, Z+
		uint8_t match_distance = abs(r-p);
		
		// If reference_pattern[0] == recorded_pattern[r_idx],
		// then check that the next 4 (lookahead) values are equal as well
		if (match_distance == 0)
     9e4:	02 2e       	mov	r0, r18
     9e6:	00 0c       	add	r0, r0
     9e8:	33 0b       	sbc	r19, r19
     9ea:	2f 19       	sub	r18, r15
     9ec:	31 09       	sbc	r19, r1
     9ee:	f7 fc       	sbrc	r15, 7
     9f0:	33 95       	inc	r19
     9f2:	a9 01       	movw	r20, r18
     9f4:	33 23       	and	r19, r19
     9f6:	24 f4       	brge	.+8      	; 0xa00 <find_initial_offset+0x48>
     9f8:	44 27       	eor	r20, r20
     9fa:	55 27       	eor	r21, r21
     9fc:	42 1b       	sub	r20, r18
     9fe:	53 0b       	sbc	r21, r19
     a00:	41 11       	cpse	r20, r1
     a02:	32 c0       	rjmp	.+100    	; 0xa68 <find_initial_offset+0xb0>
		{
			for (uint8_t i = 0; i < lookahead; i++)
			{
				p = reference_pattern[p_idx+i];
				r = recorded_pattern[r_idx+i];
     a04:	9f 01       	movw	r18, r30
     a06:	21 50       	subi	r18, 0x01	; 1
     a08:	31 09       	sbc	r19, r1
				match_distance = abs(r-p);
				if (match_distance != 0)
     a0a:	e9 01       	movw	r28, r18
     a0c:	28 81       	ld	r18, Y
     a0e:	02 2e       	mov	r0, r18
     a10:	00 0c       	add	r0, r0
     a12:	33 0b       	sbc	r19, r19
     a14:	2a 19       	sub	r18, r10
     a16:	3b 09       	sbc	r19, r11
     a18:	a9 01       	movw	r20, r18
     a1a:	22 f4       	brpl	.+8      	; 0xa24 <find_initial_offset+0x6c>
     a1c:	44 27       	eor	r20, r20
     a1e:	55 27       	eor	r21, r21
     a20:	42 1b       	sub	r20, r18
     a22:	53 0b       	sbc	r21, r19
     a24:	41 11       	cpse	r20, r1
     a26:	1f c0       	rjmp	.+62     	; 0xa66 <find_initial_offset+0xae>
     a28:	ab 01       	movw	r20, r22
     a2a:	4f 5f       	subi	r20, 0xFF	; 255
     a2c:	5f 4f       	sbci	r21, 0xFF	; 255
     a2e:	8f 01       	movw	r16, r30
		// then check that the next 4 (lookahead) values are equal as well
		if (match_distance == 0)
		{
			for (uint8_t i = 0; i < lookahead; i++)
			{
				p = reference_pattern[p_idx+i];
     a30:	ea 01       	movw	r28, r20
     a32:	d9 90       	ld	r13, Y+
     a34:	ae 01       	movw	r20, r28
     a36:	fd 2c       	mov	r15, r13
				r = recorded_pattern[r_idx+i];
     a38:	e8 01       	movw	r28, r16
     a3a:	29 91       	ld	r18, Y+
     a3c:	8e 01       	movw	r16, r28
				match_distance = abs(r-p);
				if (match_distance != 0)
     a3e:	02 2e       	mov	r0, r18
     a40:	00 0c       	add	r0, r0
     a42:	33 0b       	sbc	r19, r19
     a44:	2d 19       	sub	r18, r13
     a46:	31 09       	sbc	r19, r1
     a48:	d7 fc       	sbrc	r13, 7
     a4a:	33 95       	inc	r19
     a4c:	69 01       	movw	r12, r18
     a4e:	33 23       	and	r19, r19
     a50:	24 f4       	brge	.+8      	; 0xa5a <find_initial_offset+0xa2>
     a52:	cc 24       	eor	r12, r12
     a54:	dd 24       	eor	r13, r13
     a56:	c2 1a       	sub	r12, r18
     a58:	d3 0a       	sbc	r13, r19
     a5a:	c1 10       	cpse	r12, r1
     a5c:	05 c0       	rjmp	.+10     	; 0xa68 <find_initial_offset+0xb0>
				{
					// If values not equal, start over
					break;
				}
				if (i == lookahead-1)
     a5e:	4a 17       	cp	r20, r26
     a60:	5b 07       	cpc	r21, r27
     a62:	31 f7       	brne	.-52     	; 0xa30 <find_initial_offset+0x78>
     a64:	06 c0       	rjmp	.+12     	; 0xa72 <find_initial_offset+0xba>
		// then check that the next 4 (lookahead) values are equal as well
		if (match_distance == 0)
		{
			for (uint8_t i = 0; i < lookahead; i++)
			{
				p = reference_pattern[p_idx+i];
     a66:	f9 2e       	mov	r15, r25
	uint8_t lookahead = 4;
	uint8_t p_idx = 0;
	int8_t p = reference_pattern[p_idx];
		
	// Search through recorded_pattern to find value equal to reference_pattern[0]
	for (uint8_t r_idx = 0; r_idx < RECORD_SIZE; r_idx++)
     a68:	8f 5f       	subi	r24, 0xFF	; 255
     a6a:	80 37       	cpi	r24, 0x70	; 112
     a6c:	09 f0       	breq	.+2      	; 0xa70 <find_initial_offset+0xb8>
     a6e:	b9 cf       	rjmp	.-142    	; 0x9e2 <find_initial_offset+0x2a>
					return r_idx;
				}
			}
		}
	}		
	return 0;
     a70:	80 e0       	ldi	r24, 0x00	; 0
}
     a72:	df 91       	pop	r29
     a74:	cf 91       	pop	r28
     a76:	1f 91       	pop	r17
     a78:	0f 91       	pop	r16
     a7a:	ff 90       	pop	r15
     a7c:	df 90       	pop	r13
     a7e:	cf 90       	pop	r12
     a80:	bf 90       	pop	r11
     a82:	af 90       	pop	r10
     a84:	08 95       	ret

00000a86 <evaluate_pattern_match>:
	return get_peak_power_bin(sampled_signal);
}

// Returns a score based on the similarity of the two input patterns. 
int16_t evaluate_pattern_match(uint8_t *recorded_pattern, uint8_t *reference_pattern)
{		
     a86:	ff 92       	push	r15
     a88:	0f 93       	push	r16
     a8a:	1f 93       	push	r17
     a8c:	cf 93       	push	r28
     a8e:	df 93       	push	r29
     a90:	ec 01       	movw	r28, r24
     a92:	06 2f       	mov	r16, r22
     a94:	17 2f       	mov	r17, r23
	// The detection variable keeps track of how certain the algorithm is of a pattern match. 
	// The higher the value, the more likely there's a match. 
	int16_t detection = 0;
	int16_t detection_top_val = -20000;
	uint8_t offset = find_initial_offset(recorded_pattern, reference_pattern);
     a96:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <find_initial_offset>
     a9a:	e0 2f       	mov	r30, r16
     a9c:	f1 2f       	mov	r31, r17
     a9e:	0f 2e       	mov	r0, r31
     aa0:	f1 e7       	ldi	r31, 0x71	; 113
     aa2:	ff 2e       	mov	r15, r31
     aa4:	f0 2d       	mov	r31, r0
     aa6:	f8 0e       	add	r15, r24
     aa8:	91 e0       	ldi	r25, 0x01	; 1
     aaa:	98 0f       	add	r25, r24
	
	// This for-loop controls the pattern compare offset. It causes the algorithm to run 112 times for each audio pattern
	// With this loop enabled the algorithm requires ~70ms to execute for each audio pattern. 
	//for (uint8_t offset = 0; offset < RECORD_SIZE; offset++)	
	//{															
		detection = 0;
     aac:	00 e0       	ldi	r16, 0x00	; 0
     aae:	10 e0       	ldi	r17, 0x00	; 0
		
		for (uint8_t p_idx = 0; p_idx < RECORD_SIZE; p_idx++)	// RECORD_SIZE is set to 112
		{
			int8_t p = reference_pattern[p_idx];
     ab0:	21 91       	ld	r18, Z+
     ab2:	72 2f       	mov	r23, r18

			uint8_t r_idx = (offset + 1 + p_idx);
			
			// Ensures r_idx rolls over and starts at element zero whenever it exceeds the array size
			if (r_idx >= RECORD_SIZE)		
     ab4:	90 37       	cpi	r25, 0x70	; 112
     ab6:	18 f0       	brcs	.+6      	; 0xabe <evaluate_pattern_match+0x38>
			{
				r_idx -= RECORD_SIZE;
     ab8:	80 e9       	ldi	r24, 0x90	; 144
     aba:	89 0f       	add	r24, r25
     abc:	01 c0       	rjmp	.+2      	; 0xac0 <evaluate_pattern_match+0x3a>
		
		for (uint8_t p_idx = 0; p_idx < RECORD_SIZE; p_idx++)	// RECORD_SIZE is set to 112
		{
			int8_t p = reference_pattern[p_idx];

			uint8_t r_idx = (offset + 1 + p_idx);
     abe:	89 2f       	mov	r24, r25
			// Ensures r_idx rolls over and starts at element zero whenever it exceeds the array size
			if (r_idx >= RECORD_SIZE)		
			{
				r_idx -= RECORD_SIZE;
			}
			int8_t r = recorded_pattern[r_idx];
     ac0:	de 01       	movw	r26, r28
     ac2:	a8 0f       	add	r26, r24
     ac4:	b1 1d       	adc	r27, r1
     ac6:	6c 91       	ld	r22, X

			// Finds the difference between the recorded signal and the reference signal
			uint8_t match_distance = abs(r-p);
     ac8:	46 2f       	mov	r20, r22
     aca:	06 2e       	mov	r0, r22
     acc:	00 0c       	add	r0, r0
     ace:	55 0b       	sbc	r21, r21
     ad0:	42 1b       	sub	r20, r18
     ad2:	51 09       	sbc	r21, r1
     ad4:	27 fd       	sbrc	r18, 7
     ad6:	53 95       	inc	r21
     ad8:	9a 01       	movw	r18, r20
     ada:	55 23       	and	r21, r21
     adc:	24 f4       	brge	.+8      	; 0xae6 <evaluate_pattern_match+0x60>
     ade:	22 27       	eor	r18, r18
     ae0:	33 27       	eor	r19, r19
     ae2:	24 1b       	sub	r18, r20
     ae4:	35 0b       	sbc	r19, r21
		
			if (p == 0 && r == 0)
     ae6:	71 11       	cpse	r23, r1
     ae8:	12 c0       	rjmp	.+36     	; 0xb0e <evaluate_pattern_match+0x88>
     aea:	66 23       	and	r22, r22
     aec:	31 f0       	breq	.+12     	; 0xafa <evaluate_pattern_match+0x74>
     aee:	12 c0       	rjmp	.+36     	; 0xb14 <evaluate_pattern_match+0x8e>
				detection += 0;
			}
			else if (match_distance == 0)
			{			
				// If the elements are equal then award 2 points in favor of detection				
				detection += 2;
     af0:	0e 5f       	subi	r16, 0xFE	; 254
     af2:	1f 4f       	sbci	r17, 0xFF	; 255
     af4:	02 c0       	rjmp	.+4      	; 0xafa <evaluate_pattern_match+0x74>
			else if (p != 0)
			{
				// If the elements are not equal,  
				// and the reference pattern is something other than silence, 
				// subtract 2 points from detection
				detection -= 2;		
     af6:	02 50       	subi	r16, 0x02	; 2
     af8:	11 09       	sbc	r17, r1
     afa:	9f 5f       	subi	r25, 0xFF	; 255
	// With this loop enabled the algorithm requires ~70ms to execute for each audio pattern. 
	//for (uint8_t offset = 0; offset < RECORD_SIZE; offset++)	
	//{															
		detection = 0;
		
		for (uint8_t p_idx = 0; p_idx < RECORD_SIZE; p_idx++)	// RECORD_SIZE is set to 112
     afc:	9f 11       	cpse	r25, r15
     afe:	d8 cf       	rjmp	.-80     	; 0xab0 <evaluate_pattern_match+0x2a>
				// and the reference pattern is something other than silence, 
				// subtract 2 points from detection
				detection -= 2;		
			}
		}
		if (detection > detection_top_val)	// This if-statement serves the offset for-loop, 
     b00:	01 3e       	cpi	r16, 0xE1	; 225
     b02:	81 eb       	ldi	r24, 0xB1	; 177
     b04:	18 07       	cpc	r17, r24
     b06:	4c f4       	brge	.+18     	; 0xb1a <evaluate_pattern_match+0x94>
int16_t evaluate_pattern_match(uint8_t *recorded_pattern, uint8_t *reference_pattern)
{		
	// The detection variable keeps track of how certain the algorithm is of a pattern match. 
	// The higher the value, the more likely there's a match. 
	int16_t detection = 0;
	int16_t detection_top_val = -20000;
     b08:	00 ee       	ldi	r16, 0xE0	; 224
     b0a:	11 eb       	ldi	r17, 0xB1	; 177
		{									// and ensures that the highest detection value is returned.
			detection_top_val = detection;	// Serves no purpose when offset for-loop is disabled
		}
		
	//}
	return detection_top_val;
     b0c:	06 c0       	rjmp	.+12     	; 0xb1a <evaluate_pattern_match+0x94>
			if (p == 0 && r == 0)
			{
				// Don't award points for mutual silence
				detection += 0;
			}
			else if (match_distance == 0)
     b0e:	22 23       	and	r18, r18
     b10:	79 f3       	breq	.-34     	; 0xaf0 <evaluate_pattern_match+0x6a>
     b12:	f1 cf       	rjmp	.-30     	; 0xaf6 <evaluate_pattern_match+0x70>
     b14:	21 11       	cpse	r18, r1
     b16:	f1 cf       	rjmp	.-30     	; 0xafa <evaluate_pattern_match+0x74>
     b18:	eb cf       	rjmp	.-42     	; 0xaf0 <evaluate_pattern_match+0x6a>
			detection_top_val = detection;	// Serves no purpose when offset for-loop is disabled
		}
		
	//}
	return detection_top_val;
}
     b1a:	c8 01       	movw	r24, r16
     b1c:	df 91       	pop	r29
     b1e:	cf 91       	pop	r28
     b20:	1f 91       	pop	r17
     b22:	0f 91       	pop	r16
     b24:	ff 90       	pop	r15
     b26:	08 95       	ret

00000b28 <retrieve_pattern>:
	
	return error_tracker;
}

AudioPattern retrieve_pattern(uint16_t pattern_index, uint8_t *error_tracker) // Pattern index is one-indexed
{
     b28:	ef 92       	push	r14
     b2a:	ff 92       	push	r15
     b2c:	0f 93       	push	r16
     b2e:	1f 93       	push	r17
     b30:	cf 93       	push	r28
     b32:	df 93       	push	r29
     b34:	cd b7       	in	r28, 0x3d	; 61
     b36:	de b7       	in	r29, 0x3e	; 62
     b38:	c2 57       	subi	r28, 0x72	; 114
     b3a:	d2 40       	sbci	r29, 0x02	; 2
     b3c:	cd bf       	out	0x3d, r28	; 61
     b3e:	de bf       	out	0x3e, r29	; 62
     b40:	8c 01       	movw	r16, r24
     b42:	cb 01       	movw	r24, r22
     b44:	7a 01       	movw	r14, r20
	AudioPattern pattern;
	uint8_t return_data[512];
	error_tracker[0] = sd_read_single_block(pattern_index, return_data, 0);
     b46:	40 e0       	ldi	r20, 0x00	; 0
     b48:	be 01       	movw	r22, r28
     b4a:	6d 58       	subi	r22, 0x8D	; 141
     b4c:	7f 4f       	sbci	r23, 0xFF	; 255
     b4e:	0e 94 46 08 	call	0x108c	; 0x108c <sd_read_single_block>
     b52:	f7 01       	movw	r30, r14
     b54:	80 83       	st	Z, r24
     b56:	fe 01       	movw	r30, r28
     b58:	ed 58       	subi	r30, 0x8D	; 141
     b5a:	ff 4f       	sbci	r31, 0xFF	; 255
     b5c:	de 01       	movw	r26, r28
     b5e:	11 96       	adiw	r26, 0x01	; 1
     b60:	9e 01       	movw	r18, r28
     b62:	2d 51       	subi	r18, 0x1D	; 29
     b64:	3f 4f       	sbci	r19, 0xFF	; 255
	
	for (uint8_t i = 0; i < 112; i++)
	{
		pattern.data[i] = return_data[i];
     b66:	81 91       	ld	r24, Z+
     b68:	8d 93       	st	X+, r24
{
	AudioPattern pattern;
	uint8_t return_data[512];
	error_tracker[0] = sd_read_single_block(pattern_index, return_data, 0);
	
	for (uint8_t i = 0; i < 112; i++)
     b6a:	e2 17       	cp	r30, r18
     b6c:	f3 07       	cpc	r31, r19
     b6e:	d9 f7       	brne	.-10     	; 0xb66 <retrieve_pattern+0x3e>
	{
		pattern.data[i] = return_data[i];
 	}
	pattern.detection_threshold = (return_data[detection_threshold_Bp[0]] << 8) | (return_data[detection_threshold_Bp[1]]);
     b70:	e8 e0       	ldi	r30, 0x08	; 8
     b72:	f8 e2       	ldi	r31, 0x28	; 40
     b74:	80 81       	ld	r24, Z
     b76:	a3 e7       	ldi	r26, 0x73	; 115
     b78:	b0 e0       	ldi	r27, 0x00	; 0
     b7a:	ac 0f       	add	r26, r28
     b7c:	bd 1f       	adc	r27, r29
     b7e:	a8 0f       	add	r26, r24
     b80:	b1 1d       	adc	r27, r1
	
	return pattern;
     b82:	8c 91       	ld	r24, X
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	98 2f       	mov	r25, r24
     b88:	88 27       	eor	r24, r24
	
	for (uint8_t i = 0; i < 112; i++)
	{
		pattern.data[i] = return_data[i];
 	}
	pattern.detection_threshold = (return_data[detection_threshold_Bp[0]] << 8) | (return_data[detection_threshold_Bp[1]]);
     b8a:	21 81       	ldd	r18, Z+1	; 0x01
     b8c:	e3 e7       	ldi	r30, 0x73	; 115
     b8e:	f0 e0       	ldi	r31, 0x00	; 0
     b90:	ec 0f       	add	r30, r28
     b92:	fd 1f       	adc	r31, r29
     b94:	e2 0f       	add	r30, r18
     b96:	f1 1d       	adc	r31, r1
	
	return pattern;
     b98:	20 81       	ld	r18, Z
     b9a:	82 2b       	or	r24, r18
     b9c:	e3 96       	adiw	r28, 0x33	; 51
     b9e:	8e af       	std	Y+62, r24	; 0x3e
     ba0:	9f af       	std	Y+63, r25	; 0x3f
     ba2:	e3 97       	sbiw	r28, 0x33	; 51
     ba4:	82 e7       	ldi	r24, 0x72	; 114
     ba6:	fe 01       	movw	r30, r28
     ba8:	31 96       	adiw	r30, 0x01	; 1
     baa:	d8 01       	movw	r26, r16
     bac:	01 90       	ld	r0, Z+
     bae:	0d 92       	st	X+, r0
     bb0:	8a 95       	dec	r24
     bb2:	e1 f7       	brne	.-8      	; 0xbac <retrieve_pattern+0x84>
}
     bb4:	c8 01       	movw	r24, r16
     bb6:	ce 58       	subi	r28, 0x8E	; 142
     bb8:	dd 4f       	sbci	r29, 0xFD	; 253
     bba:	cd bf       	out	0x3d, r28	; 61
     bbc:	de bf       	out	0x3e, r29	; 62
     bbe:	df 91       	pop	r29
     bc0:	cf 91       	pop	r28
     bc2:	1f 91       	pop	r17
     bc4:	0f 91       	pop	r16
     bc6:	ff 90       	pop	r15
     bc8:	ef 90       	pop	r14
     bca:	08 95       	ret

00000bcc <retrieve_storage_info>:
	}
	return error_tracker;
}

StorageInfo retrieve_storage_info(uint8_t *error_tracker)
{
     bcc:	0f 93       	push	r16
     bce:	1f 93       	push	r17
     bd0:	cf 93       	push	r28
     bd2:	df 93       	push	r29
     bd4:	cd b7       	in	r28, 0x3d	; 61
     bd6:	de b7       	in	r29, 0x3e	; 62
     bd8:	d2 50       	subi	r29, 0x02	; 2
     bda:	cd bf       	out	0x3d, r28	; 61
     bdc:	de bf       	out	0x3e, r29	; 62
     bde:	8c 01       	movw	r16, r24
	StorageInfo storage_info;
	
	uint8_t return_data[DATA_BLOCK_SIZE];
	
	error_tracker[0] = sd_read_single_block(info_block_number, return_data, 0);
     be0:	80 91 5c 28 	lds	r24, 0x285C	; 0x80285c <info_block_number>
     be4:	40 e0       	ldi	r20, 0x00	; 0
     be6:	be 01       	movw	r22, r28
     be8:	6f 5f       	subi	r22, 0xFF	; 255
     bea:	7f 4f       	sbci	r23, 0xFF	; 255
     bec:	90 e0       	ldi	r25, 0x00	; 0
     bee:	0e 94 46 08 	call	0x108c	; 0x108c <sd_read_single_block>
     bf2:	f8 01       	movw	r30, r16
     bf4:	80 83       	st	Z, r24
	
	storage_info.n_patterns_stored = (return_data[n_patterns_Bp[0]] << 8) | (return_data[n_patterns_Bp[1]]);
     bf6:	ea e0       	ldi	r30, 0x0A	; 10
     bf8:	f8 e2       	ldi	r31, 0x28	; 40
     bfa:	80 81       	ld	r24, Z
     bfc:	a1 e0       	ldi	r26, 0x01	; 1
     bfe:	b0 e0       	ldi	r27, 0x00	; 0
     c00:	ac 0f       	add	r26, r28
     c02:	bd 1f       	adc	r27, r29
     c04:	a8 0f       	add	r26, r24
     c06:	b1 1d       	adc	r27, r1
	
	return storage_info;
     c08:	8c 91       	ld	r24, X
     c0a:	90 e0       	ldi	r25, 0x00	; 0
     c0c:	98 2f       	mov	r25, r24
     c0e:	88 27       	eor	r24, r24
	
	uint8_t return_data[DATA_BLOCK_SIZE];
	
	error_tracker[0] = sd_read_single_block(info_block_number, return_data, 0);
	
	storage_info.n_patterns_stored = (return_data[n_patterns_Bp[0]] << 8) | (return_data[n_patterns_Bp[1]]);
     c10:	21 81       	ldd	r18, Z+1	; 0x01
     c12:	e1 e0       	ldi	r30, 0x01	; 1
     c14:	f0 e0       	ldi	r31, 0x00	; 0
     c16:	ec 0f       	add	r30, r28
     c18:	fd 1f       	adc	r31, r29
     c1a:	e2 0f       	add	r30, r18
     c1c:	f1 1d       	adc	r31, r1
	
	return storage_info;
     c1e:	20 81       	ld	r18, Z
}
     c20:	82 2b       	or	r24, r18
     c22:	de 5f       	subi	r29, 0xFE	; 254
     c24:	cd bf       	out	0x3d, r28	; 61
     c26:	de bf       	out	0x3e, r29	; 62
     c28:	df 91       	pop	r29
     c2a:	cf 91       	pop	r28
     c2c:	1f 91       	pop	r17
     c2e:	0f 91       	pop	r16
     c30:	08 95       	ret

00000c32 <sd_cmd0>:
				error[0] = 24;
			}
			outer_loop_counter++;
		}
	}
}
     c32:	ef 92       	push	r14
     c34:	ff 92       	push	r15
     c36:	1f 93       	push	r17
     c38:	cf 93       	push	r28
     c3a:	df 93       	push	r29
     c3c:	00 d0       	rcall	.+0      	; 0xc3e <sd_cmd0+0xc>
     c3e:	cd b7       	in	r28, 0x3d	; 61
     c40:	de b7       	in	r29, 0x3e	; 62
     c42:	7c 01       	movw	r14, r24
     c44:	15 e0       	ldi	r17, 0x05	; 5
     c46:	8a e2       	ldi	r24, 0x2A	; 42
     c48:	98 e2       	ldi	r25, 0x28	; 40
     c4a:	0e 94 08 08 	call	0x1010	; 0x1010 <sd_send_cmd>
     c4e:	62 e0       	ldi	r22, 0x02	; 2
     c50:	70 e0       	ldi	r23, 0x00	; 0
     c52:	ce 01       	movw	r24, r28
     c54:	01 96       	adiw	r24, 0x01	; 1
     c56:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <sd_receive_bytes>
     c5a:	62 e0       	ldi	r22, 0x02	; 2
     c5c:	ce 01       	movw	r24, r28
     c5e:	01 96       	adiw	r24, 0x01	; 1
     c60:	0e 94 06 09 	call	0x120c	; 0x120c <sd_assemble_r1_rsp>
     c64:	81 30       	cpi	r24, 0x01	; 1
     c66:	21 f0       	breq	.+8      	; 0xc70 <sd_cmd0+0x3e>
     c68:	11 50       	subi	r17, 0x01	; 1
     c6a:	69 f7       	brne	.-38     	; 0xc46 <sd_cmd0+0x14>
     c6c:	f7 01       	movw	r30, r14
     c6e:	10 82       	st	Z, r1
     c70:	0f 90       	pop	r0
     c72:	0f 90       	pop	r0
     c74:	df 91       	pop	r29
     c76:	cf 91       	pop	r28
     c78:	1f 91       	pop	r17
     c7a:	ff 90       	pop	r15
     c7c:	ef 90       	pop	r14
     c7e:	08 95       	ret

00000c80 <sd_cmd1>:
     c80:	ef 92       	push	r14
     c82:	ff 92       	push	r15
     c84:	1f 93       	push	r17
     c86:	cf 93       	push	r28
     c88:	df 93       	push	r29
     c8a:	cd b7       	in	r28, 0x3d	; 61
     c8c:	de b7       	in	r29, 0x3e	; 62
     c8e:	25 97       	sbiw	r28, 0x05	; 5
     c90:	cd bf       	out	0x3d, r28	; 61
     c92:	de bf       	out	0x3e, r29	; 62
     c94:	7c 01       	movw	r14, r24
     c96:	15 e0       	ldi	r17, 0x05	; 5
     c98:	84 e2       	ldi	r24, 0x24	; 36
     c9a:	98 e2       	ldi	r25, 0x28	; 40
     c9c:	0e 94 08 08 	call	0x1010	; 0x1010 <sd_send_cmd>
     ca0:	65 e0       	ldi	r22, 0x05	; 5
     ca2:	70 e0       	ldi	r23, 0x00	; 0
     ca4:	ce 01       	movw	r24, r28
     ca6:	01 96       	adiw	r24, 0x01	; 1
     ca8:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <sd_receive_bytes>
     cac:	65 e0       	ldi	r22, 0x05	; 5
     cae:	ce 01       	movw	r24, r28
     cb0:	01 96       	adiw	r24, 0x01	; 1
     cb2:	0e 94 06 09 	call	0x120c	; 0x120c <sd_assemble_r1_rsp>
     cb6:	88 23       	and	r24, r24
     cb8:	29 f0       	breq	.+10     	; 0xcc4 <sd_cmd1+0x44>
     cba:	11 50       	subi	r17, 0x01	; 1
     cbc:	69 f7       	brne	.-38     	; 0xc98 <sd_cmd1+0x18>
     cbe:	91 e0       	ldi	r25, 0x01	; 1
     cc0:	f7 01       	movw	r30, r14
     cc2:	90 83       	st	Z, r25
     cc4:	25 96       	adiw	r28, 0x05	; 5
     cc6:	cd bf       	out	0x3d, r28	; 61
     cc8:	de bf       	out	0x3e, r29	; 62
     cca:	df 91       	pop	r29
     ccc:	cf 91       	pop	r28
     cce:	1f 91       	pop	r17
     cd0:	ff 90       	pop	r15
     cd2:	ef 90       	pop	r14
     cd4:	08 95       	ret

00000cd6 <sd_cmd8>:
     cd6:	ef 92       	push	r14
     cd8:	ff 92       	push	r15
     cda:	1f 93       	push	r17
     cdc:	cf 93       	push	r28
     cde:	df 93       	push	r29
     ce0:	cd b7       	in	r28, 0x3d	; 61
     ce2:	de b7       	in	r29, 0x3e	; 62
     ce4:	2a 97       	sbiw	r28, 0x0a	; 10
     ce6:	cd bf       	out	0x3d, r28	; 61
     ce8:	de bf       	out	0x3e, r29	; 62
     cea:	7c 01       	movw	r14, r24
     cec:	15 e0       	ldi	r17, 0x05	; 5
     cee:	8e e1       	ldi	r24, 0x1E	; 30
     cf0:	98 e2       	ldi	r25, 0x28	; 40
     cf2:	0e 94 08 08 	call	0x1010	; 0x1010 <sd_send_cmd>
     cf6:	6a e0       	ldi	r22, 0x0A	; 10
     cf8:	70 e0       	ldi	r23, 0x00	; 0
     cfa:	ce 01       	movw	r24, r28
     cfc:	01 96       	adiw	r24, 0x01	; 1
     cfe:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <sd_receive_bytes>
     d02:	6a e0       	ldi	r22, 0x0A	; 10
     d04:	ce 01       	movw	r24, r28
     d06:	01 96       	adiw	r24, 0x01	; 1
     d08:	0e 94 34 09 	call	0x1268	; 0x1268 <sd_assemble_r7_rsp>
     d0c:	fc 01       	movw	r30, r24
     d0e:	90 81       	ld	r25, Z
     d10:	91 30       	cpi	r25, 0x01	; 1
     d12:	21 f4       	brne	.+8      	; 0xd1c <sd_cmd8+0x46>
     d14:	82 e0       	ldi	r24, 0x02	; 2
     d16:	80 93 5f 28 	sts	0x285F, r24	; 0x80285f <sd_version>
     d1a:	0b c0       	rjmp	.+22     	; 0xd32 <sd_cmd8+0x5c>
     d1c:	95 30       	cpi	r25, 0x05	; 5
     d1e:	21 f4       	brne	.+8      	; 0xd28 <sd_cmd8+0x52>
     d20:	81 e0       	ldi	r24, 0x01	; 1
     d22:	80 93 5f 28 	sts	0x285F, r24	; 0x80285f <sd_version>
     d26:	05 c0       	rjmp	.+10     	; 0xd32 <sd_cmd8+0x5c>
     d28:	11 50       	subi	r17, 0x01	; 1
     d2a:	09 f7       	brne	.-62     	; 0xcee <sd_cmd8+0x18>
     d2c:	88 e0       	ldi	r24, 0x08	; 8
     d2e:	d7 01       	movw	r26, r14
     d30:	8c 93       	st	X, r24
     d32:	cf 01       	movw	r24, r30
     d34:	2a 96       	adiw	r28, 0x0a	; 10
     d36:	cd bf       	out	0x3d, r28	; 61
     d38:	de bf       	out	0x3e, r29	; 62
     d3a:	df 91       	pop	r29
     d3c:	cf 91       	pop	r28
     d3e:	1f 91       	pop	r17
     d40:	ff 90       	pop	r15
     d42:	ef 90       	pop	r14
     d44:	08 95       	ret

00000d46 <sd_cmd16>:
     d46:	ef 92       	push	r14
     d48:	ff 92       	push	r15
     d4a:	1f 93       	push	r17
     d4c:	cf 93       	push	r28
     d4e:	df 93       	push	r29
     d50:	cd b7       	in	r28, 0x3d	; 61
     d52:	de b7       	in	r29, 0x3e	; 62
     d54:	2f 97       	sbiw	r28, 0x0f	; 15
     d56:	cd bf       	out	0x3d, r28	; 61
     d58:	de bf       	out	0x3e, r29	; 62
     d5a:	7a 01       	movw	r14, r20
     d5c:	ae 01       	movw	r20, r28
     d5e:	4a 5f       	subi	r20, 0xFA	; 250
     d60:	5f 4f       	sbci	r21, 0xFF	; 255
     d62:	0e 94 96 09 	call	0x132c	; 0x132c <split_32bit_val>
     d66:	80 e5       	ldi	r24, 0x50	; 80
     d68:	8a 87       	std	Y+10, r24	; 0x0a
     d6a:	8e 81       	ldd	r24, Y+6	; 0x06
     d6c:	8b 87       	std	Y+11, r24	; 0x0b
     d6e:	8f 81       	ldd	r24, Y+7	; 0x07
     d70:	8c 87       	std	Y+12, r24	; 0x0c
     d72:	88 85       	ldd	r24, Y+8	; 0x08
     d74:	8d 87       	std	Y+13, r24	; 0x0d
     d76:	89 85       	ldd	r24, Y+9	; 0x09
     d78:	8e 87       	std	Y+14, r24	; 0x0e
     d7a:	1f 86       	std	Y+15, r1	; 0x0f
     d7c:	15 e0       	ldi	r17, 0x05	; 5
     d7e:	ce 01       	movw	r24, r28
     d80:	0a 96       	adiw	r24, 0x0a	; 10
     d82:	0e 94 08 08 	call	0x1010	; 0x1010 <sd_send_cmd>
     d86:	65 e0       	ldi	r22, 0x05	; 5
     d88:	70 e0       	ldi	r23, 0x00	; 0
     d8a:	ce 01       	movw	r24, r28
     d8c:	01 96       	adiw	r24, 0x01	; 1
     d8e:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <sd_receive_bytes>
     d92:	65 e0       	ldi	r22, 0x05	; 5
     d94:	ce 01       	movw	r24, r28
     d96:	01 96       	adiw	r24, 0x01	; 1
     d98:	0e 94 06 09 	call	0x120c	; 0x120c <sd_assemble_r1_rsp>
     d9c:	88 23       	and	r24, r24
     d9e:	29 f0       	breq	.+10     	; 0xdaa <sd_cmd16+0x64>
     da0:	11 50       	subi	r17, 0x01	; 1
     da2:	69 f7       	brne	.-38     	; 0xd7e <sd_cmd16+0x38>
     da4:	90 e1       	ldi	r25, 0x10	; 16
     da6:	f7 01       	movw	r30, r14
     da8:	90 83       	st	Z, r25
     daa:	2f 96       	adiw	r28, 0x0f	; 15
     dac:	cd bf       	out	0x3d, r28	; 61
     dae:	de bf       	out	0x3e, r29	; 62
     db0:	df 91       	pop	r29
     db2:	cf 91       	pop	r28
     db4:	1f 91       	pop	r17
     db6:	ff 90       	pop	r15
     db8:	ef 90       	pop	r14
     dba:	08 95       	ret

00000dbc <sd_cmd17>:
     dbc:	af 92       	push	r10
     dbe:	bf 92       	push	r11
     dc0:	cf 92       	push	r12
     dc2:	df 92       	push	r13
     dc4:	ef 92       	push	r14
     dc6:	ff 92       	push	r15
     dc8:	0f 93       	push	r16
     dca:	1f 93       	push	r17
     dcc:	cf 93       	push	r28
     dce:	df 93       	push	r29
     dd0:	cd b7       	in	r28, 0x3d	; 61
     dd2:	de b7       	in	r29, 0x3e	; 62
     dd4:	2c 97       	sbiw	r28, 0x0c	; 12
     dd6:	cd bf       	out	0x3d, r28	; 61
     dd8:	de bf       	out	0x3e, r29	; 62
     dda:	7a 01       	movw	r14, r20
     ddc:	59 01       	movw	r10, r18
     dde:	68 01       	movw	r12, r16
     de0:	2f ef       	ldi	r18, 0xFF	; 255
     de2:	3f ef       	ldi	r19, 0xFF	; 255
     de4:	29 83       	std	Y+1, r18	; 0x01
     de6:	3a 83       	std	Y+2, r19	; 0x02
     de8:	ae 01       	movw	r20, r28
     dea:	4d 5f       	subi	r20, 0xFD	; 253
     dec:	5f 4f       	sbci	r21, 0xFF	; 255
     dee:	0e 94 96 09 	call	0x132c	; 0x132c <split_32bit_val>
     df2:	81 e5       	ldi	r24, 0x51	; 81
     df4:	8f 83       	std	Y+7, r24	; 0x07
     df6:	8b 81       	ldd	r24, Y+3	; 0x03
     df8:	88 87       	std	Y+8, r24	; 0x08
     dfa:	8c 81       	ldd	r24, Y+4	; 0x04
     dfc:	89 87       	std	Y+9, r24	; 0x09
     dfe:	8d 81       	ldd	r24, Y+5	; 0x05
     e00:	8a 87       	std	Y+10, r24	; 0x0a
     e02:	8e 81       	ldd	r24, Y+6	; 0x06
     e04:	8b 87       	std	Y+11, r24	; 0x0b
     e06:	1c 86       	std	Y+12, r1	; 0x0c
     e08:	84 e6       	ldi	r24, 0x64	; 100
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	0e 94 1b 08 	call	0x1036	; 0x1036 <sd_send_dummy_bytes>
     e10:	ce 01       	movw	r24, r28
     e12:	07 96       	adiw	r24, 0x07	; 7
     e14:	0e 94 08 08 	call	0x1010	; 0x1010 <sd_send_cmd>
     e18:	10 91 5e 28 	lds	r17, 0x285E	; 0x80285e <r1_timeout.1918>
     e1c:	1f 5f       	subi	r17, 0xFF	; 255
     e1e:	10 93 5e 28 	sts	0x285E, r17	; 0x80285e <r1_timeout.1918>
     e22:	0e 94 ed 07 	call	0xfda	; 0xfda <sd_receive_byte>
     e26:	89 83       	std	Y+1, r24	; 0x01
     e28:	89 81       	ldd	r24, Y+1	; 0x01
     e2a:	88 23       	and	r24, r24
     e2c:	21 f0       	breq	.+8      	; 0xe36 <sd_cmd17+0x7a>
     e2e:	1b 30       	cpi	r17, 0x0B	; 11
     e30:	98 f3       	brcs	.-26     	; 0xe18 <sd_cmd17+0x5c>
     e32:	10 e0       	ldi	r17, 0x00	; 0
     e34:	01 c0       	rjmp	.+2      	; 0xe38 <sd_cmd17+0x7c>
     e36:	10 e0       	ldi	r17, 0x00	; 0
     e38:	80 91 5d 28 	lds	r24, 0x285D	; 0x80285d <data_timeout.1922>
     e3c:	8f 5f       	subi	r24, 0xFF	; 255
     e3e:	80 93 5d 28 	sts	0x285D, r24	; 0x80285d <data_timeout.1922>
     e42:	0e 94 ed 07 	call	0xfda	; 0xfda <sd_receive_byte>
     e46:	89 83       	std	Y+1, r24	; 0x01
     e48:	89 81       	ldd	r24, Y+1	; 0x01
     e4a:	8e 3f       	cpi	r24, 0xFE	; 254
     e4c:	79 f4       	brne	.+30     	; 0xe6c <sd_cmd17+0xb0>
     e4e:	b6 01       	movw	r22, r12
     e50:	c7 01       	movw	r24, r14
     e52:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <sd_receive_bytes>
     e56:	0e 94 ed 07 	call	0xfda	; 0xfda <sd_receive_byte>
     e5a:	89 83       	std	Y+1, r24	; 0x01
     e5c:	89 81       	ldd	r24, Y+1	; 0x01
     e5e:	88 23       	and	r24, r24
     e60:	d1 f3       	breq	.-12     	; 0xe56 <sd_cmd17+0x9a>
     e62:	8a e0       	ldi	r24, 0x0A	; 10
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	0e 94 1b 08 	call	0x1036	; 0x1036 <sd_send_dummy_bytes>
     e6a:	17 c0       	rjmp	.+46     	; 0xe9a <sd_cmd17+0xde>
     e6c:	89 81       	ldd	r24, Y+1	; 0x01
     e6e:	8f 3f       	cpi	r24, 0xFF	; 255
     e70:	19 f3       	breq	.-58     	; 0xe38 <sd_cmd17+0x7c>
     e72:	89 81       	ldd	r24, Y+1	; 0x01
     e74:	88 23       	and	r24, r24
     e76:	01 f3       	breq	.-64     	; 0xe38 <sd_cmd17+0x7c>
     e78:	04 c0       	rjmp	.+8      	; 0xe82 <sd_cmd17+0xc6>
     e7a:	81 e1       	ldi	r24, 0x11	; 17
     e7c:	f5 01       	movw	r30, r10
     e7e:	80 83       	st	Z, r24
     e80:	0c c0       	rjmp	.+24     	; 0xe9a <sd_cmd17+0xde>
     e82:	16 30       	cpi	r17, 0x06	; 6
     e84:	d0 f7       	brcc	.-12     	; 0xe7a <sd_cmd17+0xbe>
     e86:	1f 5f       	subi	r17, 0xFF	; 255
     e88:	84 e6       	ldi	r24, 0x64	; 100
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	0e 94 1b 08 	call	0x1036	; 0x1036 <sd_send_dummy_bytes>
     e90:	ce 01       	movw	r24, r28
     e92:	07 96       	adiw	r24, 0x07	; 7
     e94:	0e 94 08 08 	call	0x1010	; 0x1010 <sd_send_cmd>
     e98:	cf cf       	rjmp	.-98     	; 0xe38 <sd_cmd17+0x7c>
     e9a:	2c 96       	adiw	r28, 0x0c	; 12
     e9c:	cd bf       	out	0x3d, r28	; 61
     e9e:	de bf       	out	0x3e, r29	; 62
     ea0:	df 91       	pop	r29
     ea2:	cf 91       	pop	r28
     ea4:	1f 91       	pop	r17
     ea6:	0f 91       	pop	r16
     ea8:	ff 90       	pop	r15
     eaa:	ef 90       	pop	r14
     eac:	df 90       	pop	r13
     eae:	cf 90       	pop	r12
     eb0:	bf 90       	pop	r11
     eb2:	af 90       	pop	r10
     eb4:	08 95       	ret

00000eb6 <sd_cmd55>:
	return response;
}

// Must send this command before ACMD<n> commands
uint8_t sd_cmd55(uint8_t *error)
{
     eb6:	ef 92       	push	r14
     eb8:	ff 92       	push	r15
     eba:	1f 93       	push	r17
     ebc:	cf 93       	push	r28
     ebe:	df 93       	push	r29
     ec0:	cd b7       	in	r28, 0x3d	; 61
     ec2:	de b7       	in	r29, 0x3e	; 62
     ec4:	25 97       	sbiw	r28, 0x05	; 5
     ec6:	cd bf       	out	0x3d, r28	; 61
     ec8:	de bf       	out	0x3e, r29	; 62
     eca:	7c 01       	movw	r14, r24
     ecc:	15 e0       	ldi	r17, 0x05	; 5
	uint8_t iter_cnt = 0;
	
	while (!success)
	{
		iter_cnt++;
		sd_send_cmd(cmd55);
     ece:	88 e1       	ldi	r24, 0x18	; 24
     ed0:	98 e2       	ldi	r25, 0x28	; 40
     ed2:	0e 94 08 08 	call	0x1010	; 0x1010 <sd_send_cmd>
		sd_receive_bytes(return_data, n_bytes);
     ed6:	65 e0       	ldi	r22, 0x05	; 5
     ed8:	70 e0       	ldi	r23, 0x00	; 0
     eda:	ce 01       	movw	r24, r28
     edc:	01 96       	adiw	r24, 0x01	; 1
     ede:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <sd_receive_bytes>
		response = sd_assemble_r1_rsp(return_data, n_bytes);
     ee2:	65 e0       	ldi	r22, 0x05	; 5
     ee4:	ce 01       	movw	r24, r28
     ee6:	01 96       	adiw	r24, 0x01	; 1
     ee8:	0e 94 06 09 	call	0x120c	; 0x120c <sd_assemble_r1_rsp>
		if (response == 0x01)
     eec:	81 30       	cpi	r24, 0x01	; 1
     eee:	29 f0       	breq	.+10     	; 0xefa <sd_cmd55+0x44>
     ef0:	11 50       	subi	r17, 0x01	; 1
		{
			success = 1;
		}
		else if (iter_cnt == 5)	// For error handling purposes
     ef2:	69 f7       	brne	.-38     	; 0xece <sd_cmd55+0x18>
		{
			error[0] = 55;
     ef4:	97 e3       	ldi	r25, 0x37	; 55
     ef6:	f7 01       	movw	r30, r14
     ef8:	90 83       	st	Z, r25
			return response;
		}
	}
	return response;
}
     efa:	25 96       	adiw	r28, 0x05	; 5
     efc:	cd bf       	out	0x3d, r28	; 61
     efe:	de bf       	out	0x3e, r29	; 62
     f00:	df 91       	pop	r29
     f02:	cf 91       	pop	r28
     f04:	1f 91       	pop	r17
     f06:	ff 90       	pop	r15
     f08:	ef 90       	pop	r14
     f0a:	08 95       	ret

00000f0c <sd_acmd41>:
	}
}

// Alternative initiate initialisation process (Only for SDC)
uint8_t sd_acmd41(uint8_t *error)
{
     f0c:	ef 92       	push	r14
     f0e:	ff 92       	push	r15
     f10:	0f 93       	push	r16
     f12:	1f 93       	push	r17
     f14:	cf 93       	push	r28
     f16:	df 93       	push	r29
     f18:	cd b7       	in	r28, 0x3d	; 61
     f1a:	de b7       	in	r29, 0x3e	; 62
     f1c:	25 97       	sbiw	r28, 0x05	; 5
     f1e:	cd bf       	out	0x3d, r28	; 61
     f20:	de bf       	out	0x3e, r29	; 62
     f22:	7c 01       	movw	r14, r24
	uint8_t n_bytes = 5;
	uint8_t return_data[n_bytes];
	uint8_t response = 0xFF;
	uint16_t iter_cnt = 0;
	
	sd_cmd55(error);	// CMD55 needs to be sent before sending ACMD41
     f24:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <sd_cmd55>
{
	uint8_t success = 0;
	uint8_t n_bytes = 5;
	uint8_t return_data[n_bytes];
	uint8_t response = 0xFF;
	uint16_t iter_cnt = 0;
     f28:	00 e0       	ldi	r16, 0x00	; 0
     f2a:	10 e0       	ldi	r17, 0x00	; 0
	
	sd_cmd55(error);	// CMD55 needs to be sent before sending ACMD41
	while (!success)
	{
		iter_cnt++;
     f2c:	0f 5f       	subi	r16, 0xFF	; 255
     f2e:	1f 4f       	sbci	r17, 0xFF	; 255
		sd_send_cmd(acmd41);
     f30:	8c e0       	ldi	r24, 0x0C	; 12
     f32:	98 e2       	ldi	r25, 0x28	; 40
     f34:	0e 94 08 08 	call	0x1010	; 0x1010 <sd_send_cmd>
		sd_receive_bytes(return_data, n_bytes);
     f38:	65 e0       	ldi	r22, 0x05	; 5
     f3a:	70 e0       	ldi	r23, 0x00	; 0
     f3c:	ce 01       	movw	r24, r28
     f3e:	01 96       	adiw	r24, 0x01	; 1
     f40:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <sd_receive_bytes>
		response = sd_assemble_r1_rsp(return_data, n_bytes);
     f44:	65 e0       	ldi	r22, 0x05	; 5
     f46:	ce 01       	movw	r24, r28
     f48:	01 96       	adiw	r24, 0x01	; 1
     f4a:	0e 94 06 09 	call	0x120c	; 0x120c <sd_assemble_r1_rsp>

		if (response == 0x00)
     f4e:	88 23       	and	r24, r24
     f50:	49 f0       	breq	.+18     	; 0xf64 <sd_acmd41+0x58>
		{
			success = 1;
		}
		if (iter_cnt == 800)	// For error handling purposes
     f52:	00 32       	cpi	r16, 0x20	; 32
     f54:	83 e0       	ldi	r24, 0x03	; 3
     f56:	18 07       	cpc	r17, r24
     f58:	49 f7       	brne	.-46     	; 0xf2c <sd_acmd41+0x20>
		{
			error[0] = 41;
     f5a:	89 e2       	ldi	r24, 0x29	; 41
     f5c:	f7 01       	movw	r30, r14
     f5e:	80 83       	st	Z, r24
			return 0xFF;
     f60:	8f ef       	ldi	r24, 0xFF	; 255
     f62:	04 c0       	rjmp	.+8      	; 0xf6c <sd_acmd41+0x60>

		if (response == 0x00)
		{
			success = 1;
		}
		if (iter_cnt == 800)	// For error handling purposes
     f64:	00 32       	cpi	r16, 0x20	; 32
     f66:	13 40       	sbci	r17, 0x03	; 3
     f68:	c1 f3       	breq	.-16     	; 0xf5a <sd_acmd41+0x4e>
	while (!success)
	{
		iter_cnt++;
		sd_send_cmd(acmd41);
		sd_receive_bytes(return_data, n_bytes);
		response = sd_assemble_r1_rsp(return_data, n_bytes);
     f6a:	80 e0       	ldi	r24, 0x00	; 0
			error[0] = 41;
			return 0xFF;
		}
	}
	return response;
}
     f6c:	25 96       	adiw	r28, 0x05	; 5
     f6e:	cd bf       	out	0x3d, r28	; 61
     f70:	de bf       	out	0x3e, r29	; 62
     f72:	df 91       	pop	r29
     f74:	cf 91       	pop	r28
     f76:	1f 91       	pop	r17
     f78:	0f 91       	pop	r16
     f7a:	ff 90       	pop	r15
     f7c:	ef 90       	pop	r14
     f7e:	08 95       	ret

00000f80 <sd_cmd58>:
	return response;
}

// Read Operation Conditions Register (OCR)
uint8_t * sd_cmd58(uint8_t *error)
{
     f80:	ef 92       	push	r14
     f82:	ff 92       	push	r15
     f84:	1f 93       	push	r17
     f86:	cf 93       	push	r28
     f88:	df 93       	push	r29
     f8a:	cd b7       	in	r28, 0x3d	; 61
     f8c:	de b7       	in	r29, 0x3e	; 62
     f8e:	2a 97       	sbiw	r28, 0x0a	; 10
     f90:	cd bf       	out	0x3d, r28	; 61
     f92:	de bf       	out	0x3e, r29	; 62
     f94:	7c 01       	movw	r14, r24
     f96:	15 e0       	ldi	r17, 0x05	; 5
	uint8_t iter_cnt = 0;
	
	while (!success)
	{
		iter_cnt++;
		sd_send_cmd(cmd58);
     f98:	82 e1       	ldi	r24, 0x12	; 18
     f9a:	98 e2       	ldi	r25, 0x28	; 40
     f9c:	0e 94 08 08 	call	0x1010	; 0x1010 <sd_send_cmd>
		sd_receive_bytes(return_data, n_bytes);
     fa0:	6a e0       	ldi	r22, 0x0A	; 10
     fa2:	70 e0       	ldi	r23, 0x00	; 0
     fa4:	ce 01       	movw	r24, r28
     fa6:	01 96       	adiw	r24, 0x01	; 1
     fa8:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <sd_receive_bytes>
		response = sd_assemble_r3_rsp(return_data, n_bytes);
     fac:	6a e0       	ldi	r22, 0x0A	; 10
     fae:	ce 01       	movw	r24, r28
     fb0:	01 96       	adiw	r24, 0x01	; 1
     fb2:	0e 94 76 09 	call	0x12ec	; 0x12ec <sd_assemble_r3_rsp>
		if (response[0] == 0x00)
     fb6:	fc 01       	movw	r30, r24
     fb8:	20 81       	ld	r18, Z
     fba:	22 23       	and	r18, r18
     fbc:	29 f0       	breq	.+10     	; 0xfc8 <sd_cmd58+0x48>
     fbe:	11 50       	subi	r17, 0x01	; 1
		{
			success = 1;
		}
		else if (iter_cnt == 5)	// For error handling purposes
     fc0:	59 f7       	brne	.-42     	; 0xf98 <sd_cmd58+0x18>
		{
			error[0] = 58;
     fc2:	2a e3       	ldi	r18, 0x3A	; 58
     fc4:	f7 01       	movw	r30, r14
     fc6:	20 83       	st	Z, r18
			return response;
		}
	}
	
	return response;
}
     fc8:	2a 96       	adiw	r28, 0x0a	; 10
     fca:	cd bf       	out	0x3d, r28	; 61
     fcc:	de bf       	out	0x3e, r29	; 62
     fce:	df 91       	pop	r29
     fd0:	cf 91       	pop	r28
     fd2:	1f 91       	pop	r17
     fd4:	ff 90       	pop	r15
     fd6:	ef 90       	pop	r14
     fd8:	08 95       	ret

00000fda <sd_receive_byte>:
	// Send multiple data bytes to SDC, and discard data received in data exchange
	for (uint16_t i = 0; i < n_bytes; i++)
	{
		SPI_0_exchange_byte(data_array[i]);
	}
}
     fda:	8f ef       	ldi	r24, 0xFF	; 255
     fdc:	0e 94 03 0c 	call	0x1806	; 0x1806 <SPI_0_exchange_byte>
     fe0:	08 95       	ret

00000fe2 <sd_receive_bytes>:
     fe2:	0f 93       	push	r16
     fe4:	1f 93       	push	r17
     fe6:	cf 93       	push	r28
     fe8:	df 93       	push	r29
     fea:	61 15       	cp	r22, r1
     fec:	71 05       	cpc	r23, r1
     fee:	59 f0       	breq	.+22     	; 0x1006 <sd_receive_bytes+0x24>
     ff0:	8c 01       	movw	r16, r24
     ff2:	ec 01       	movw	r28, r24
     ff4:	06 0f       	add	r16, r22
     ff6:	17 1f       	adc	r17, r23
     ff8:	8f ef       	ldi	r24, 0xFF	; 255
     ffa:	0e 94 03 0c 	call	0x1806	; 0x1806 <SPI_0_exchange_byte>
     ffe:	89 93       	st	Y+, r24
    1000:	c0 17       	cp	r28, r16
    1002:	d1 07       	cpc	r29, r17
    1004:	c9 f7       	brne	.-14     	; 0xff8 <sd_receive_bytes+0x16>
    1006:	df 91       	pop	r29
    1008:	cf 91       	pop	r28
    100a:	1f 91       	pop	r17
    100c:	0f 91       	pop	r16
    100e:	08 95       	ret

00001010 <sd_send_cmd>:

// SDCs have a fixed command size of 6 bytes
void sd_send_cmd(uint8_t *cmd)
{
    1010:	0f 93       	push	r16
    1012:	1f 93       	push	r17
    1014:	cf 93       	push	r28
    1016:	df 93       	push	r29
    1018:	ec 01       	movw	r28, r24
    101a:	8c 01       	movw	r16, r24
    101c:	0a 5f       	subi	r16, 0xFA	; 250
    101e:	1f 4f       	sbci	r17, 0xFF	; 255
	for (uint8_t i = 0; i < CMD_SIZE; i++)
	{
		SPI_0_exchange_byte(cmd[i]);
    1020:	89 91       	ld	r24, Y+
    1022:	0e 94 03 0c 	call	0x1806	; 0x1806 <SPI_0_exchange_byte>
}

// SDCs have a fixed command size of 6 bytes
void sd_send_cmd(uint8_t *cmd)
{
	for (uint8_t i = 0; i < CMD_SIZE; i++)
    1026:	c0 17       	cp	r28, r16
    1028:	d1 07       	cpc	r29, r17
    102a:	d1 f7       	brne	.-12     	; 0x1020 <sd_send_cmd+0x10>
	{
		SPI_0_exchange_byte(cmd[i]);
	}
}
    102c:	df 91       	pop	r29
    102e:	cf 91       	pop	r28
    1030:	1f 91       	pop	r17
    1032:	0f 91       	pop	r16
    1034:	08 95       	ret

00001036 <sd_send_dummy_bytes>:

void sd_send_dummy_bytes(uint16_t n_bytes)
{
    1036:	0f 93       	push	r16
    1038:	1f 93       	push	r17
    103a:	cf 93       	push	r28
    103c:	df 93       	push	r29
	for (uint16_t i = 0; i < n_bytes; i++)
    103e:	00 97       	sbiw	r24, 0x00	; 0
    1040:	51 f0       	breq	.+20     	; 0x1056 <sd_send_dummy_bytes+0x20>
    1042:	8c 01       	movw	r16, r24
    1044:	c0 e0       	ldi	r28, 0x00	; 0
    1046:	d0 e0       	ldi	r29, 0x00	; 0
	{
		SPI_0_exchange_byte(DUMMY_BYTE);
    1048:	8f ef       	ldi	r24, 0xFF	; 255
    104a:	0e 94 03 0c 	call	0x1806	; 0x1806 <SPI_0_exchange_byte>
	}
}

void sd_send_dummy_bytes(uint16_t n_bytes)
{
	for (uint16_t i = 0; i < n_bytes; i++)
    104e:	21 96       	adiw	r28, 0x01	; 1
    1050:	0c 17       	cp	r16, r28
    1052:	1d 07       	cpc	r17, r29
    1054:	c9 f7       	brne	.-14     	; 0x1048 <sd_send_dummy_bytes+0x12>
	{
		SPI_0_exchange_byte(DUMMY_BYTE);
	}
}
    1056:	df 91       	pop	r29
    1058:	cf 91       	pop	r28
    105a:	1f 91       	pop	r17
    105c:	0f 91       	pop	r16
    105e:	08 95       	ret

00001060 <sd_cs_enable>:

void sd_cs_enable()
{
	PORTC.DIR |= (1 << 6);	// SD-module SPI chip select (CS) pin as output
    1060:	e0 e4       	ldi	r30, 0x40	; 64
    1062:	f4 e0       	ldi	r31, 0x04	; 4
    1064:	80 81       	ld	r24, Z
    1066:	80 64       	ori	r24, 0x40	; 64
    1068:	80 83       	st	Z, r24
	PORTC.OUT &= !(1 << 6);	// Pull CS pin low to enable chip	
    106a:	84 81       	ldd	r24, Z+4	; 0x04
    106c:	14 82       	std	Z+4, r1	; 0x04
	cs_enabled = 1;	// Variable to keep track of enable/disable status
    106e:	81 e0       	ldi	r24, 0x01	; 1
    1070:	80 93 60 28 	sts	0x2860, r24	; 0x802860 <cs_enabled>
    1074:	08 95       	ret

00001076 <sd_cs_disable>:
}

void sd_cs_disable()
{
	PORTC.DIR |= (1 << 6);	// SD-module SPI chip select pin as output
    1076:	e0 e4       	ldi	r30, 0x40	; 64
    1078:	f4 e0       	ldi	r31, 0x04	; 4
    107a:	80 81       	ld	r24, Z
    107c:	80 64       	ori	r24, 0x40	; 64
    107e:	80 83       	st	Z, r24
	PORTC.OUT |= (1 << 6);	// Pull CS pin high to disable chip
    1080:	84 81       	ldd	r24, Z+4	; 0x04
    1082:	80 64       	ori	r24, 0x40	; 64
    1084:	84 83       	std	Z+4, r24	; 0x04
	cs_enabled = 0;	// Variable to keep track of enable/disable status
    1086:	10 92 60 28 	sts	0x2860, r1	; 0x802860 <cs_enabled>
    108a:	08 95       	ret

0000108c <sd_read_single_block>:
	
	return error_tracker;
}

uint8_t sd_read_single_block(uint16_t block_number, uint8_t *return_array, uint8_t recursive_count)
{
    108c:	df 92       	push	r13
    108e:	ef 92       	push	r14
    1090:	ff 92       	push	r15
    1092:	0f 93       	push	r16
    1094:	1f 93       	push	r17
    1096:	cf 93       	push	r28
    1098:	df 93       	push	r29
    109a:	ec 01       	movw	r28, r24
    109c:	7b 01       	movw	r14, r22
    109e:	d4 2e       	mov	r13, r20
	error_tracker = 0xFF;
    10a0:	8f ef       	ldi	r24, 0xFF	; 255
    10a2:	80 93 30 28 	sts	0x2830, r24	; 0x802830 <error_tracker>
	
	uint32_t address = block_number*DATA_BLOCK_SIZE;
	
	sd_cs_enable();
    10a6:	0e 94 30 08 	call	0x1060	; 0x1060 <sd_cs_enable>
	sd_cmd17(address, return_array, &error_tracker, 512);
    10aa:	ce 01       	movw	r24, r28
    10ac:	a0 e0       	ldi	r26, 0x00	; 0
    10ae:	b0 e0       	ldi	r27, 0x00	; 0
    10b0:	bc 01       	movw	r22, r24
    10b2:	cd 01       	movw	r24, r26
    10b4:	05 2e       	mov	r0, r21
    10b6:	59 e0       	ldi	r21, 0x09	; 9
    10b8:	66 0f       	add	r22, r22
    10ba:	77 1f       	adc	r23, r23
    10bc:	88 1f       	adc	r24, r24
    10be:	99 1f       	adc	r25, r25
    10c0:	5a 95       	dec	r21
    10c2:	d1 f7       	brne	.-12     	; 0x10b8 <sd_read_single_block+0x2c>
    10c4:	50 2d       	mov	r21, r0
    10c6:	00 e0       	ldi	r16, 0x00	; 0
    10c8:	12 e0       	ldi	r17, 0x02	; 2
    10ca:	20 e3       	ldi	r18, 0x30	; 48
    10cc:	38 e2       	ldi	r19, 0x28	; 40
    10ce:	a7 01       	movw	r20, r14
    10d0:	0e 94 de 06 	call	0xdbc	; 0xdbc <sd_cmd17>

	if (error_tracker != 0xFF)
    10d4:	80 91 30 28 	lds	r24, 0x2830	; 0x802830 <error_tracker>
    10d8:	8f 3f       	cpi	r24, 0xFF	; 255
    10da:	71 f0       	breq	.+28     	; 0x10f8 <sd_read_single_block+0x6c>
	{
		recursive_count++;
    10dc:	41 e0       	ldi	r20, 0x01	; 1
    10de:	4d 0d       	add	r20, r13
		if (recursive_count < 10)
    10e0:	4a 30       	cpi	r20, 0x0A	; 10
    10e2:	40 f4       	brcc	.+16     	; 0x10f4 <sd_read_single_block+0x68>
		{
			error_tracker = 0xFF;
    10e4:	8f ef       	ldi	r24, 0xFF	; 255
    10e6:	80 93 30 28 	sts	0x2830, r24	; 0x802830 <error_tracker>
			sd_read_single_block(block_number, return_array, recursive_count);
    10ea:	b7 01       	movw	r22, r14
    10ec:	ce 01       	movw	r24, r28
    10ee:	0e 94 46 08 	call	0x108c	; 0x108c <sd_read_single_block>
    10f2:	02 c0       	rjmp	.+4      	; 0x10f8 <sd_read_single_block+0x6c>
		}
		else
		{
			sd_display_error_message(error_tracker);
    10f4:	0e 94 79 09 	call	0x12f2	; 0x12f2 <sd_display_error_message>
			//while(1);	// In case of error, suspend execution
		}
	}
	
	sd_cs_disable();
    10f8:	0e 94 3b 08 	call	0x1076	; 0x1076 <sd_cs_disable>
	
	return error_tracker;
}
    10fc:	80 91 30 28 	lds	r24, 0x2830	; 0x802830 <error_tracker>
    1100:	df 91       	pop	r29
    1102:	cf 91       	pop	r28
    1104:	1f 91       	pop	r17
    1106:	0f 91       	pop	r16
    1108:	ff 90       	pop	r15
    110a:	ef 90       	pop	r14
    110c:	df 90       	pop	r13
    110e:	08 95       	ret

00001110 <sd_init>:

uint8_t sd_init(uint8_t recursive_count)
{
    1110:	cf 93       	push	r28
    1112:	c8 2f       	mov	r28, r24
	error_tracker = 0xFF;
    1114:	8f ef       	ldi	r24, 0xFF	; 255
    1116:	80 93 30 28 	sts	0x2830, r24	; 0x802830 <error_tracker>
	
	uint8_t r1_response_acmd41 = 0xFF;
	uint8_t *r7_response_cmd8;
	uint8_t *r3_response_cmd58;
	
	sd_cs_disable();
    111a:	0e 94 3b 08 	call	0x1076	; 0x1076 <sd_cs_disable>
	sd_send_dummy_bytes(70);
    111e:	86 e4       	ldi	r24, 0x46	; 70
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	0e 94 1b 08 	call	0x1036	; 0x1036 <sd_send_dummy_bytes>
	sd_cs_enable();
    1126:	0e 94 30 08 	call	0x1060	; 0x1060 <sd_cs_enable>
	
	sd_cmd0(&error_tracker);
    112a:	80 e3       	ldi	r24, 0x30	; 48
    112c:	98 e2       	ldi	r25, 0x28	; 40
    112e:	0e 94 19 06 	call	0xc32	; 0xc32 <sd_cmd0>
	
	r7_response_cmd8 = sd_cmd8(&error_tracker);
    1132:	80 e3       	ldi	r24, 0x30	; 48
    1134:	98 e2       	ldi	r25, 0x28	; 40
    1136:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <sd_cmd8>
    113a:	fc 01       	movw	r30, r24

	uint16_t temp = (r7_response_cmd8[3] << 8) | (r7_response_cmd8[4]);
	if (temp == 0x1AA)
    113c:	23 81       	ldd	r18, Z+3	; 0x03
    113e:	30 e0       	ldi	r19, 0x00	; 0
    1140:	32 2f       	mov	r19, r18
    1142:	22 27       	eor	r18, r18
    1144:	84 81       	ldd	r24, Z+4	; 0x04
    1146:	28 2b       	or	r18, r24
    1148:	2a 3a       	cpi	r18, 0xAA	; 170
    114a:	31 40       	sbci	r19, 0x01	; 1
    114c:	d1 f4       	brne	.+52     	; 0x1182 <sd_init+0x72>
	{
		r1_response_acmd41 = sd_acmd41(&error_tracker);
    114e:	80 e3       	ldi	r24, 0x30	; 48
    1150:	98 e2       	ldi	r25, 0x28	; 40
    1152:	0e 94 86 07 	call	0xf0c	; 0xf0c <sd_acmd41>
		if (r1_response_acmd41 == 0xFF)
    1156:	8f 3f       	cpi	r24, 0xFF	; 255
    1158:	19 f4       	brne	.+6      	; 0x1160 <sd_init+0x50>
		{
			error_tracker = 41;
    115a:	89 e2       	ldi	r24, 0x29	; 41
    115c:	80 93 30 28 	sts	0x2830, r24	; 0x802830 <error_tracker>
		}
		r3_response_cmd58 = sd_cmd58(&error_tracker);	// Operation Condition Register (OCR)
    1160:	80 e3       	ldi	r24, 0x30	; 48
    1162:	98 e2       	ldi	r25, 0x28	; 40
    1164:	0e 94 c0 07 	call	0xf80	; 0xf80 <sd_cmd58>
		if ((r3_response_cmd58[4] & 0b10) == 0) // Card Capacity Status bit
    1168:	fc 01       	movw	r30, r24
    116a:	84 81       	ldd	r24, Z+4	; 0x04
    116c:	81 fd       	sbrc	r24, 1
    116e:	2e c0       	rjmp	.+92     	; 0x11cc <sd_init+0xbc>
		{
			sd_cmd16(DATA_BLOCK_SIZE, &error_tracker);	// Set block size to 512 bytes
    1170:	40 e3       	ldi	r20, 0x30	; 48
    1172:	58 e2       	ldi	r21, 0x28	; 40
    1174:	60 e0       	ldi	r22, 0x00	; 0
    1176:	72 e0       	ldi	r23, 0x02	; 2
    1178:	80 e0       	ldi	r24, 0x00	; 0
    117a:	90 e0       	ldi	r25, 0x00	; 0
    117c:	0e 94 a3 06 	call	0xd46	; 0xd46 <sd_cmd16>
    1180:	25 c0       	rjmp	.+74     	; 0x11cc <sd_init+0xbc>
		}
	}
	else if ((r7_response_cmd8[0] == 0x05) | (r7_response_cmd8[0] == 0xFF))
    1182:	90 81       	ld	r25, Z
    1184:	81 e0       	ldi	r24, 0x01	; 1
    1186:	95 30       	cpi	r25, 0x05	; 5
    1188:	09 f0       	breq	.+2      	; 0x118c <sd_init+0x7c>
    118a:	80 e0       	ldi	r24, 0x00	; 0
    118c:	81 11       	cpse	r24, r1
    118e:	06 c0       	rjmp	.+12     	; 0x119c <sd_init+0x8c>
    1190:	81 e0       	ldi	r24, 0x01	; 1
    1192:	9f 3f       	cpi	r25, 0xFF	; 255
    1194:	09 f0       	breq	.+2      	; 0x1198 <sd_init+0x88>
    1196:	80 e0       	ldi	r24, 0x00	; 0
    1198:	88 23       	and	r24, r24
    119a:	a9 f0       	breq	.+42     	; 0x11c6 <sd_init+0xb6>
	{
		r1_response_acmd41 = sd_acmd41(&error_tracker);
    119c:	80 e3       	ldi	r24, 0x30	; 48
    119e:	98 e2       	ldi	r25, 0x28	; 40
    11a0:	0e 94 86 07 	call	0xf0c	; 0xf0c <sd_acmd41>
		if (r1_response_acmd41 == 0xFF)
    11a4:	8f 3f       	cpi	r24, 0xFF	; 255
    11a6:	31 f4       	brne	.+12     	; 0x11b4 <sd_init+0xa4>
		{
			error_tracker = 0xFF;	// Reset error report
    11a8:	80 93 30 28 	sts	0x2830, r24	; 0x802830 <error_tracker>
			sd_cmd1(&error_tracker);
    11ac:	80 e3       	ldi	r24, 0x30	; 48
    11ae:	98 e2       	ldi	r25, 0x28	; 40
    11b0:	0e 94 40 06 	call	0xc80	; 0xc80 <sd_cmd1>
		}
		sd_cmd16(DATA_BLOCK_SIZE, &error_tracker);	// Set block size to 512 bytes
    11b4:	40 e3       	ldi	r20, 0x30	; 48
    11b6:	58 e2       	ldi	r21, 0x28	; 40
    11b8:	60 e0       	ldi	r22, 0x00	; 0
    11ba:	72 e0       	ldi	r23, 0x02	; 2
    11bc:	80 e0       	ldi	r24, 0x00	; 0
    11be:	90 e0       	ldi	r25, 0x00	; 0
    11c0:	0e 94 a3 06 	call	0xd46	; 0xd46 <sd_cmd16>
    11c4:	03 c0       	rjmp	.+6      	; 0x11cc <sd_init+0xbc>
	}
	else
	{
		error_tracker = 8;
    11c6:	88 e0       	ldi	r24, 0x08	; 8
    11c8:	80 93 30 28 	sts	0x2830, r24	; 0x802830 <error_tracker>
	}
	
	sd_cs_disable();
    11cc:	0e 94 3b 08 	call	0x1076	; 0x1076 <sd_cs_disable>
	
	if (error_tracker != 0xFF)
    11d0:	90 91 30 28 	lds	r25, 0x2830	; 0x802830 <error_tracker>
    11d4:	9f 3f       	cpi	r25, 0xFF	; 255
    11d6:	71 f0       	breq	.+28     	; 0x11f4 <sd_init+0xe4>
	{
		recursive_count++;
    11d8:	81 e0       	ldi	r24, 0x01	; 1
    11da:	8c 0f       	add	r24, r28
		if (recursive_count < 5)
    11dc:	85 30       	cpi	r24, 0x05	; 5
    11de:	30 f4       	brcc	.+12     	; 0x11ec <sd_init+0xdc>
		{
			error_tracker = 0xFF;
    11e0:	9f ef       	ldi	r25, 0xFF	; 255
    11e2:	90 93 30 28 	sts	0x2830, r25	; 0x802830 <error_tracker>
			sd_init(recursive_count);	
    11e6:	0e 94 88 08 	call	0x1110	; 0x1110 <sd_init>
    11ea:	04 c0       	rjmp	.+8      	; 0x11f4 <sd_init+0xe4>
		}
		else
		{
			sd_display_error_message(error_tracker);
    11ec:	89 2f       	mov	r24, r25
    11ee:	0e 94 79 09 	call	0x12f2	; 0x12f2 <sd_display_error_message>
    11f2:	ff cf       	rjmp	.-2      	; 0x11f2 <sd_init+0xe2>
			while(1);	// In case of error, suspend execution
		}
	}
	
	SPI0.CTRLA = SPI0.CTRLA & ~(0x06);	// Setting SPI CLK speed to F_CPU/4
    11f4:	e0 ec       	ldi	r30, 0xC0	; 192
    11f6:	f8 e0       	ldi	r31, 0x08	; 8
    11f8:	80 81       	ld	r24, Z
    11fa:	89 7f       	andi	r24, 0xF9	; 249
    11fc:	80 83       	st	Z, r24
	SPI0.CTRLA |= (1 << 4);		// Enable CLK2X flag, doubling the SPI clock speed	
    11fe:	80 81       	ld	r24, Z
    1200:	80 61       	ori	r24, 0x10	; 16
    1202:	80 83       	st	Z, r24

	
	return error_tracker;	// error == 0xFF implies no error. error == 55 implies error while issuing CMD55
    1204:	80 91 30 28 	lds	r24, 0x2830	; 0x802830 <error_tracker>
    1208:	cf 91       	pop	r28
    120a:	08 95       	ret

0000120c <sd_assemble_r1_rsp>:

#include <stdint.h>
#include <stdio.h>

uint8_t sd_assemble_r1_rsp(uint8_t *sd_return_data, uint8_t array_size)	// The R1 response might begin in the middle of a byte, and must therefore be located and extracted
{
    120c:	dc 01       	movw	r26, r24
	uint8_t start_val = 0xFF;
	uint8_t shift_counter = 0;

	for (uint8_t i = 0; i < array_size; i++)
    120e:	66 23       	and	r22, r22
    1210:	49 f1       	breq	.+82     	; 0x1264 <sd_assemble_r1_rsp+0x58>
    1212:	fc 01       	movw	r30, r24
    1214:	20 e0       	ldi	r18, 0x00	; 0
    1216:	30 e0       	ldi	r19, 0x00	; 0
	{
		if ((sd_return_data[i] & 0xFF) != 0xFF)	// If byte contains bit-values other than 1
    1218:	a9 01       	movw	r20, r18
    121a:	91 91       	ld	r25, Z+
    121c:	9f 3f       	cpi	r25, 0xFF	; 255
    121e:	e1 f0       	breq	.+56     	; 0x1258 <sd_assemble_r1_rsp+0x4c>
		{
			start_val = sd_return_data[i];
		}
		if (start_val != 0xFF)
		{
			while ((start_val & 0b10000000) != 0x00) // All responses start with a zero. This loop locates that starting point.
    1220:	99 23       	and	r25, r25
    1222:	34 f4       	brge	.+12     	; 0x1230 <sd_assemble_r1_rsp+0x24>
    1224:	20 e0       	ldi	r18, 0x00	; 0
			{
				start_val = (start_val << 1);
    1226:	99 0f       	add	r25, r25
				shift_counter++;
    1228:	2f 5f       	subi	r18, 0xFF	; 255
		{
			start_val = sd_return_data[i];
		}
		if (start_val != 0xFF)
		{
			while ((start_val & 0b10000000) != 0x00) // All responses start with a zero. This loop locates that starting point.
    122a:	99 23       	and	r25, r25
    122c:	e4 f3       	brlt	.-8      	; 0x1226 <sd_assemble_r1_rsp+0x1a>
    122e:	01 c0       	rjmp	.+2      	; 0x1232 <sd_assemble_r1_rsp+0x26>
    1230:	20 e0       	ldi	r18, 0x00	; 0
			{
				start_val = (start_val << 1);
				shift_counter++;
			}
			uint8_t rsp_high_byte = start_val;
			uint8_t rsp_low_byte = (sd_return_data[i+1] >> (8-shift_counter));
    1232:	fd 01       	movw	r30, r26
    1234:	e4 0f       	add	r30, r20
    1236:	f5 1f       	adc	r31, r21
			return (rsp_high_byte | rsp_low_byte);
    1238:	41 81       	ldd	r20, Z+1	; 0x01
    123a:	50 e0       	ldi	r21, 0x00	; 0
    123c:	68 e0       	ldi	r22, 0x08	; 8
    123e:	70 e0       	ldi	r23, 0x00	; 0
    1240:	fb 01       	movw	r30, r22
    1242:	e2 1b       	sub	r30, r18
    1244:	f1 09       	sbc	r31, r1
    1246:	ba 01       	movw	r22, r20
    1248:	02 c0       	rjmp	.+4      	; 0x124e <sd_assemble_r1_rsp+0x42>
    124a:	75 95       	asr	r23
    124c:	67 95       	ror	r22
    124e:	ea 95       	dec	r30
    1250:	e2 f7       	brpl	.-8      	; 0x124a <sd_assemble_r1_rsp+0x3e>
    1252:	89 2f       	mov	r24, r25
    1254:	86 2b       	or	r24, r22
    1256:	08 95       	ret
    1258:	2f 5f       	subi	r18, 0xFF	; 255
    125a:	3f 4f       	sbci	r19, 0xFF	; 255
uint8_t sd_assemble_r1_rsp(uint8_t *sd_return_data, uint8_t array_size)	// The R1 response might begin in the middle of a byte, and must therefore be located and extracted
{
	uint8_t start_val = 0xFF;
	uint8_t shift_counter = 0;

	for (uint8_t i = 0; i < array_size; i++)
    125c:	26 17       	cp	r18, r22
    125e:	e0 f2       	brcs	.-72     	; 0x1218 <sd_assemble_r1_rsp+0xc>
			uint8_t rsp_high_byte = start_val;
			uint8_t rsp_low_byte = (sd_return_data[i+1] >> (8-shift_counter));
			return (rsp_high_byte | rsp_low_byte);
		}
	}
	return 0xFF;
    1260:	8f ef       	ldi	r24, 0xFF	; 255
    1262:	08 95       	ret
    1264:	8f ef       	ldi	r24, 0xFF	; 255
}
    1266:	08 95       	ret

00001268 <sd_assemble_r7_rsp>:

uint8_t * sd_assemble_r7_rsp(uint8_t *sd_return_data, uint8_t array_size)
{
    1268:	1f 93       	push	r17
    126a:	cf 93       	push	r28
    126c:	df 93       	push	r29
    126e:	ac 01       	movw	r20, r24
	uint8_t start_val = 0xFF;
	uint8_t shift_counter = 0;
	static uint8_t r7_response[5] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
	
	for (uint8_t i = 0; i < array_size; i++)
    1270:	66 23       	and	r22, r22
    1272:	b1 f1       	breq	.+108    	; 0x12e0 <sd_assemble_r7_rsp+0x78>
    1274:	fc 01       	movw	r30, r24
    1276:	20 e0       	ldi	r18, 0x00	; 0
	{
		if ((sd_return_data[i] & 0xFF) != 0xFF)	// If byte contains bit-values other than 1
    1278:	91 91       	ld	r25, Z+
    127a:	9f 3f       	cpi	r25, 0xFF	; 255
    127c:	01 f1       	breq	.+64     	; 0x12be <sd_assemble_r7_rsp+0x56>
		{
			start_val = sd_return_data[i];
		}
		if (start_val != 0xFF)
		{
			while ((start_val & 0b10000000) != 0x00) // All responses start with a zero. This loop locates that starting point.
    127e:	99 23       	and	r25, r25
    1280:	14 f5       	brge	.+68     	; 0x12c6 <sd_assemble_r7_rsp+0x5e>
    1282:	10 e0       	ldi	r17, 0x00	; 0
			{
				start_val = (start_val << 1);
    1284:	99 0f       	add	r25, r25
				shift_counter++;
    1286:	1f 5f       	subi	r17, 0xFF	; 255
		{
			start_val = sd_return_data[i];
		}
		if (start_val != 0xFF)
		{
			while ((start_val & 0b10000000) != 0x00) // All responses start with a zero. This loop locates that starting point.
    1288:	99 23       	and	r25, r25
    128a:	e4 f3       	brlt	.-8      	; 0x1284 <sd_assemble_r7_rsp+0x1c>
    128c:	1d c0       	rjmp	.+58     	; 0x12c8 <sd_assemble_r7_rsp+0x60>
				shift_counter++;
			}
			
			for (uint8_t j = 0; j < 5; j++)
			{
				r7_response[j] = (sd_return_data[i+j] << shift_counter) | (sd_return_data[i+j+1] >> (8-shift_counter)); 
    128e:	91 91       	ld	r25, Z+
    1290:	20 81       	ld	r18, Z
    1292:	30 e0       	ldi	r19, 0x00	; 0
    1294:	a9 01       	movw	r20, r18
    1296:	06 2e       	mov	r0, r22
    1298:	02 c0       	rjmp	.+4      	; 0x129e <sd_assemble_r7_rsp+0x36>
    129a:	55 95       	asr	r21
    129c:	47 95       	ror	r20
    129e:	0a 94       	dec	r0
    12a0:	e2 f7       	brpl	.-8      	; 0x129a <sd_assemble_r7_rsp+0x32>
    12a2:	29 2f       	mov	r18, r25
    12a4:	30 e0       	ldi	r19, 0x00	; 0
    12a6:	01 2e       	mov	r0, r17
    12a8:	02 c0       	rjmp	.+4      	; 0x12ae <sd_assemble_r7_rsp+0x46>
    12aa:	22 0f       	add	r18, r18
    12ac:	33 1f       	adc	r19, r19
    12ae:	0a 94       	dec	r0
    12b0:	e2 f7       	brpl	.-8      	; 0x12aa <sd_assemble_r7_rsp+0x42>
    12b2:	24 2b       	or	r18, r20
    12b4:	2d 93       	st	X+, r18
			{
				start_val = (start_val << 1);
				shift_counter++;
			}
			
			for (uint8_t j = 0; j < 5; j++)
    12b6:	ac 17       	cp	r26, r28
    12b8:	bd 07       	cpc	r27, r29
    12ba:	49 f7       	brne	.-46     	; 0x128e <sd_assemble_r7_rsp+0x26>
    12bc:	11 c0       	rjmp	.+34     	; 0x12e0 <sd_assemble_r7_rsp+0x78>
{
	uint8_t start_val = 0xFF;
	uint8_t shift_counter = 0;
	static uint8_t r7_response[5] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
	
	for (uint8_t i = 0; i < array_size; i++)
    12be:	2f 5f       	subi	r18, 0xFF	; 255
    12c0:	62 13       	cpse	r22, r18
    12c2:	da cf       	rjmp	.-76     	; 0x1278 <sd_assemble_r7_rsp+0x10>
    12c4:	0d c0       	rjmp	.+26     	; 0x12e0 <sd_assemble_r7_rsp+0x78>
		{
			start_val = sd_return_data[i];
		}
		if (start_val != 0xFF)
		{
			while ((start_val & 0b10000000) != 0x00) // All responses start with a zero. This loop locates that starting point.
    12c6:	10 e0       	ldi	r17, 0x00	; 0
    12c8:	fa 01       	movw	r30, r20
    12ca:	e2 0f       	add	r30, r18
    12cc:	f1 1d       	adc	r31, r1
    12ce:	a1 e3       	ldi	r26, 0x31	; 49
    12d0:	b8 e2       	ldi	r27, 0x28	; 40
    12d2:	c6 e3       	ldi	r28, 0x36	; 54
    12d4:	d8 e2       	ldi	r29, 0x28	; 40
				shift_counter++;
			}
			
			for (uint8_t j = 0; j < 5; j++)
			{
				r7_response[j] = (sd_return_data[i+j] << shift_counter) | (sd_return_data[i+j+1] >> (8-shift_counter)); 
    12d6:	68 e0       	ldi	r22, 0x08	; 8
    12d8:	70 e0       	ldi	r23, 0x00	; 0
    12da:	61 1b       	sub	r22, r17
    12dc:	71 09       	sbc	r23, r1
    12de:	d7 cf       	rjmp	.-82     	; 0x128e <sd_assemble_r7_rsp+0x26>
			
			return r7_response;
		}
	}
	return r7_response;
}
    12e0:	81 e3       	ldi	r24, 0x31	; 49
    12e2:	98 e2       	ldi	r25, 0x28	; 40
    12e4:	df 91       	pop	r29
    12e6:	cf 91       	pop	r28
    12e8:	1f 91       	pop	r17
    12ea:	08 95       	ret

000012ec <sd_assemble_r3_rsp>:


uint8_t * sd_assemble_r3_rsp(uint8_t *sd_return_data, uint8_t array_size)
{
	return sd_assemble_r7_rsp(sd_return_data, array_size);
    12ec:	0e 94 34 09 	call	0x1268	; 0x1268 <sd_assemble_r7_rsp>
}
    12f0:	08 95       	ret

000012f2 <sd_display_error_message>:

void sd_display_error_message(uint8_t error_id)
{
    12f2:	cf 93       	push	r28
    12f4:	c8 2f       	mov	r28, r24
	printf("Failed\n\r");
    12f6:	81 ec       	ldi	r24, 0xC1	; 193
    12f8:	91 e6       	ldi	r25, 0x61	; 97
    12fa:	9f 93       	push	r25
    12fc:	8f 93       	push	r24
    12fe:	0e 94 b3 0c 	call	0x1966	; 0x1966 <printf>
	printf("ERROR: CMD%d\n\r", error_id);
    1302:	1f 92       	push	r1
    1304:	cf 93       	push	r28
    1306:	8a ec       	ldi	r24, 0xCA	; 202
    1308:	91 e6       	ldi	r25, 0x61	; 97
    130a:	9f 93       	push	r25
    130c:	8f 93       	push	r24
    130e:	0e 94 b3 0c 	call	0x1966	; 0x1966 <printf>
	printf("Ensure that your SD-card is properly inserted and restart the system.\n\r");
    1312:	89 ed       	ldi	r24, 0xD9	; 217
    1314:	91 e6       	ldi	r25, 0x61	; 97
    1316:	9f 93       	push	r25
    1318:	8f 93       	push	r24
    131a:	0e 94 b3 0c 	call	0x1966	; 0x1966 <printf>
}
    131e:	8d b7       	in	r24, 0x3d	; 61
    1320:	9e b7       	in	r25, 0x3e	; 62
    1322:	08 96       	adiw	r24, 0x08	; 8
    1324:	8d bf       	out	0x3d, r24	; 61
    1326:	9e bf       	out	0x3e, r25	; 62
    1328:	cf 91       	pop	r28
    132a:	08 95       	ret

0000132c <split_32bit_val>:

void split_32bit_val(uint32_t data, uint8_t *return_array)	// Takes in a 32bit value, and returns said value in 4 8bit chunks
{
    132c:	fa 01       	movw	r30, r20
	return_array[0] = (data & 0xff000000) >> 24;
    132e:	90 83       	st	Z, r25
	return_array[1] = (data & 0x00ff0000) >> 16;
    1330:	81 83       	std	Z+1, r24	; 0x01
	return_array[2] = (data & 0x0000ff00) >> 8;
    1332:	72 83       	std	Z+2, r23	; 0x02
	return_array[3] = (data & 0x000000ff) >> 0;
    1334:	63 83       	std	Z+3, r22	; 0x03
    1336:	08 95       	ret

00001338 <ADC_0_init>:

	// ADC0.WINHT = 0x0; /* Window Comparator High Threshold: 0x0 */

	// ADC0.WINLT = 0x0; /* Window Comparator Low Threshold: 0x0 */

	ADC0.CTRLA = 1 << ADC_ENABLE_bp     /* ADC Enable: enabled */
    1338:	81 e0       	ldi	r24, 0x01	; 1
    133a:	80 93 00 06 	sts	0x0600, r24	; 0x800600 <__TEXT_REGION_LENGTH__+0x7f4600>
	             | 0 << ADC_FREERUN_bp  /* ADC Freerun mode: disabled */
	             | ADC_RESSEL_10BIT_gc  /* 10-bit mode */
	             | 0 << ADC_RUNSTBY_bp; /* Run standby mode: disabled */

	return 0;
}
    133e:	80 e0       	ldi	r24, 0x00	; 0
    1340:	08 95       	ret

00001342 <BOD_init>:
	//		 | BOD_VLMCFG_BELOW_gc; /* Interrupt when supply goes below VLM level */

	// BOD.VLMCTRLA = BOD_VLMLVL_5ABOVE_gc; /* VLM threshold 5% above BOD level */

	return 0;
}
    1342:	80 e0       	ldi	r24, 0x00	; 0
    1344:	08 95       	ret

00001346 <CLKCTRL_init>:
 *       on calling convention. The memory model is not visible to the
 *       preprocessor, so it must be defined in the Assembler preprocessor directives.
 */
static inline void ccp_write_io(void *addr, uint8_t value)
{
	protected_write_io(addr, CCP_IOREG_gc, value);
    1346:	41 e0       	ldi	r20, 0x01	; 1
    1348:	68 ed       	ldi	r22, 0xD8	; 216
    134a:	81 e6       	ldi	r24, 0x61	; 97
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <protected_write_io>
	//		 | 0 << CLKCTRL_CLKOUT_bp /* System clock out: disabled */);

	// ccp_write_io((void*)&(CLKCTRL.MCLKLOCK),0 << CLKCTRL_LOCKEN_bp /* lock enable: disabled */);

	return 0;
}
    1352:	80 e0       	ldi	r24, 0x00	; 0
    1354:	08 95       	ret

00001356 <CPUINT_init>:
	// CPUINT.LVL0PRI = 0x0 << CPUINT_LVL0PRI_gp; /* Interrupt Level Priority: 0x0 */

	// CPUINT.LVL1VEC = 0x0 << CPUINT_LVL1VEC_gp; /* Interrupt Vector with High Priority: 0x0 */

	return 0;
}
    1356:	80 e0       	ldi	r24, 0x00	; 0
    1358:	08 95       	ret

0000135a <mcu_init>:
}

/* configure pins and initialize registers */
void I2C_0_initialization(void)
{
	I2C_0_init();
    135a:	e0 e1       	ldi	r30, 0x10	; 16
    135c:	f4 e0       	ldi	r31, 0x04	; 4
    135e:	80 81       	ld	r24, Z
    1360:	88 60       	ori	r24, 0x08	; 8
    1362:	81 93       	st	Z+, r24
    1364:	e8 31       	cpi	r30, 0x18	; 24
    1366:	84 e0       	ldi	r24, 0x04	; 4
    1368:	f8 07       	cpc	r31, r24
    136a:	c9 f7       	brne	.-14     	; 0x135e <mcu_init+0x4>
    136c:	e0 e3       	ldi	r30, 0x30	; 48
    136e:	f4 e0       	ldi	r31, 0x04	; 4
    1370:	80 81       	ld	r24, Z
    1372:	88 60       	ori	r24, 0x08	; 8
    1374:	81 93       	st	Z+, r24
    1376:	e8 33       	cpi	r30, 0x38	; 56
    1378:	84 e0       	ldi	r24, 0x04	; 4
    137a:	f8 07       	cpc	r31, r24
    137c:	c9 f7       	brne	.-14     	; 0x1370 <mcu_init+0x16>
    137e:	e0 e5       	ldi	r30, 0x50	; 80
    1380:	f4 e0       	ldi	r31, 0x04	; 4
    1382:	80 81       	ld	r24, Z
    1384:	88 60       	ori	r24, 0x08	; 8
    1386:	81 93       	st	Z+, r24
    1388:	e8 35       	cpi	r30, 0x58	; 88
    138a:	84 e0       	ldi	r24, 0x04	; 4
    138c:	f8 07       	cpc	r31, r24
    138e:	c9 f7       	brne	.-14     	; 0x1382 <mcu_init+0x28>
    1390:	e0 e7       	ldi	r30, 0x70	; 112
    1392:	f4 e0       	ldi	r31, 0x04	; 4
    1394:	80 81       	ld	r24, Z
    1396:	88 60       	ori	r24, 0x08	; 8
    1398:	81 93       	st	Z+, r24
    139a:	e8 37       	cpi	r30, 0x78	; 120
    139c:	84 e0       	ldi	r24, 0x04	; 4
    139e:	f8 07       	cpc	r31, r24
    13a0:	c9 f7       	brne	.-14     	; 0x1394 <mcu_init+0x3a>
    13a2:	e0 e9       	ldi	r30, 0x90	; 144
    13a4:	f4 e0       	ldi	r31, 0x04	; 4
    13a6:	80 81       	ld	r24, Z
    13a8:	88 60       	ori	r24, 0x08	; 8
    13aa:	81 93       	st	Z+, r24
    13ac:	e8 39       	cpi	r30, 0x98	; 152
    13ae:	84 e0       	ldi	r24, 0x04	; 4
    13b0:	f8 07       	cpc	r31, r24
    13b2:	c9 f7       	brne	.-14     	; 0x13a6 <mcu_init+0x4c>
    13b4:	e0 eb       	ldi	r30, 0xB0	; 176
    13b6:	f4 e0       	ldi	r31, 0x04	; 4
    13b8:	80 81       	ld	r24, Z
    13ba:	88 60       	ori	r24, 0x08	; 8
    13bc:	81 93       	st	Z+, r24
    13be:	e8 3b       	cpi	r30, 0xB8	; 184
    13c0:	84 e0       	ldi	r24, 0x04	; 4
    13c2:	f8 07       	cpc	r31, r24
    13c4:	c9 f7       	brne	.-14     	; 0x13b8 <mcu_init+0x5e>
    13c6:	08 95       	ret

000013c8 <CDC_USART_3_initialization>:
    13c8:	21 98       	cbi	0x04, 1	; 4
    13ca:	e1 e3       	ldi	r30, 0x31	; 49
    13cc:	f4 e0       	ldi	r31, 0x04	; 4
    13ce:	80 81       	ld	r24, Z
    13d0:	87 7f       	andi	r24, 0xF7	; 247
    13d2:	80 83       	st	Z, r24
    13d4:	28 98       	cbi	0x05, 0	; 5
    13d6:	20 9a       	sbi	0x04, 0	; 4
    13d8:	0e 94 11 0c 	call	0x1822	; 0x1822 <CDC_USART_3_init>
    13dc:	08 95       	ret

000013de <SPI_0_initialization>:
    13de:	05 98       	cbi	0x00, 5	; 0
    13e0:	e5 e1       	ldi	r30, 0x15	; 21
    13e2:	f4 e0       	ldi	r31, 0x04	; 4
    13e4:	80 81       	ld	r24, Z
    13e6:	87 7f       	andi	r24, 0xF7	; 247
    13e8:	80 83       	st	Z, r24
    13ea:	0c 98       	cbi	0x01, 4	; 1
    13ec:	04 9a       	sbi	0x00, 4	; 0
    13ee:	0e 98       	cbi	0x01, 6	; 1
    13f0:	06 9a       	sbi	0x00, 6	; 0
    13f2:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <SPI_0_init>
    13f6:	08 95       	ret

000013f8 <system_init>:
/**
 * \brief System initialization
 */
void system_init()
{
	mcu_init();
    13f8:	0e 94 ad 09 	call	0x135a	; 0x135a <mcu_init>

	CLKCTRL_init();
    13fc:	0e 94 a3 09 	call	0x1346	; 0x1346 <CLKCTRL_init>

/* Configure pins and initialize registers */
void ADC_0_initialization(void)
{

	ADC_0_init();
    1400:	0e 94 9c 09 	call	0x1338	; 0x1338 <ADC_0_init>

	CLKCTRL_init();

	ADC_0_initialization();

	CDC_USART_3_initialization();
    1404:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <CDC_USART_3_initialization>

	SPI_0_initialization();
    1408:	0e 94 ef 09 	call	0x13de	; 0x13de <SPI_0_initialization>

	CPUINT_init();
    140c:	0e 94 ab 09 	call	0x1356	; 0x1356 <CPUINT_init>

	SLPCTRL_init();
    1410:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <SLPCTRL_init>
}

/* configure pins and initialize registers */
void I2C_0_initialization(void)
{
	I2C_0_init();
    1414:	0e 94 cc 0b 	call	0x1798	; 0x1798 <I2C_0_init>

	SLPCTRL_init();

	I2C_0_initialization();

	BOD_init();
    1418:	0e 94 a1 09 	call	0x1342	; 0x1342 <BOD_init>
    141c:	08 95       	ret

0000141e <I2C_0_do_I2C_RESET>:
 * \brief Identical to I2C_0_master_operation(false);
 */
i2c_error_t I2C_0_master_write(void)
{
	return I2C_0_master_operation(false);
}
    141e:	e0 ea       	ldi	r30, 0xA0	; 160
    1420:	f8 e0       	ldi	r31, 0x08	; 8
    1422:	84 81       	ldd	r24, Z+4	; 0x04
    1424:	88 60       	ori	r24, 0x08	; 8
    1426:	84 83       	std	Z+4, r24	; 0x04
    1428:	85 81       	ldd	r24, Z+5	; 0x05
    142a:	81 60       	ori	r24, 0x01	; 1
    142c:	85 83       	std	Z+5, r24	; 0x05
    142e:	e1 e6       	ldi	r30, 0x61	; 97
    1430:	f8 e2       	ldi	r31, 0x28	; 40
    1432:	80 81       	ld	r24, Z
    1434:	8e 7f       	andi	r24, 0xFE	; 254
    1436:	80 83       	st	Z, r24
    1438:	13 86       	std	Z+11, r1	; 0x0b
    143a:	8e e0       	ldi	r24, 0x0E	; 14
    143c:	08 95       	ret

0000143e <I2C_0_do_I2C_IDLE>:
    143e:	e1 e6       	ldi	r30, 0x61	; 97
    1440:	f8 e2       	ldi	r31, 0x28	; 40
    1442:	80 81       	ld	r24, Z
    1444:	8e 7f       	andi	r24, 0xFE	; 254
    1446:	80 83       	st	Z, r24
    1448:	13 86       	std	Z+11, r1	; 0x0b
    144a:	80 e0       	ldi	r24, 0x00	; 0
    144c:	08 95       	ret

0000144e <I2C_0_do_I2C_SEND_ADR_READ>:
    144e:	e1 e6       	ldi	r30, 0x61	; 97
    1450:	f8 e2       	ldi	r31, 0x28	; 40
    1452:	80 81       	ld	r24, Z
    1454:	88 60       	ori	r24, 0x08	; 8
    1456:	80 83       	st	Z, r24
    1458:	81 81       	ldd	r24, Z+1	; 0x01
    145a:	88 0f       	add	r24, r24
    145c:	81 60       	ori	r24, 0x01	; 1
    145e:	80 93 a7 08 	sts	0x08A7, r24	; 0x8008a7 <__TEXT_REGION_LENGTH__+0x7f48a7>
    1462:	84 e0       	ldi	r24, 0x04	; 4
    1464:	08 95       	ret

00001466 <I2C_0_do_I2C_SEND_RESTART>:
    1466:	0e 94 27 0a 	call	0x144e	; 0x144e <I2C_0_do_I2C_SEND_ADR_READ>
    146a:	08 95       	ret

0000146c <I2C_0_do_I2C_SEND_RESTART_READ>:
    146c:	0e 94 27 0a 	call	0x144e	; 0x144e <I2C_0_do_I2C_SEND_ADR_READ>
    1470:	08 95       	ret

00001472 <I2C_0_do_I2C_SEND_ADR_WRITE>:
    1472:	e1 e6       	ldi	r30, 0x61	; 97
    1474:	f8 e2       	ldi	r31, 0x28	; 40
    1476:	80 81       	ld	r24, Z
    1478:	88 60       	ori	r24, 0x08	; 8
    147a:	80 83       	st	Z, r24
    147c:	81 81       	ldd	r24, Z+1	; 0x01
    147e:	88 0f       	add	r24, r24
    1480:	80 93 a7 08 	sts	0x08A7, r24	; 0x8008a7 <__TEXT_REGION_LENGTH__+0x7f48a7>
    1484:	83 e0       	ldi	r24, 0x03	; 3
    1486:	08 95       	ret

00001488 <I2C_0_do_I2C_SEND_RESTART_WRITE>:
    1488:	0e 94 39 0a 	call	0x1472	; 0x1472 <I2C_0_do_I2C_SEND_ADR_WRITE>
    148c:	08 95       	ret

0000148e <I2C_0_do_I2C_RX_DO_ACK>:
    148e:	e0 ea       	ldi	r30, 0xA0	; 160
    1490:	f8 e0       	ldi	r31, 0x08	; 8
    1492:	84 81       	ldd	r24, Z+4	; 0x04
    1494:	8b 7f       	andi	r24, 0xFB	; 251
    1496:	84 83       	std	Z+4, r24	; 0x04
    1498:	84 e0       	ldi	r24, 0x04	; 4
    149a:	08 95       	ret

0000149c <I2C_0_do_I2C_TX_DO_ACK>:
    149c:	e0 ea       	ldi	r30, 0xA0	; 160
    149e:	f8 e0       	ldi	r31, 0x08	; 8
    14a0:	84 81       	ldd	r24, Z+4	; 0x04
    14a2:	8b 7f       	andi	r24, 0xFB	; 251
    14a4:	84 83       	std	Z+4, r24	; 0x04
    14a6:	83 e0       	ldi	r24, 0x03	; 3
    14a8:	08 95       	ret

000014aa <I2C_0_do_I2C_DO_NACK_RESTART>:
    14aa:	e0 ea       	ldi	r30, 0xA0	; 160
    14ac:	f8 e0       	ldi	r31, 0x08	; 8
    14ae:	84 81       	ldd	r24, Z+4	; 0x04
    14b0:	84 60       	ori	r24, 0x04	; 4
    14b2:	84 83       	std	Z+4, r24	; 0x04
    14b4:	88 e0       	ldi	r24, 0x08	; 8
    14b6:	08 95       	ret

000014b8 <I2C_0_do_I2C_BUS_ERROR>:
    14b8:	e0 ea       	ldi	r30, 0xA0	; 160
    14ba:	f8 e0       	ldi	r31, 0x08	; 8
    14bc:	84 81       	ldd	r24, Z+4	; 0x04
    14be:	88 60       	ori	r24, 0x08	; 8
    14c0:	84 83       	std	Z+4, r24	; 0x04
    14c2:	85 81       	ldd	r24, Z+5	; 0x05
    14c4:	81 60       	ori	r24, 0x01	; 1
    14c6:	85 83       	std	Z+5, r24	; 0x05
    14c8:	e1 e6       	ldi	r30, 0x61	; 97
    14ca:	f8 e2       	ldi	r31, 0x28	; 40
    14cc:	80 81       	ld	r24, Z
    14ce:	8e 7f       	andi	r24, 0xFE	; 254
    14d0:	80 83       	st	Z, r24
    14d2:	82 e0       	ldi	r24, 0x02	; 2
    14d4:	83 87       	std	Z+11, r24	; 0x0b
    14d6:	8e e0       	ldi	r24, 0x0E	; 14
    14d8:	08 95       	ret

000014da <I2C_0_master_isr>:
    14da:	cf 93       	push	r28
    14dc:	df 93       	push	r29
    14de:	e0 ea       	ldi	r30, 0xA0	; 160
    14e0:	f8 e0       	ldi	r31, 0x08	; 8
    14e2:	85 81       	ldd	r24, Z+5	; 0x05
    14e4:	80 6c       	ori	r24, 0xC0	; 192
    14e6:	85 83       	std	Z+5, r24	; 0x05
    14e8:	80 91 61 28 	lds	r24, 0x2861	; 0x802861 <I2C_0_status>
    14ec:	83 ff       	sbrs	r24, 3
    14ee:	07 c0       	rjmp	.+14     	; 0x14fe <I2C_0_master_isr+0x24>
    14f0:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    14f4:	84 ff       	sbrs	r24, 4
    14f6:	03 c0       	rjmp	.+6      	; 0x14fe <I2C_0_master_isr+0x24>
    14f8:	8f e0       	ldi	r24, 0x0F	; 15
    14fa:	80 93 6b 28 	sts	0x286B, r24	; 0x80286b <I2C_0_status+0xa>
    14fe:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    1502:	83 ff       	sbrs	r24, 3
    1504:	03 c0       	rjmp	.+6      	; 0x150c <I2C_0_master_isr+0x32>
    1506:	80 e1       	ldi	r24, 0x10	; 16
    1508:	80 93 6b 28 	sts	0x286B, r24	; 0x80286b <I2C_0_status+0xa>
    150c:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    1510:	82 ff       	sbrs	r24, 2
    1512:	03 c0       	rjmp	.+6      	; 0x151a <I2C_0_master_isr+0x40>
    1514:	81 e1       	ldi	r24, 0x11	; 17
    1516:	80 93 6b 28 	sts	0x286B, r24	; 0x80286b <I2C_0_status+0xa>
    151a:	c1 e6       	ldi	r28, 0x61	; 97
    151c:	d8 e2       	ldi	r29, 0x28	; 40
    151e:	ea 85       	ldd	r30, Y+10	; 0x0a
    1520:	f0 e0       	ldi	r31, 0x00	; 0
    1522:	ee 0f       	add	r30, r30
    1524:	ff 1f       	adc	r31, r31
    1526:	ea 5c       	subi	r30, 0xCA	; 202
    1528:	f7 4d       	sbci	r31, 0xD7	; 215
    152a:	01 90       	ld	r0, Z+
    152c:	f0 81       	ld	r31, Z
    152e:	e0 2d       	mov	r30, r0
    1530:	09 95       	icall
    1532:	8a 87       	std	Y+10, r24	; 0x0a
    1534:	df 91       	pop	r29
    1536:	cf 91       	pop	r28
    1538:	08 95       	ret

0000153a <I2C_0_do_I2C_BUS_COLLISION>:
    153a:	e0 ea       	ldi	r30, 0xA0	; 160
    153c:	f8 e0       	ldi	r31, 0x08	; 8
    153e:	85 81       	ldd	r24, Z+5	; 0x05
    1540:	88 60       	ori	r24, 0x08	; 8
    1542:	85 83       	std	Z+5, r24	; 0x05
    1544:	a1 e6       	ldi	r26, 0x61	; 97
    1546:	b8 e2       	ldi	r27, 0x28	; 40
    1548:	82 e0       	ldi	r24, 0x02	; 2
    154a:	1b 96       	adiw	r26, 0x0b	; 11
    154c:	8c 93       	st	X, r24
    154e:	1b 97       	sbiw	r26, 0x0b	; 11
    1550:	1e 96       	adiw	r26, 0x0e	; 14
    1552:	ed 91       	ld	r30, X+
    1554:	fc 91       	ld	r31, X
    1556:	1f 97       	sbiw	r26, 0x0f	; 15
    1558:	5a 96       	adiw	r26, 0x1a	; 26
    155a:	8d 91       	ld	r24, X+
    155c:	9c 91       	ld	r25, X
    155e:	5b 97       	sbiw	r26, 0x1b	; 27
    1560:	09 95       	icall
    1562:	82 30       	cpi	r24, 0x02	; 2
    1564:	19 f0       	breq	.+6      	; 0x156c <I2C_0_do_I2C_BUS_COLLISION+0x32>
    1566:	83 30       	cpi	r24, 0x03	; 3
    1568:	21 f0       	breq	.+8      	; 0x1572 <I2C_0_do_I2C_BUS_COLLISION+0x38>
    156a:	06 c0       	rjmp	.+12     	; 0x1578 <I2C_0_do_I2C_BUS_COLLISION+0x3e>
    156c:	0e 94 27 0a 	call	0x144e	; 0x144e <I2C_0_do_I2C_SEND_ADR_READ>
    1570:	08 95       	ret
    1572:	0e 94 39 0a 	call	0x1472	; 0x1472 <I2C_0_do_I2C_SEND_ADR_WRITE>
    1576:	08 95       	ret
    1578:	0e 94 0f 0a 	call	0x141e	; 0x141e <I2C_0_do_I2C_RESET>
    157c:	08 95       	ret

0000157e <I2C_0_do_I2C_DO_NACK_STOP>:
    157e:	e0 ea       	ldi	r30, 0xA0	; 160
    1580:	f8 e0       	ldi	r31, 0x08	; 8
    1582:	84 81       	ldd	r24, Z+4	; 0x04
    1584:	84 60       	ori	r24, 0x04	; 4
    1586:	84 83       	std	Z+4, r24	; 0x04
    1588:	84 81       	ldd	r24, Z+4	; 0x04
    158a:	83 60       	ori	r24, 0x03	; 3
    158c:	84 83       	std	Z+4, r24	; 0x04
    158e:	e1 e6       	ldi	r30, 0x61	; 97
    1590:	f8 e2       	ldi	r31, 0x28	; 40
    1592:	80 81       	ld	r24, Z
    1594:	8e 7f       	andi	r24, 0xFE	; 254
    1596:	80 83       	st	Z, r24
    1598:	13 86       	std	Z+11, r1	; 0x0b
    159a:	80 e0       	ldi	r24, 0x00	; 0
    159c:	08 95       	ret

0000159e <I2C_0_do_I2C_RX>:
    159e:	cf 93       	push	r28
    15a0:	df 93       	push	r29
    15a2:	e1 e6       	ldi	r30, 0x61	; 97
    15a4:	f8 e2       	ldi	r31, 0x28	; 40
    15a6:	80 81       	ld	r24, Z
    15a8:	87 7f       	andi	r24, 0xF7	; 247
    15aa:	80 83       	st	Z, r24
    15ac:	84 81       	ldd	r24, Z+4	; 0x04
    15ae:	95 81       	ldd	r25, Z+5	; 0x05
    15b0:	01 97       	sbiw	r24, 0x01	; 1
    15b2:	31 f4       	brne	.+12     	; 0x15c0 <I2C_0_do_I2C_RX+0x22>
    15b4:	e0 ea       	ldi	r30, 0xA0	; 160
    15b6:	f8 e0       	ldi	r31, 0x08	; 8
    15b8:	84 81       	ldd	r24, Z+4	; 0x04
    15ba:	84 60       	ori	r24, 0x04	; 4
    15bc:	84 83       	std	Z+4, r24	; 0x04
    15be:	05 c0       	rjmp	.+10     	; 0x15ca <I2C_0_do_I2C_RX+0x2c>
    15c0:	e0 ea       	ldi	r30, 0xA0	; 160
    15c2:	f8 e0       	ldi	r31, 0x08	; 8
    15c4:	84 81       	ldd	r24, Z+4	; 0x04
    15c6:	8b 7f       	andi	r24, 0xFB	; 251
    15c8:	84 83       	std	Z+4, r24	; 0x04
    15ca:	e1 e6       	ldi	r30, 0x61	; 97
    15cc:	f8 e2       	ldi	r31, 0x28	; 40
    15ce:	84 81       	ldd	r24, Z+4	; 0x04
    15d0:	95 81       	ldd	r25, Z+5	; 0x05
    15d2:	01 97       	sbiw	r24, 0x01	; 1
    15d4:	84 83       	std	Z+4, r24	; 0x04
    15d6:	95 83       	std	Z+5, r25	; 0x05
    15d8:	89 2b       	or	r24, r25
    15da:	a9 f0       	breq	.+42     	; 0x1606 <I2C_0_do_I2C_RX+0x68>
    15dc:	df 01       	movw	r26, r30
    15de:	c2 81       	ldd	r28, Z+2	; 0x02
    15e0:	d3 81       	ldd	r29, Z+3	; 0x03
    15e2:	e0 ea       	ldi	r30, 0xA0	; 160
    15e4:	f8 e0       	ldi	r31, 0x08	; 8
    15e6:	80 85       	ldd	r24, Z+8	; 0x08
    15e8:	88 83       	st	Y, r24
    15ea:	12 96       	adiw	r26, 0x02	; 2
    15ec:	8d 91       	ld	r24, X+
    15ee:	9c 91       	ld	r25, X
    15f0:	13 97       	sbiw	r26, 0x03	; 3
    15f2:	01 96       	adiw	r24, 0x01	; 1
    15f4:	12 96       	adiw	r26, 0x02	; 2
    15f6:	8d 93       	st	X+, r24
    15f8:	9c 93       	st	X, r25
    15fa:	13 97       	sbiw	r26, 0x03	; 3
    15fc:	84 81       	ldd	r24, Z+4	; 0x04
    15fe:	82 60       	ori	r24, 0x02	; 2
    1600:	84 83       	std	Z+4, r24	; 0x04
    1602:	84 e0       	ldi	r24, 0x04	; 4
    1604:	26 c0       	rjmp	.+76     	; 0x1652 <I2C_0_do_I2C_RX+0xb4>
    1606:	a1 e6       	ldi	r26, 0x61	; 97
    1608:	b8 e2       	ldi	r27, 0x28	; 40
    160a:	12 96       	adiw	r26, 0x02	; 2
    160c:	ed 91       	ld	r30, X+
    160e:	fc 91       	ld	r31, X
    1610:	13 97       	sbiw	r26, 0x03	; 3
    1612:	80 91 a8 08 	lds	r24, 0x08A8	; 0x8008a8 <__TEXT_REGION_LENGTH__+0x7f48a8>
    1616:	80 83       	st	Z, r24
    1618:	12 96       	adiw	r26, 0x02	; 2
    161a:	8d 91       	ld	r24, X+
    161c:	9c 91       	ld	r25, X
    161e:	13 97       	sbiw	r26, 0x03	; 3
    1620:	01 96       	adiw	r24, 0x01	; 1
    1622:	12 96       	adiw	r26, 0x02	; 2
    1624:	8d 93       	st	X+, r24
    1626:	9c 93       	st	X, r25
    1628:	13 97       	sbiw	r26, 0x03	; 3
    162a:	8c 91       	ld	r24, X
    162c:	84 60       	ori	r24, 0x04	; 4
    162e:	8c 93       	st	X, r24
    1630:	1c 96       	adiw	r26, 0x0c	; 12
    1632:	ed 91       	ld	r30, X+
    1634:	fc 91       	ld	r31, X
    1636:	1d 97       	sbiw	r26, 0x0d	; 13
    1638:	58 96       	adiw	r26, 0x18	; 24
    163a:	8d 91       	ld	r24, X+
    163c:	9c 91       	ld	r25, X
    163e:	59 97       	sbiw	r26, 0x19	; 25
    1640:	09 95       	icall
    1642:	82 50       	subi	r24, 0x02	; 2
    1644:	82 30       	cpi	r24, 0x02	; 2
    1646:	18 f4       	brcc	.+6      	; 0x164e <I2C_0_do_I2C_RX+0xb0>
    1648:	0e 94 55 0a 	call	0x14aa	; 0x14aa <I2C_0_do_I2C_DO_NACK_RESTART>
    164c:	02 c0       	rjmp	.+4      	; 0x1652 <I2C_0_do_I2C_RX+0xb4>
    164e:	0e 94 bf 0a 	call	0x157e	; 0x157e <I2C_0_do_I2C_DO_NACK_STOP>
    1652:	df 91       	pop	r29
    1654:	cf 91       	pop	r28
    1656:	08 95       	ret

00001658 <I2C_0_do_I2C_SEND_STOP>:
    1658:	e0 ea       	ldi	r30, 0xA0	; 160
    165a:	f8 e0       	ldi	r31, 0x08	; 8
    165c:	84 81       	ldd	r24, Z+4	; 0x04
    165e:	83 60       	ori	r24, 0x03	; 3
    1660:	84 83       	std	Z+4, r24	; 0x04
    1662:	e1 e6       	ldi	r30, 0x61	; 97
    1664:	f8 e2       	ldi	r31, 0x28	; 40
    1666:	80 81       	ld	r24, Z
    1668:	8e 7f       	andi	r24, 0xFE	; 254
    166a:	80 83       	st	Z, r24
    166c:	13 86       	std	Z+11, r1	; 0x0b
    166e:	80 e0       	ldi	r24, 0x00	; 0
    1670:	08 95       	ret

00001672 <I2C_0_do_I2C_DO_ADDRESS_NACK>:
    1672:	a1 e6       	ldi	r26, 0x61	; 97
    1674:	b8 e2       	ldi	r27, 0x28	; 40
    1676:	8c 91       	ld	r24, X
    1678:	87 7f       	andi	r24, 0xF7	; 247
    167a:	8c 93       	st	X, r24
    167c:	82 e0       	ldi	r24, 0x02	; 2
    167e:	1b 96       	adiw	r26, 0x0b	; 11
    1680:	8c 93       	st	X, r24
    1682:	1b 97       	sbiw	r26, 0x0b	; 11
    1684:	50 96       	adiw	r26, 0x10	; 16
    1686:	ed 91       	ld	r30, X+
    1688:	fc 91       	ld	r31, X
    168a:	51 97       	sbiw	r26, 0x11	; 17
    168c:	5c 96       	adiw	r26, 0x1c	; 28
    168e:	8d 91       	ld	r24, X+
    1690:	9c 91       	ld	r25, X
    1692:	5d 97       	sbiw	r26, 0x1d	; 29
    1694:	09 95       	icall
    1696:	82 30       	cpi	r24, 0x02	; 2
    1698:	19 f0       	breq	.+6      	; 0x16a0 <I2C_0_do_I2C_DO_ADDRESS_NACK+0x2e>
    169a:	83 30       	cpi	r24, 0x03	; 3
    169c:	21 f0       	breq	.+8      	; 0x16a6 <I2C_0_do_I2C_DO_ADDRESS_NACK+0x34>
    169e:	06 c0       	rjmp	.+12     	; 0x16ac <I2C_0_do_I2C_DO_ADDRESS_NACK+0x3a>
    16a0:	0e 94 27 0a 	call	0x144e	; 0x144e <I2C_0_do_I2C_SEND_ADR_READ>
    16a4:	08 95       	ret
    16a6:	0e 94 39 0a 	call	0x1472	; 0x1472 <I2C_0_do_I2C_SEND_ADR_WRITE>
    16aa:	08 95       	ret
    16ac:	0e 94 2c 0b 	call	0x1658	; 0x1658 <I2C_0_do_I2C_SEND_STOP>
    16b0:	08 95       	ret

000016b2 <I2C_0_do_I2C_TX>:
    16b2:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    16b6:	84 ff       	sbrs	r24, 4
    16b8:	19 c0       	rjmp	.+50     	; 0x16ec <I2C_0_do_I2C_TX+0x3a>
    16ba:	a1 e6       	ldi	r26, 0x61	; 97
    16bc:	b8 e2       	ldi	r27, 0x28	; 40
    16be:	52 96       	adiw	r26, 0x12	; 18
    16c0:	ed 91       	ld	r30, X+
    16c2:	fc 91       	ld	r31, X
    16c4:	53 97       	sbiw	r26, 0x13	; 19
    16c6:	5e 96       	adiw	r26, 0x1e	; 30
    16c8:	8d 91       	ld	r24, X+
    16ca:	9c 91       	ld	r25, X
    16cc:	5f 97       	sbiw	r26, 0x1f	; 31
    16ce:	09 95       	icall
    16d0:	82 30       	cpi	r24, 0x02	; 2
    16d2:	19 f0       	breq	.+6      	; 0x16da <I2C_0_do_I2C_TX+0x28>
    16d4:	83 30       	cpi	r24, 0x03	; 3
    16d6:	21 f0       	breq	.+8      	; 0x16e0 <I2C_0_do_I2C_TX+0x2e>
    16d8:	06 c0       	rjmp	.+12     	; 0x16e6 <I2C_0_do_I2C_TX+0x34>
    16da:	0e 94 27 0a 	call	0x144e	; 0x144e <I2C_0_do_I2C_SEND_ADR_READ>
    16de:	08 95       	ret
    16e0:	0e 94 39 0a 	call	0x1472	; 0x1472 <I2C_0_do_I2C_SEND_ADR_WRITE>
    16e4:	08 95       	ret
    16e6:	0e 94 2c 0b 	call	0x1658	; 0x1658 <I2C_0_do_I2C_SEND_STOP>
    16ea:	08 95       	ret
    16ec:	e1 e6       	ldi	r30, 0x61	; 97
    16ee:	f8 e2       	ldi	r31, 0x28	; 40
    16f0:	80 81       	ld	r24, Z
    16f2:	87 7f       	andi	r24, 0xF7	; 247
    16f4:	80 83       	st	Z, r24
    16f6:	a2 81       	ldd	r26, Z+2	; 0x02
    16f8:	b3 81       	ldd	r27, Z+3	; 0x03
    16fa:	cd 01       	movw	r24, r26
    16fc:	01 96       	adiw	r24, 0x01	; 1
    16fe:	82 83       	std	Z+2, r24	; 0x02
    1700:	93 83       	std	Z+3, r25	; 0x03
    1702:	8c 91       	ld	r24, X
    1704:	80 93 a8 08 	sts	0x08A8, r24	; 0x8008a8 <__TEXT_REGION_LENGTH__+0x7f48a8>
    1708:	84 81       	ldd	r24, Z+4	; 0x04
    170a:	95 81       	ldd	r25, Z+5	; 0x05
    170c:	01 97       	sbiw	r24, 0x01	; 1
    170e:	84 83       	std	Z+4, r24	; 0x04
    1710:	95 83       	std	Z+5, r25	; 0x05
    1712:	89 2b       	or	r24, r25
    1714:	11 f4       	brne	.+4      	; 0x171a <I2C_0_do_I2C_TX+0x68>
    1716:	85 e0       	ldi	r24, 0x05	; 5
    1718:	08 95       	ret
    171a:	83 e0       	ldi	r24, 0x03	; 3
    171c:	08 95       	ret

0000171e <I2C_0_do_I2C_TX_EMPTY>:
    171e:	80 91 a5 08 	lds	r24, 0x08A5	; 0x8008a5 <__TEXT_REGION_LENGTH__+0x7f48a5>
    1722:	84 ff       	sbrs	r24, 4
    1724:	19 c0       	rjmp	.+50     	; 0x1758 <I2C_0_do_I2C_TX_EMPTY+0x3a>
    1726:	a1 e6       	ldi	r26, 0x61	; 97
    1728:	b8 e2       	ldi	r27, 0x28	; 40
    172a:	52 96       	adiw	r26, 0x12	; 18
    172c:	ed 91       	ld	r30, X+
    172e:	fc 91       	ld	r31, X
    1730:	53 97       	sbiw	r26, 0x13	; 19
    1732:	5e 96       	adiw	r26, 0x1e	; 30
    1734:	8d 91       	ld	r24, X+
    1736:	9c 91       	ld	r25, X
    1738:	5f 97       	sbiw	r26, 0x1f	; 31
    173a:	09 95       	icall
    173c:	82 30       	cpi	r24, 0x02	; 2
    173e:	19 f0       	breq	.+6      	; 0x1746 <I2C_0_do_I2C_TX_EMPTY+0x28>
    1740:	83 30       	cpi	r24, 0x03	; 3
    1742:	21 f0       	breq	.+8      	; 0x174c <I2C_0_do_I2C_TX_EMPTY+0x2e>
    1744:	06 c0       	rjmp	.+12     	; 0x1752 <I2C_0_do_I2C_TX_EMPTY+0x34>
    1746:	0e 94 27 0a 	call	0x144e	; 0x144e <I2C_0_do_I2C_SEND_ADR_READ>
    174a:	08 95       	ret
    174c:	0e 94 39 0a 	call	0x1472	; 0x1472 <I2C_0_do_I2C_SEND_ADR_WRITE>
    1750:	08 95       	ret
    1752:	0e 94 2c 0b 	call	0x1658	; 0x1658 <I2C_0_do_I2C_SEND_STOP>
    1756:	08 95       	ret
    1758:	a1 e6       	ldi	r26, 0x61	; 97
    175a:	b8 e2       	ldi	r27, 0x28	; 40
    175c:	8c 91       	ld	r24, X
    175e:	84 60       	ori	r24, 0x04	; 4
    1760:	8c 93       	st	X, r24
    1762:	1c 96       	adiw	r26, 0x0c	; 12
    1764:	ed 91       	ld	r30, X+
    1766:	fc 91       	ld	r31, X
    1768:	1d 97       	sbiw	r26, 0x0d	; 13
    176a:	58 96       	adiw	r26, 0x18	; 24
    176c:	8d 91       	ld	r24, X+
    176e:	9c 91       	ld	r25, X
    1770:	59 97       	sbiw	r26, 0x19	; 25
    1772:	09 95       	icall
    1774:	83 30       	cpi	r24, 0x03	; 3
    1776:	39 f0       	breq	.+14     	; 0x1786 <I2C_0_do_I2C_TX_EMPTY+0x68>
    1778:	84 30       	cpi	r24, 0x04	; 4
    177a:	41 f0       	breq	.+16     	; 0x178c <I2C_0_do_I2C_TX_EMPTY+0x6e>
    177c:	82 30       	cpi	r24, 0x02	; 2
    177e:	49 f4       	brne	.+18     	; 0x1792 <I2C_0_do_I2C_TX_EMPTY+0x74>
    1780:	0e 94 27 0a 	call	0x144e	; 0x144e <I2C_0_do_I2C_SEND_ADR_READ>
    1784:	08 95       	ret
    1786:	0e 94 39 0a 	call	0x1472	; 0x1472 <I2C_0_do_I2C_SEND_ADR_WRITE>
    178a:	08 95       	ret
    178c:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <I2C_0_do_I2C_TX>
    1790:	08 95       	ret
    1792:	0e 94 2c 0b 	call	0x1658	; 0x1658 <I2C_0_do_I2C_SEND_STOP>
    1796:	08 95       	ret

00001798 <I2C_0_init>:
    1798:	e0 ea       	ldi	r30, 0xA0	; 160
    179a:	f8 e0       	ldi	r31, 0x08	; 8
    179c:	83 e2       	ldi	r24, 0x23	; 35
    179e:	86 83       	std	Z+6, r24	; 0x06
    17a0:	81 ec       	ldi	r24, 0xC1	; 193
    17a2:	83 83       	std	Z+3, r24	; 0x03
    17a4:	08 95       	ret

000017a6 <__vector_15>:
    I2C_0_do_I2C_BUS_COLLISION,      // I2C_BUS_COLLISION
    I2C_0_do_I2C_BUS_ERROR           // I2C_BUS_ERROR
};

ISR(TWI0_TWIM_vect)
{
    17a6:	1f 92       	push	r1
    17a8:	0f 92       	push	r0
    17aa:	0f b6       	in	r0, 0x3f	; 63
    17ac:	0f 92       	push	r0
    17ae:	11 24       	eor	r1, r1
    17b0:	2f 93       	push	r18
    17b2:	3f 93       	push	r19
    17b4:	4f 93       	push	r20
    17b6:	5f 93       	push	r21
    17b8:	6f 93       	push	r22
    17ba:	7f 93       	push	r23
    17bc:	8f 93       	push	r24
    17be:	9f 93       	push	r25
    17c0:	af 93       	push	r26
    17c2:	bf 93       	push	r27
    17c4:	ef 93       	push	r30
    17c6:	ff 93       	push	r31
	I2C_0_master_isr();
    17c8:	0e 94 6d 0a 	call	0x14da	; 0x14da <I2C_0_master_isr>
}
    17cc:	ff 91       	pop	r31
    17ce:	ef 91       	pop	r30
    17d0:	bf 91       	pop	r27
    17d2:	af 91       	pop	r26
    17d4:	9f 91       	pop	r25
    17d6:	8f 91       	pop	r24
    17d8:	7f 91       	pop	r23
    17da:	6f 91       	pop	r22
    17dc:	5f 91       	pop	r21
    17de:	4f 91       	pop	r20
    17e0:	3f 91       	pop	r19
    17e2:	2f 91       	pop	r18
    17e4:	0f 90       	pop	r0
    17e6:	0f be       	out	0x3f, r0	; 63
    17e8:	0f 90       	pop	r0
    17ea:	1f 90       	pop	r1
    17ec:	18 95       	reti

000017ee <protected_write_io>:
#if defined(__GNUC__)
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
#endif
	movw    r30, r24                // Load addr into Z
    17ee:	fc 01       	movw	r30, r24
	out     CCP, r22                // Start CCP handshake
    17f0:	64 bf       	out	0x34, r22	; 52
	st      Z, r20                  // Write value to I/O register
    17f2:	40 83       	st	Z, r20
	ret                             // Return to caller
    17f4:	08 95       	ret

000017f6 <SLPCTRL_init>:

	// SLPCTRL.CTRLA = 0 << SLPCTRL_SEN_bp /* Sleep enable: disabled */
	//		 | SLPCTRL_SMODE_IDLE_gc; /* Idle mode */

	return 0;
}
    17f6:	80 e0       	ldi	r24, 0x00	; 0
    17f8:	08 95       	ret

000017fa <SPI_0_init>:
 *
 * \return Nothing
 */
void SPI_0_disable()
{
	SPI0.CTRLA &= ~SPI_ENABLE_bm;
    17fa:	85 e2       	ldi	r24, 0x25	; 37
    17fc:	80 93 c0 08 	sts	0x08C0, r24	; 0x8008c0 <__TEXT_REGION_LENGTH__+0x7f48c0>
    1800:	10 92 85 28 	sts	0x2885, r1	; 0x802885 <SPI_0_desc>
    1804:	08 95       	ret

00001806 <SPI_0_exchange_byte>:
 */
uint8_t SPI_0_exchange_byte(uint8_t data)
{
	// Blocking wait for SPI free makes the function work
	// seamlessly also with IRQ drivers.
	while (SPI_0_desc.status == SPI_BUSY)
    1806:	90 91 85 28 	lds	r25, 0x2885	; 0x802885 <SPI_0_desc>
    180a:	92 30       	cpi	r25, 0x02	; 2
    180c:	f1 f3       	breq	.-4      	; 0x180a <SPI_0_exchange_byte+0x4>
		;
	SPI0.DATA = data;
    180e:	80 93 c4 08 	sts	0x08C4, r24	; 0x8008c4 <__TEXT_REGION_LENGTH__+0x7f48c4>
	while (!(SPI0.INTFLAGS & SPI_RXCIF_bm))
    1812:	e0 ec       	ldi	r30, 0xC0	; 192
    1814:	f8 e0       	ldi	r31, 0x08	; 8
    1816:	83 81       	ldd	r24, Z+3	; 0x03
    1818:	88 23       	and	r24, r24
    181a:	ec f7       	brge	.-6      	; 0x1816 <SPI_0_exchange_byte+0x10>
		;
	return SPI0.DATA;
    181c:	80 91 c4 08 	lds	r24, 0x08C4	; 0x8008c4 <__TEXT_REGION_LENGTH__+0x7f48c4>
}
    1820:	08 95       	ret

00001822 <CDC_USART_3_init>:
uint8_t CDC_USART_3_read()
{
	while (!(USART3.STATUS & USART_RXCIF_bm))
		;
	return USART3.RXDATAL;
}
    1822:	e0 e6       	ldi	r30, 0x60	; 96
    1824:	f8 e0       	ldi	r31, 0x08	; 8
    1826:	86 e1       	ldi	r24, 0x16	; 22
    1828:	91 e0       	ldi	r25, 0x01	; 1
    182a:	80 87       	std	Z+8, r24	; 0x08
    182c:	91 87       	std	Z+9, r25	; 0x09
    182e:	80 ec       	ldi	r24, 0xC0	; 192
    1830:	86 83       	std	Z+6, r24	; 0x06
    1832:	80 e0       	ldi	r24, 0x00	; 0
    1834:	08 95       	ret

00001836 <CDC_USART_3_write>:
 *
 * \return Nothing
 */
void CDC_USART_3_write(const uint8_t data)
{
	while (!(USART3.STATUS & USART_DREIF_bm))
    1836:	e0 e6       	ldi	r30, 0x60	; 96
    1838:	f8 e0       	ldi	r31, 0x08	; 8
    183a:	94 81       	ldd	r25, Z+4	; 0x04
    183c:	95 ff       	sbrs	r25, 5
    183e:	fd cf       	rjmp	.-6      	; 0x183a <CDC_USART_3_write+0x4>
		;
	USART3.TXDATAL = data;
    1840:	80 93 62 08 	sts	0x0862, r24	; 0x800862 <__TEXT_REGION_LENGTH__+0x7f4862>
    1844:	08 95       	ret

00001846 <__mulsi3>:
    1846:	db 01       	movw	r26, r22
    1848:	8f 93       	push	r24
    184a:	9f 93       	push	r25
    184c:	0e 94 47 0c 	call	0x188e	; 0x188e <__muluhisi3>
    1850:	bf 91       	pop	r27
    1852:	af 91       	pop	r26
    1854:	a2 9f       	mul	r26, r18
    1856:	80 0d       	add	r24, r0
    1858:	91 1d       	adc	r25, r1
    185a:	a3 9f       	mul	r26, r19
    185c:	90 0d       	add	r25, r0
    185e:	b2 9f       	mul	r27, r18
    1860:	90 0d       	add	r25, r0
    1862:	11 24       	eor	r1, r1
    1864:	08 95       	ret

00001866 <__udivmodhi4>:
    1866:	aa 1b       	sub	r26, r26
    1868:	bb 1b       	sub	r27, r27
    186a:	51 e1       	ldi	r21, 0x11	; 17
    186c:	07 c0       	rjmp	.+14     	; 0x187c <__udivmodhi4_ep>

0000186e <__udivmodhi4_loop>:
    186e:	aa 1f       	adc	r26, r26
    1870:	bb 1f       	adc	r27, r27
    1872:	a6 17       	cp	r26, r22
    1874:	b7 07       	cpc	r27, r23
    1876:	10 f0       	brcs	.+4      	; 0x187c <__udivmodhi4_ep>
    1878:	a6 1b       	sub	r26, r22
    187a:	b7 0b       	sbc	r27, r23

0000187c <__udivmodhi4_ep>:
    187c:	88 1f       	adc	r24, r24
    187e:	99 1f       	adc	r25, r25
    1880:	5a 95       	dec	r21
    1882:	a9 f7       	brne	.-22     	; 0x186e <__udivmodhi4_loop>
    1884:	80 95       	com	r24
    1886:	90 95       	com	r25
    1888:	bc 01       	movw	r22, r24
    188a:	cd 01       	movw	r24, r26
    188c:	08 95       	ret

0000188e <__muluhisi3>:
    188e:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <__umulhisi3>
    1892:	a5 9f       	mul	r26, r21
    1894:	90 0d       	add	r25, r0
    1896:	b4 9f       	mul	r27, r20
    1898:	90 0d       	add	r25, r0
    189a:	a4 9f       	mul	r26, r20
    189c:	80 0d       	add	r24, r0
    189e:	91 1d       	adc	r25, r1
    18a0:	11 24       	eor	r1, r1
    18a2:	08 95       	ret

000018a4 <__umulhisi3>:
    18a4:	a2 9f       	mul	r26, r18
    18a6:	b0 01       	movw	r22, r0
    18a8:	b3 9f       	mul	r27, r19
    18aa:	c0 01       	movw	r24, r0
    18ac:	a3 9f       	mul	r26, r19
    18ae:	70 0d       	add	r23, r0
    18b0:	81 1d       	adc	r24, r1
    18b2:	11 24       	eor	r1, r1
    18b4:	91 1d       	adc	r25, r1
    18b6:	b2 9f       	mul	r27, r18
    18b8:	70 0d       	add	r23, r0
    18ba:	81 1d       	adc	r24, r1
    18bc:	11 24       	eor	r1, r1
    18be:	91 1d       	adc	r25, r1
    18c0:	08 95       	ret

000018c2 <memset>:
    18c2:	dc 01       	movw	r26, r24
    18c4:	01 c0       	rjmp	.+2      	; 0x18c8 <memset+0x6>
    18c6:	6d 93       	st	X+, r22
    18c8:	41 50       	subi	r20, 0x01	; 1
    18ca:	50 40       	sbci	r21, 0x00	; 0
    18cc:	e0 f7       	brcc	.-8      	; 0x18c6 <memset+0x4>
    18ce:	08 95       	ret

000018d0 <fdevopen>:
    18d0:	0f 93       	push	r16
    18d2:	1f 93       	push	r17
    18d4:	cf 93       	push	r28
    18d6:	df 93       	push	r29
    18d8:	00 97       	sbiw	r24, 0x00	; 0
    18da:	31 f4       	brne	.+12     	; 0x18e8 <fdevopen+0x18>
    18dc:	61 15       	cp	r22, r1
    18de:	71 05       	cpc	r23, r1
    18e0:	19 f4       	brne	.+6      	; 0x18e8 <fdevopen+0x18>
    18e2:	80 e0       	ldi	r24, 0x00	; 0
    18e4:	90 e0       	ldi	r25, 0x00	; 0
    18e6:	3a c0       	rjmp	.+116    	; 0x195c <fdevopen+0x8c>
    18e8:	8b 01       	movw	r16, r22
    18ea:	ec 01       	movw	r28, r24
    18ec:	6e e0       	ldi	r22, 0x0E	; 14
    18ee:	70 e0       	ldi	r23, 0x00	; 0
    18f0:	81 e0       	ldi	r24, 0x01	; 1
    18f2:	90 e0       	ldi	r25, 0x00	; 0
    18f4:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <calloc>
    18f8:	fc 01       	movw	r30, r24
    18fa:	89 2b       	or	r24, r25
    18fc:	91 f3       	breq	.-28     	; 0x18e2 <fdevopen+0x12>
    18fe:	80 e8       	ldi	r24, 0x80	; 128
    1900:	83 83       	std	Z+3, r24	; 0x03
    1902:	01 15       	cp	r16, r1
    1904:	11 05       	cpc	r17, r1
    1906:	71 f0       	breq	.+28     	; 0x1924 <fdevopen+0x54>
    1908:	02 87       	std	Z+10, r16	; 0x0a
    190a:	13 87       	std	Z+11, r17	; 0x0b
    190c:	81 e8       	ldi	r24, 0x81	; 129
    190e:	83 83       	std	Z+3, r24	; 0x03
    1910:	80 91 87 29 	lds	r24, 0x2987	; 0x802987 <__iob>
    1914:	90 91 88 29 	lds	r25, 0x2988	; 0x802988 <__iob+0x1>
    1918:	89 2b       	or	r24, r25
    191a:	21 f4       	brne	.+8      	; 0x1924 <fdevopen+0x54>
    191c:	e0 93 87 29 	sts	0x2987, r30	; 0x802987 <__iob>
    1920:	f0 93 88 29 	sts	0x2988, r31	; 0x802988 <__iob+0x1>
    1924:	20 97       	sbiw	r28, 0x00	; 0
    1926:	c9 f0       	breq	.+50     	; 0x195a <fdevopen+0x8a>
    1928:	c0 87       	std	Z+8, r28	; 0x08
    192a:	d1 87       	std	Z+9, r29	; 0x09
    192c:	83 81       	ldd	r24, Z+3	; 0x03
    192e:	82 60       	ori	r24, 0x02	; 2
    1930:	83 83       	std	Z+3, r24	; 0x03
    1932:	80 91 89 29 	lds	r24, 0x2989	; 0x802989 <__iob+0x2>
    1936:	90 91 8a 29 	lds	r25, 0x298A	; 0x80298a <__iob+0x3>
    193a:	89 2b       	or	r24, r25
    193c:	71 f4       	brne	.+28     	; 0x195a <fdevopen+0x8a>
    193e:	e0 93 89 29 	sts	0x2989, r30	; 0x802989 <__iob+0x2>
    1942:	f0 93 8a 29 	sts	0x298A, r31	; 0x80298a <__iob+0x3>
    1946:	80 91 8b 29 	lds	r24, 0x298B	; 0x80298b <__iob+0x4>
    194a:	90 91 8c 29 	lds	r25, 0x298C	; 0x80298c <__iob+0x5>
    194e:	89 2b       	or	r24, r25
    1950:	21 f4       	brne	.+8      	; 0x195a <fdevopen+0x8a>
    1952:	e0 93 8b 29 	sts	0x298B, r30	; 0x80298b <__iob+0x4>
    1956:	f0 93 8c 29 	sts	0x298C, r31	; 0x80298c <__iob+0x5>
    195a:	cf 01       	movw	r24, r30
    195c:	df 91       	pop	r29
    195e:	cf 91       	pop	r28
    1960:	1f 91       	pop	r17
    1962:	0f 91       	pop	r16
    1964:	08 95       	ret

00001966 <printf>:
    1966:	a0 e0       	ldi	r26, 0x00	; 0
    1968:	b0 e0       	ldi	r27, 0x00	; 0
    196a:	e9 eb       	ldi	r30, 0xB9	; 185
    196c:	fc e0       	ldi	r31, 0x0C	; 12
    196e:	0c 94 a7 10 	jmp	0x214e	; 0x214e <__prologue_saves__+0x20>
    1972:	ae 01       	movw	r20, r28
    1974:	4b 5f       	subi	r20, 0xFB	; 251
    1976:	5f 4f       	sbci	r21, 0xFF	; 255
    1978:	fa 01       	movw	r30, r20
    197a:	61 91       	ld	r22, Z+
    197c:	71 91       	ld	r23, Z+
    197e:	af 01       	movw	r20, r30
    1980:	80 91 89 29 	lds	r24, 0x2989	; 0x802989 <__iob+0x2>
    1984:	90 91 8a 29 	lds	r25, 0x298A	; 0x80298a <__iob+0x3>
    1988:	0e 94 c9 0c 	call	0x1992	; 0x1992 <vfprintf>
    198c:	e2 e0       	ldi	r30, 0x02	; 2
    198e:	0c 94 c0 10 	jmp	0x2180	; 0x2180 <__epilogue_restores__+0x20>

00001992 <vfprintf>:
    1992:	ab e0       	ldi	r26, 0x0B	; 11
    1994:	b0 e0       	ldi	r27, 0x00	; 0
    1996:	ef ec       	ldi	r30, 0xCF	; 207
    1998:	fc e0       	ldi	r31, 0x0C	; 12
    199a:	0c 94 97 10 	jmp	0x212e	; 0x212e <__prologue_saves__>
    199e:	6c 01       	movw	r12, r24
    19a0:	7b 01       	movw	r14, r22
    19a2:	8a 01       	movw	r16, r20
    19a4:	fc 01       	movw	r30, r24
    19a6:	16 82       	std	Z+6, r1	; 0x06
    19a8:	17 82       	std	Z+7, r1	; 0x07
    19aa:	83 81       	ldd	r24, Z+3	; 0x03
    19ac:	81 ff       	sbrs	r24, 1
    19ae:	cc c1       	rjmp	.+920    	; 0x1d48 <vfprintf+0x3b6>
    19b0:	ce 01       	movw	r24, r28
    19b2:	01 96       	adiw	r24, 0x01	; 1
    19b4:	3c 01       	movw	r6, r24
    19b6:	f6 01       	movw	r30, r12
    19b8:	93 81       	ldd	r25, Z+3	; 0x03
    19ba:	f7 01       	movw	r30, r14
    19bc:	93 fd       	sbrc	r25, 3
    19be:	85 91       	lpm	r24, Z+
    19c0:	93 ff       	sbrs	r25, 3
    19c2:	81 91       	ld	r24, Z+
    19c4:	7f 01       	movw	r14, r30
    19c6:	88 23       	and	r24, r24
    19c8:	09 f4       	brne	.+2      	; 0x19cc <vfprintf+0x3a>
    19ca:	ba c1       	rjmp	.+884    	; 0x1d40 <vfprintf+0x3ae>
    19cc:	85 32       	cpi	r24, 0x25	; 37
    19ce:	39 f4       	brne	.+14     	; 0x19de <vfprintf+0x4c>
    19d0:	93 fd       	sbrc	r25, 3
    19d2:	85 91       	lpm	r24, Z+
    19d4:	93 ff       	sbrs	r25, 3
    19d6:	81 91       	ld	r24, Z+
    19d8:	7f 01       	movw	r14, r30
    19da:	85 32       	cpi	r24, 0x25	; 37
    19dc:	29 f4       	brne	.+10     	; 0x19e8 <vfprintf+0x56>
    19de:	b6 01       	movw	r22, r12
    19e0:	90 e0       	ldi	r25, 0x00	; 0
    19e2:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <fputc>
    19e6:	e7 cf       	rjmp	.-50     	; 0x19b6 <vfprintf+0x24>
    19e8:	91 2c       	mov	r9, r1
    19ea:	21 2c       	mov	r2, r1
    19ec:	31 2c       	mov	r3, r1
    19ee:	ff e1       	ldi	r31, 0x1F	; 31
    19f0:	f3 15       	cp	r31, r3
    19f2:	d8 f0       	brcs	.+54     	; 0x1a2a <vfprintf+0x98>
    19f4:	8b 32       	cpi	r24, 0x2B	; 43
    19f6:	79 f0       	breq	.+30     	; 0x1a16 <vfprintf+0x84>
    19f8:	38 f4       	brcc	.+14     	; 0x1a08 <vfprintf+0x76>
    19fa:	80 32       	cpi	r24, 0x20	; 32
    19fc:	79 f0       	breq	.+30     	; 0x1a1c <vfprintf+0x8a>
    19fe:	83 32       	cpi	r24, 0x23	; 35
    1a00:	a1 f4       	brne	.+40     	; 0x1a2a <vfprintf+0x98>
    1a02:	23 2d       	mov	r18, r3
    1a04:	20 61       	ori	r18, 0x10	; 16
    1a06:	1d c0       	rjmp	.+58     	; 0x1a42 <vfprintf+0xb0>
    1a08:	8d 32       	cpi	r24, 0x2D	; 45
    1a0a:	61 f0       	breq	.+24     	; 0x1a24 <vfprintf+0x92>
    1a0c:	80 33       	cpi	r24, 0x30	; 48
    1a0e:	69 f4       	brne	.+26     	; 0x1a2a <vfprintf+0x98>
    1a10:	23 2d       	mov	r18, r3
    1a12:	21 60       	ori	r18, 0x01	; 1
    1a14:	16 c0       	rjmp	.+44     	; 0x1a42 <vfprintf+0xb0>
    1a16:	83 2d       	mov	r24, r3
    1a18:	82 60       	ori	r24, 0x02	; 2
    1a1a:	38 2e       	mov	r3, r24
    1a1c:	e3 2d       	mov	r30, r3
    1a1e:	e4 60       	ori	r30, 0x04	; 4
    1a20:	3e 2e       	mov	r3, r30
    1a22:	2a c0       	rjmp	.+84     	; 0x1a78 <vfprintf+0xe6>
    1a24:	f3 2d       	mov	r31, r3
    1a26:	f8 60       	ori	r31, 0x08	; 8
    1a28:	1d c0       	rjmp	.+58     	; 0x1a64 <vfprintf+0xd2>
    1a2a:	37 fc       	sbrc	r3, 7
    1a2c:	2d c0       	rjmp	.+90     	; 0x1a88 <vfprintf+0xf6>
    1a2e:	20 ed       	ldi	r18, 0xD0	; 208
    1a30:	28 0f       	add	r18, r24
    1a32:	2a 30       	cpi	r18, 0x0A	; 10
    1a34:	40 f0       	brcs	.+16     	; 0x1a46 <vfprintf+0xb4>
    1a36:	8e 32       	cpi	r24, 0x2E	; 46
    1a38:	b9 f4       	brne	.+46     	; 0x1a68 <vfprintf+0xd6>
    1a3a:	36 fc       	sbrc	r3, 6
    1a3c:	81 c1       	rjmp	.+770    	; 0x1d40 <vfprintf+0x3ae>
    1a3e:	23 2d       	mov	r18, r3
    1a40:	20 64       	ori	r18, 0x40	; 64
    1a42:	32 2e       	mov	r3, r18
    1a44:	19 c0       	rjmp	.+50     	; 0x1a78 <vfprintf+0xe6>
    1a46:	36 fe       	sbrs	r3, 6
    1a48:	06 c0       	rjmp	.+12     	; 0x1a56 <vfprintf+0xc4>
    1a4a:	8a e0       	ldi	r24, 0x0A	; 10
    1a4c:	98 9e       	mul	r9, r24
    1a4e:	20 0d       	add	r18, r0
    1a50:	11 24       	eor	r1, r1
    1a52:	92 2e       	mov	r9, r18
    1a54:	11 c0       	rjmp	.+34     	; 0x1a78 <vfprintf+0xe6>
    1a56:	ea e0       	ldi	r30, 0x0A	; 10
    1a58:	2e 9e       	mul	r2, r30
    1a5a:	20 0d       	add	r18, r0
    1a5c:	11 24       	eor	r1, r1
    1a5e:	22 2e       	mov	r2, r18
    1a60:	f3 2d       	mov	r31, r3
    1a62:	f0 62       	ori	r31, 0x20	; 32
    1a64:	3f 2e       	mov	r3, r31
    1a66:	08 c0       	rjmp	.+16     	; 0x1a78 <vfprintf+0xe6>
    1a68:	8c 36       	cpi	r24, 0x6C	; 108
    1a6a:	21 f4       	brne	.+8      	; 0x1a74 <vfprintf+0xe2>
    1a6c:	83 2d       	mov	r24, r3
    1a6e:	80 68       	ori	r24, 0x80	; 128
    1a70:	38 2e       	mov	r3, r24
    1a72:	02 c0       	rjmp	.+4      	; 0x1a78 <vfprintf+0xe6>
    1a74:	88 36       	cpi	r24, 0x68	; 104
    1a76:	41 f4       	brne	.+16     	; 0x1a88 <vfprintf+0xf6>
    1a78:	f7 01       	movw	r30, r14
    1a7a:	93 fd       	sbrc	r25, 3
    1a7c:	85 91       	lpm	r24, Z+
    1a7e:	93 ff       	sbrs	r25, 3
    1a80:	81 91       	ld	r24, Z+
    1a82:	7f 01       	movw	r14, r30
    1a84:	81 11       	cpse	r24, r1
    1a86:	b3 cf       	rjmp	.-154    	; 0x19ee <vfprintf+0x5c>
    1a88:	98 2f       	mov	r25, r24
    1a8a:	9f 7d       	andi	r25, 0xDF	; 223
    1a8c:	95 54       	subi	r25, 0x45	; 69
    1a8e:	93 30       	cpi	r25, 0x03	; 3
    1a90:	28 f4       	brcc	.+10     	; 0x1a9c <vfprintf+0x10a>
    1a92:	0c 5f       	subi	r16, 0xFC	; 252
    1a94:	1f 4f       	sbci	r17, 0xFF	; 255
    1a96:	9f e3       	ldi	r25, 0x3F	; 63
    1a98:	99 83       	std	Y+1, r25	; 0x01
    1a9a:	0d c0       	rjmp	.+26     	; 0x1ab6 <vfprintf+0x124>
    1a9c:	83 36       	cpi	r24, 0x63	; 99
    1a9e:	31 f0       	breq	.+12     	; 0x1aac <vfprintf+0x11a>
    1aa0:	83 37       	cpi	r24, 0x73	; 115
    1aa2:	71 f0       	breq	.+28     	; 0x1ac0 <vfprintf+0x12e>
    1aa4:	83 35       	cpi	r24, 0x53	; 83
    1aa6:	09 f0       	breq	.+2      	; 0x1aaa <vfprintf+0x118>
    1aa8:	59 c0       	rjmp	.+178    	; 0x1b5c <vfprintf+0x1ca>
    1aaa:	21 c0       	rjmp	.+66     	; 0x1aee <vfprintf+0x15c>
    1aac:	f8 01       	movw	r30, r16
    1aae:	80 81       	ld	r24, Z
    1ab0:	89 83       	std	Y+1, r24	; 0x01
    1ab2:	0e 5f       	subi	r16, 0xFE	; 254
    1ab4:	1f 4f       	sbci	r17, 0xFF	; 255
    1ab6:	88 24       	eor	r8, r8
    1ab8:	83 94       	inc	r8
    1aba:	91 2c       	mov	r9, r1
    1abc:	53 01       	movw	r10, r6
    1abe:	13 c0       	rjmp	.+38     	; 0x1ae6 <vfprintf+0x154>
    1ac0:	28 01       	movw	r4, r16
    1ac2:	f2 e0       	ldi	r31, 0x02	; 2
    1ac4:	4f 0e       	add	r4, r31
    1ac6:	51 1c       	adc	r5, r1
    1ac8:	f8 01       	movw	r30, r16
    1aca:	a0 80       	ld	r10, Z
    1acc:	b1 80       	ldd	r11, Z+1	; 0x01
    1ace:	36 fe       	sbrs	r3, 6
    1ad0:	03 c0       	rjmp	.+6      	; 0x1ad8 <vfprintf+0x146>
    1ad2:	69 2d       	mov	r22, r9
    1ad4:	70 e0       	ldi	r23, 0x00	; 0
    1ad6:	02 c0       	rjmp	.+4      	; 0x1adc <vfprintf+0x14a>
    1ad8:	6f ef       	ldi	r22, 0xFF	; 255
    1ada:	7f ef       	ldi	r23, 0xFF	; 255
    1adc:	c5 01       	movw	r24, r10
    1ade:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <strnlen>
    1ae2:	4c 01       	movw	r8, r24
    1ae4:	82 01       	movw	r16, r4
    1ae6:	f3 2d       	mov	r31, r3
    1ae8:	ff 77       	andi	r31, 0x7F	; 127
    1aea:	3f 2e       	mov	r3, r31
    1aec:	16 c0       	rjmp	.+44     	; 0x1b1a <vfprintf+0x188>
    1aee:	28 01       	movw	r4, r16
    1af0:	22 e0       	ldi	r18, 0x02	; 2
    1af2:	42 0e       	add	r4, r18
    1af4:	51 1c       	adc	r5, r1
    1af6:	f8 01       	movw	r30, r16
    1af8:	a0 80       	ld	r10, Z
    1afa:	b1 80       	ldd	r11, Z+1	; 0x01
    1afc:	36 fe       	sbrs	r3, 6
    1afe:	03 c0       	rjmp	.+6      	; 0x1b06 <vfprintf+0x174>
    1b00:	69 2d       	mov	r22, r9
    1b02:	70 e0       	ldi	r23, 0x00	; 0
    1b04:	02 c0       	rjmp	.+4      	; 0x1b0a <vfprintf+0x178>
    1b06:	6f ef       	ldi	r22, 0xFF	; 255
    1b08:	7f ef       	ldi	r23, 0xFF	; 255
    1b0a:	c5 01       	movw	r24, r10
    1b0c:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <strnlen_P>
    1b10:	4c 01       	movw	r8, r24
    1b12:	f3 2d       	mov	r31, r3
    1b14:	f0 68       	ori	r31, 0x80	; 128
    1b16:	3f 2e       	mov	r3, r31
    1b18:	82 01       	movw	r16, r4
    1b1a:	33 fc       	sbrc	r3, 3
    1b1c:	1b c0       	rjmp	.+54     	; 0x1b54 <vfprintf+0x1c2>
    1b1e:	82 2d       	mov	r24, r2
    1b20:	90 e0       	ldi	r25, 0x00	; 0
    1b22:	88 16       	cp	r8, r24
    1b24:	99 06       	cpc	r9, r25
    1b26:	b0 f4       	brcc	.+44     	; 0x1b54 <vfprintf+0x1c2>
    1b28:	b6 01       	movw	r22, r12
    1b2a:	80 e2       	ldi	r24, 0x20	; 32
    1b2c:	90 e0       	ldi	r25, 0x00	; 0
    1b2e:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <fputc>
    1b32:	2a 94       	dec	r2
    1b34:	f4 cf       	rjmp	.-24     	; 0x1b1e <vfprintf+0x18c>
    1b36:	f5 01       	movw	r30, r10
    1b38:	37 fc       	sbrc	r3, 7
    1b3a:	85 91       	lpm	r24, Z+
    1b3c:	37 fe       	sbrs	r3, 7
    1b3e:	81 91       	ld	r24, Z+
    1b40:	5f 01       	movw	r10, r30
    1b42:	b6 01       	movw	r22, r12
    1b44:	90 e0       	ldi	r25, 0x00	; 0
    1b46:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <fputc>
    1b4a:	21 10       	cpse	r2, r1
    1b4c:	2a 94       	dec	r2
    1b4e:	21 e0       	ldi	r18, 0x01	; 1
    1b50:	82 1a       	sub	r8, r18
    1b52:	91 08       	sbc	r9, r1
    1b54:	81 14       	cp	r8, r1
    1b56:	91 04       	cpc	r9, r1
    1b58:	71 f7       	brne	.-36     	; 0x1b36 <vfprintf+0x1a4>
    1b5a:	e8 c0       	rjmp	.+464    	; 0x1d2c <vfprintf+0x39a>
    1b5c:	84 36       	cpi	r24, 0x64	; 100
    1b5e:	11 f0       	breq	.+4      	; 0x1b64 <vfprintf+0x1d2>
    1b60:	89 36       	cpi	r24, 0x69	; 105
    1b62:	41 f5       	brne	.+80     	; 0x1bb4 <vfprintf+0x222>
    1b64:	f8 01       	movw	r30, r16
    1b66:	37 fe       	sbrs	r3, 7
    1b68:	07 c0       	rjmp	.+14     	; 0x1b78 <vfprintf+0x1e6>
    1b6a:	60 81       	ld	r22, Z
    1b6c:	71 81       	ldd	r23, Z+1	; 0x01
    1b6e:	82 81       	ldd	r24, Z+2	; 0x02
    1b70:	93 81       	ldd	r25, Z+3	; 0x03
    1b72:	0c 5f       	subi	r16, 0xFC	; 252
    1b74:	1f 4f       	sbci	r17, 0xFF	; 255
    1b76:	08 c0       	rjmp	.+16     	; 0x1b88 <vfprintf+0x1f6>
    1b78:	60 81       	ld	r22, Z
    1b7a:	71 81       	ldd	r23, Z+1	; 0x01
    1b7c:	07 2e       	mov	r0, r23
    1b7e:	00 0c       	add	r0, r0
    1b80:	88 0b       	sbc	r24, r24
    1b82:	99 0b       	sbc	r25, r25
    1b84:	0e 5f       	subi	r16, 0xFE	; 254
    1b86:	1f 4f       	sbci	r17, 0xFF	; 255
    1b88:	f3 2d       	mov	r31, r3
    1b8a:	ff 76       	andi	r31, 0x6F	; 111
    1b8c:	3f 2e       	mov	r3, r31
    1b8e:	97 ff       	sbrs	r25, 7
    1b90:	09 c0       	rjmp	.+18     	; 0x1ba4 <vfprintf+0x212>
    1b92:	90 95       	com	r25
    1b94:	80 95       	com	r24
    1b96:	70 95       	com	r23
    1b98:	61 95       	neg	r22
    1b9a:	7f 4f       	sbci	r23, 0xFF	; 255
    1b9c:	8f 4f       	sbci	r24, 0xFF	; 255
    1b9e:	9f 4f       	sbci	r25, 0xFF	; 255
    1ba0:	f0 68       	ori	r31, 0x80	; 128
    1ba2:	3f 2e       	mov	r3, r31
    1ba4:	2a e0       	ldi	r18, 0x0A	; 10
    1ba6:	30 e0       	ldi	r19, 0x00	; 0
    1ba8:	a3 01       	movw	r20, r6
    1baa:	0e 94 39 10 	call	0x2072	; 0x2072 <__ultoa_invert>
    1bae:	88 2e       	mov	r8, r24
    1bb0:	86 18       	sub	r8, r6
    1bb2:	45 c0       	rjmp	.+138    	; 0x1c3e <vfprintf+0x2ac>
    1bb4:	85 37       	cpi	r24, 0x75	; 117
    1bb6:	31 f4       	brne	.+12     	; 0x1bc4 <vfprintf+0x232>
    1bb8:	23 2d       	mov	r18, r3
    1bba:	2f 7e       	andi	r18, 0xEF	; 239
    1bbc:	b2 2e       	mov	r11, r18
    1bbe:	2a e0       	ldi	r18, 0x0A	; 10
    1bc0:	30 e0       	ldi	r19, 0x00	; 0
    1bc2:	25 c0       	rjmp	.+74     	; 0x1c0e <vfprintf+0x27c>
    1bc4:	93 2d       	mov	r25, r3
    1bc6:	99 7f       	andi	r25, 0xF9	; 249
    1bc8:	b9 2e       	mov	r11, r25
    1bca:	8f 36       	cpi	r24, 0x6F	; 111
    1bcc:	c1 f0       	breq	.+48     	; 0x1bfe <vfprintf+0x26c>
    1bce:	18 f4       	brcc	.+6      	; 0x1bd6 <vfprintf+0x244>
    1bd0:	88 35       	cpi	r24, 0x58	; 88
    1bd2:	79 f0       	breq	.+30     	; 0x1bf2 <vfprintf+0x260>
    1bd4:	b5 c0       	rjmp	.+362    	; 0x1d40 <vfprintf+0x3ae>
    1bd6:	80 37       	cpi	r24, 0x70	; 112
    1bd8:	19 f0       	breq	.+6      	; 0x1be0 <vfprintf+0x24e>
    1bda:	88 37       	cpi	r24, 0x78	; 120
    1bdc:	21 f0       	breq	.+8      	; 0x1be6 <vfprintf+0x254>
    1bde:	b0 c0       	rjmp	.+352    	; 0x1d40 <vfprintf+0x3ae>
    1be0:	e9 2f       	mov	r30, r25
    1be2:	e0 61       	ori	r30, 0x10	; 16
    1be4:	be 2e       	mov	r11, r30
    1be6:	b4 fe       	sbrs	r11, 4
    1be8:	0d c0       	rjmp	.+26     	; 0x1c04 <vfprintf+0x272>
    1bea:	fb 2d       	mov	r31, r11
    1bec:	f4 60       	ori	r31, 0x04	; 4
    1bee:	bf 2e       	mov	r11, r31
    1bf0:	09 c0       	rjmp	.+18     	; 0x1c04 <vfprintf+0x272>
    1bf2:	34 fe       	sbrs	r3, 4
    1bf4:	0a c0       	rjmp	.+20     	; 0x1c0a <vfprintf+0x278>
    1bf6:	29 2f       	mov	r18, r25
    1bf8:	26 60       	ori	r18, 0x06	; 6
    1bfa:	b2 2e       	mov	r11, r18
    1bfc:	06 c0       	rjmp	.+12     	; 0x1c0a <vfprintf+0x278>
    1bfe:	28 e0       	ldi	r18, 0x08	; 8
    1c00:	30 e0       	ldi	r19, 0x00	; 0
    1c02:	05 c0       	rjmp	.+10     	; 0x1c0e <vfprintf+0x27c>
    1c04:	20 e1       	ldi	r18, 0x10	; 16
    1c06:	30 e0       	ldi	r19, 0x00	; 0
    1c08:	02 c0       	rjmp	.+4      	; 0x1c0e <vfprintf+0x27c>
    1c0a:	20 e1       	ldi	r18, 0x10	; 16
    1c0c:	32 e0       	ldi	r19, 0x02	; 2
    1c0e:	f8 01       	movw	r30, r16
    1c10:	b7 fe       	sbrs	r11, 7
    1c12:	07 c0       	rjmp	.+14     	; 0x1c22 <vfprintf+0x290>
    1c14:	60 81       	ld	r22, Z
    1c16:	71 81       	ldd	r23, Z+1	; 0x01
    1c18:	82 81       	ldd	r24, Z+2	; 0x02
    1c1a:	93 81       	ldd	r25, Z+3	; 0x03
    1c1c:	0c 5f       	subi	r16, 0xFC	; 252
    1c1e:	1f 4f       	sbci	r17, 0xFF	; 255
    1c20:	06 c0       	rjmp	.+12     	; 0x1c2e <vfprintf+0x29c>
    1c22:	60 81       	ld	r22, Z
    1c24:	71 81       	ldd	r23, Z+1	; 0x01
    1c26:	80 e0       	ldi	r24, 0x00	; 0
    1c28:	90 e0       	ldi	r25, 0x00	; 0
    1c2a:	0e 5f       	subi	r16, 0xFE	; 254
    1c2c:	1f 4f       	sbci	r17, 0xFF	; 255
    1c2e:	a3 01       	movw	r20, r6
    1c30:	0e 94 39 10 	call	0x2072	; 0x2072 <__ultoa_invert>
    1c34:	88 2e       	mov	r8, r24
    1c36:	86 18       	sub	r8, r6
    1c38:	fb 2d       	mov	r31, r11
    1c3a:	ff 77       	andi	r31, 0x7F	; 127
    1c3c:	3f 2e       	mov	r3, r31
    1c3e:	36 fe       	sbrs	r3, 6
    1c40:	0d c0       	rjmp	.+26     	; 0x1c5c <vfprintf+0x2ca>
    1c42:	23 2d       	mov	r18, r3
    1c44:	2e 7f       	andi	r18, 0xFE	; 254
    1c46:	a2 2e       	mov	r10, r18
    1c48:	89 14       	cp	r8, r9
    1c4a:	58 f4       	brcc	.+22     	; 0x1c62 <vfprintf+0x2d0>
    1c4c:	34 fe       	sbrs	r3, 4
    1c4e:	0b c0       	rjmp	.+22     	; 0x1c66 <vfprintf+0x2d4>
    1c50:	32 fc       	sbrc	r3, 2
    1c52:	09 c0       	rjmp	.+18     	; 0x1c66 <vfprintf+0x2d4>
    1c54:	83 2d       	mov	r24, r3
    1c56:	8e 7e       	andi	r24, 0xEE	; 238
    1c58:	a8 2e       	mov	r10, r24
    1c5a:	05 c0       	rjmp	.+10     	; 0x1c66 <vfprintf+0x2d4>
    1c5c:	b8 2c       	mov	r11, r8
    1c5e:	a3 2c       	mov	r10, r3
    1c60:	03 c0       	rjmp	.+6      	; 0x1c68 <vfprintf+0x2d6>
    1c62:	b8 2c       	mov	r11, r8
    1c64:	01 c0       	rjmp	.+2      	; 0x1c68 <vfprintf+0x2d6>
    1c66:	b9 2c       	mov	r11, r9
    1c68:	a4 fe       	sbrs	r10, 4
    1c6a:	0f c0       	rjmp	.+30     	; 0x1c8a <vfprintf+0x2f8>
    1c6c:	fe 01       	movw	r30, r28
    1c6e:	e8 0d       	add	r30, r8
    1c70:	f1 1d       	adc	r31, r1
    1c72:	80 81       	ld	r24, Z
    1c74:	80 33       	cpi	r24, 0x30	; 48
    1c76:	21 f4       	brne	.+8      	; 0x1c80 <vfprintf+0x2ee>
    1c78:	9a 2d       	mov	r25, r10
    1c7a:	99 7e       	andi	r25, 0xE9	; 233
    1c7c:	a9 2e       	mov	r10, r25
    1c7e:	09 c0       	rjmp	.+18     	; 0x1c92 <vfprintf+0x300>
    1c80:	a2 fe       	sbrs	r10, 2
    1c82:	06 c0       	rjmp	.+12     	; 0x1c90 <vfprintf+0x2fe>
    1c84:	b3 94       	inc	r11
    1c86:	b3 94       	inc	r11
    1c88:	04 c0       	rjmp	.+8      	; 0x1c92 <vfprintf+0x300>
    1c8a:	8a 2d       	mov	r24, r10
    1c8c:	86 78       	andi	r24, 0x86	; 134
    1c8e:	09 f0       	breq	.+2      	; 0x1c92 <vfprintf+0x300>
    1c90:	b3 94       	inc	r11
    1c92:	a3 fc       	sbrc	r10, 3
    1c94:	11 c0       	rjmp	.+34     	; 0x1cb8 <vfprintf+0x326>
    1c96:	a0 fe       	sbrs	r10, 0
    1c98:	06 c0       	rjmp	.+12     	; 0x1ca6 <vfprintf+0x314>
    1c9a:	b2 14       	cp	r11, r2
    1c9c:	88 f4       	brcc	.+34     	; 0x1cc0 <vfprintf+0x32e>
    1c9e:	28 0c       	add	r2, r8
    1ca0:	92 2c       	mov	r9, r2
    1ca2:	9b 18       	sub	r9, r11
    1ca4:	0e c0       	rjmp	.+28     	; 0x1cc2 <vfprintf+0x330>
    1ca6:	b2 14       	cp	r11, r2
    1ca8:	60 f4       	brcc	.+24     	; 0x1cc2 <vfprintf+0x330>
    1caa:	b6 01       	movw	r22, r12
    1cac:	80 e2       	ldi	r24, 0x20	; 32
    1cae:	90 e0       	ldi	r25, 0x00	; 0
    1cb0:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <fputc>
    1cb4:	b3 94       	inc	r11
    1cb6:	f7 cf       	rjmp	.-18     	; 0x1ca6 <vfprintf+0x314>
    1cb8:	b2 14       	cp	r11, r2
    1cba:	18 f4       	brcc	.+6      	; 0x1cc2 <vfprintf+0x330>
    1cbc:	2b 18       	sub	r2, r11
    1cbe:	02 c0       	rjmp	.+4      	; 0x1cc4 <vfprintf+0x332>
    1cc0:	98 2c       	mov	r9, r8
    1cc2:	21 2c       	mov	r2, r1
    1cc4:	a4 fe       	sbrs	r10, 4
    1cc6:	10 c0       	rjmp	.+32     	; 0x1ce8 <vfprintf+0x356>
    1cc8:	b6 01       	movw	r22, r12
    1cca:	80 e3       	ldi	r24, 0x30	; 48
    1ccc:	90 e0       	ldi	r25, 0x00	; 0
    1cce:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <fputc>
    1cd2:	a2 fe       	sbrs	r10, 2
    1cd4:	17 c0       	rjmp	.+46     	; 0x1d04 <vfprintf+0x372>
    1cd6:	a1 fc       	sbrc	r10, 1
    1cd8:	03 c0       	rjmp	.+6      	; 0x1ce0 <vfprintf+0x34e>
    1cda:	88 e7       	ldi	r24, 0x78	; 120
    1cdc:	90 e0       	ldi	r25, 0x00	; 0
    1cde:	02 c0       	rjmp	.+4      	; 0x1ce4 <vfprintf+0x352>
    1ce0:	88 e5       	ldi	r24, 0x58	; 88
    1ce2:	90 e0       	ldi	r25, 0x00	; 0
    1ce4:	b6 01       	movw	r22, r12
    1ce6:	0c c0       	rjmp	.+24     	; 0x1d00 <vfprintf+0x36e>
    1ce8:	8a 2d       	mov	r24, r10
    1cea:	86 78       	andi	r24, 0x86	; 134
    1cec:	59 f0       	breq	.+22     	; 0x1d04 <vfprintf+0x372>
    1cee:	a1 fe       	sbrs	r10, 1
    1cf0:	02 c0       	rjmp	.+4      	; 0x1cf6 <vfprintf+0x364>
    1cf2:	8b e2       	ldi	r24, 0x2B	; 43
    1cf4:	01 c0       	rjmp	.+2      	; 0x1cf8 <vfprintf+0x366>
    1cf6:	80 e2       	ldi	r24, 0x20	; 32
    1cf8:	a7 fc       	sbrc	r10, 7
    1cfa:	8d e2       	ldi	r24, 0x2D	; 45
    1cfc:	b6 01       	movw	r22, r12
    1cfe:	90 e0       	ldi	r25, 0x00	; 0
    1d00:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <fputc>
    1d04:	89 14       	cp	r8, r9
    1d06:	38 f4       	brcc	.+14     	; 0x1d16 <vfprintf+0x384>
    1d08:	b6 01       	movw	r22, r12
    1d0a:	80 e3       	ldi	r24, 0x30	; 48
    1d0c:	90 e0       	ldi	r25, 0x00	; 0
    1d0e:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <fputc>
    1d12:	9a 94       	dec	r9
    1d14:	f7 cf       	rjmp	.-18     	; 0x1d04 <vfprintf+0x372>
    1d16:	8a 94       	dec	r8
    1d18:	f3 01       	movw	r30, r6
    1d1a:	e8 0d       	add	r30, r8
    1d1c:	f1 1d       	adc	r31, r1
    1d1e:	80 81       	ld	r24, Z
    1d20:	b6 01       	movw	r22, r12
    1d22:	90 e0       	ldi	r25, 0x00	; 0
    1d24:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <fputc>
    1d28:	81 10       	cpse	r8, r1
    1d2a:	f5 cf       	rjmp	.-22     	; 0x1d16 <vfprintf+0x384>
    1d2c:	22 20       	and	r2, r2
    1d2e:	09 f4       	brne	.+2      	; 0x1d32 <vfprintf+0x3a0>
    1d30:	42 ce       	rjmp	.-892    	; 0x19b6 <vfprintf+0x24>
    1d32:	b6 01       	movw	r22, r12
    1d34:	80 e2       	ldi	r24, 0x20	; 32
    1d36:	90 e0       	ldi	r25, 0x00	; 0
    1d38:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <fputc>
    1d3c:	2a 94       	dec	r2
    1d3e:	f6 cf       	rjmp	.-20     	; 0x1d2c <vfprintf+0x39a>
    1d40:	f6 01       	movw	r30, r12
    1d42:	86 81       	ldd	r24, Z+6	; 0x06
    1d44:	97 81       	ldd	r25, Z+7	; 0x07
    1d46:	02 c0       	rjmp	.+4      	; 0x1d4c <vfprintf+0x3ba>
    1d48:	8f ef       	ldi	r24, 0xFF	; 255
    1d4a:	9f ef       	ldi	r25, 0xFF	; 255
    1d4c:	2b 96       	adiw	r28, 0x0b	; 11
    1d4e:	e2 e1       	ldi	r30, 0x12	; 18
    1d50:	0c 94 b0 10 	jmp	0x2160	; 0x2160 <__epilogue_restores__>

00001d54 <calloc>:
    1d54:	0f 93       	push	r16
    1d56:	1f 93       	push	r17
    1d58:	cf 93       	push	r28
    1d5a:	df 93       	push	r29
    1d5c:	86 9f       	mul	r24, r22
    1d5e:	80 01       	movw	r16, r0
    1d60:	87 9f       	mul	r24, r23
    1d62:	10 0d       	add	r17, r0
    1d64:	96 9f       	mul	r25, r22
    1d66:	10 0d       	add	r17, r0
    1d68:	11 24       	eor	r1, r1
    1d6a:	c8 01       	movw	r24, r16
    1d6c:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <malloc>
    1d70:	ec 01       	movw	r28, r24
    1d72:	00 97       	sbiw	r24, 0x00	; 0
    1d74:	29 f0       	breq	.+10     	; 0x1d80 <calloc+0x2c>
    1d76:	a8 01       	movw	r20, r16
    1d78:	60 e0       	ldi	r22, 0x00	; 0
    1d7a:	70 e0       	ldi	r23, 0x00	; 0
    1d7c:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <memset>
    1d80:	ce 01       	movw	r24, r28
    1d82:	df 91       	pop	r29
    1d84:	cf 91       	pop	r28
    1d86:	1f 91       	pop	r17
    1d88:	0f 91       	pop	r16
    1d8a:	08 95       	ret

00001d8c <malloc>:
    1d8c:	0f 93       	push	r16
    1d8e:	1f 93       	push	r17
    1d90:	cf 93       	push	r28
    1d92:	df 93       	push	r29
    1d94:	82 30       	cpi	r24, 0x02	; 2
    1d96:	91 05       	cpc	r25, r1
    1d98:	10 f4       	brcc	.+4      	; 0x1d9e <malloc+0x12>
    1d9a:	82 e0       	ldi	r24, 0x02	; 2
    1d9c:	90 e0       	ldi	r25, 0x00	; 0
    1d9e:	e0 91 8f 29 	lds	r30, 0x298F	; 0x80298f <__flp>
    1da2:	f0 91 90 29 	lds	r31, 0x2990	; 0x802990 <__flp+0x1>
    1da6:	20 e0       	ldi	r18, 0x00	; 0
    1da8:	30 e0       	ldi	r19, 0x00	; 0
    1daa:	a0 e0       	ldi	r26, 0x00	; 0
    1dac:	b0 e0       	ldi	r27, 0x00	; 0
    1dae:	30 97       	sbiw	r30, 0x00	; 0
    1db0:	19 f1       	breq	.+70     	; 0x1df8 <malloc+0x6c>
    1db2:	40 81       	ld	r20, Z
    1db4:	51 81       	ldd	r21, Z+1	; 0x01
    1db6:	02 81       	ldd	r16, Z+2	; 0x02
    1db8:	13 81       	ldd	r17, Z+3	; 0x03
    1dba:	48 17       	cp	r20, r24
    1dbc:	59 07       	cpc	r21, r25
    1dbe:	c8 f0       	brcs	.+50     	; 0x1df2 <malloc+0x66>
    1dc0:	84 17       	cp	r24, r20
    1dc2:	95 07       	cpc	r25, r21
    1dc4:	69 f4       	brne	.+26     	; 0x1de0 <malloc+0x54>
    1dc6:	10 97       	sbiw	r26, 0x00	; 0
    1dc8:	31 f0       	breq	.+12     	; 0x1dd6 <malloc+0x4a>
    1dca:	12 96       	adiw	r26, 0x02	; 2
    1dcc:	0c 93       	st	X, r16
    1dce:	12 97       	sbiw	r26, 0x02	; 2
    1dd0:	13 96       	adiw	r26, 0x03	; 3
    1dd2:	1c 93       	st	X, r17
    1dd4:	27 c0       	rjmp	.+78     	; 0x1e24 <malloc+0x98>
    1dd6:	00 93 8f 29 	sts	0x298F, r16	; 0x80298f <__flp>
    1dda:	10 93 90 29 	sts	0x2990, r17	; 0x802990 <__flp+0x1>
    1dde:	22 c0       	rjmp	.+68     	; 0x1e24 <malloc+0x98>
    1de0:	21 15       	cp	r18, r1
    1de2:	31 05       	cpc	r19, r1
    1de4:	19 f0       	breq	.+6      	; 0x1dec <malloc+0x60>
    1de6:	42 17       	cp	r20, r18
    1de8:	53 07       	cpc	r21, r19
    1dea:	18 f4       	brcc	.+6      	; 0x1df2 <malloc+0x66>
    1dec:	9a 01       	movw	r18, r20
    1dee:	bd 01       	movw	r22, r26
    1df0:	ef 01       	movw	r28, r30
    1df2:	df 01       	movw	r26, r30
    1df4:	f8 01       	movw	r30, r16
    1df6:	db cf       	rjmp	.-74     	; 0x1dae <malloc+0x22>
    1df8:	21 15       	cp	r18, r1
    1dfa:	31 05       	cpc	r19, r1
    1dfc:	f9 f0       	breq	.+62     	; 0x1e3c <malloc+0xb0>
    1dfe:	28 1b       	sub	r18, r24
    1e00:	39 0b       	sbc	r19, r25
    1e02:	24 30       	cpi	r18, 0x04	; 4
    1e04:	31 05       	cpc	r19, r1
    1e06:	80 f4       	brcc	.+32     	; 0x1e28 <malloc+0x9c>
    1e08:	8a 81       	ldd	r24, Y+2	; 0x02
    1e0a:	9b 81       	ldd	r25, Y+3	; 0x03
    1e0c:	61 15       	cp	r22, r1
    1e0e:	71 05       	cpc	r23, r1
    1e10:	21 f0       	breq	.+8      	; 0x1e1a <malloc+0x8e>
    1e12:	fb 01       	movw	r30, r22
    1e14:	82 83       	std	Z+2, r24	; 0x02
    1e16:	93 83       	std	Z+3, r25	; 0x03
    1e18:	04 c0       	rjmp	.+8      	; 0x1e22 <malloc+0x96>
    1e1a:	80 93 8f 29 	sts	0x298F, r24	; 0x80298f <__flp>
    1e1e:	90 93 90 29 	sts	0x2990, r25	; 0x802990 <__flp+0x1>
    1e22:	fe 01       	movw	r30, r28
    1e24:	32 96       	adiw	r30, 0x02	; 2
    1e26:	44 c0       	rjmp	.+136    	; 0x1eb0 <malloc+0x124>
    1e28:	fe 01       	movw	r30, r28
    1e2a:	e2 0f       	add	r30, r18
    1e2c:	f3 1f       	adc	r31, r19
    1e2e:	81 93       	st	Z+, r24
    1e30:	91 93       	st	Z+, r25
    1e32:	22 50       	subi	r18, 0x02	; 2
    1e34:	31 09       	sbc	r19, r1
    1e36:	28 83       	st	Y, r18
    1e38:	39 83       	std	Y+1, r19	; 0x01
    1e3a:	3a c0       	rjmp	.+116    	; 0x1eb0 <malloc+0x124>
    1e3c:	20 91 8d 29 	lds	r18, 0x298D	; 0x80298d <__brkval>
    1e40:	30 91 8e 29 	lds	r19, 0x298E	; 0x80298e <__brkval+0x1>
    1e44:	23 2b       	or	r18, r19
    1e46:	41 f4       	brne	.+16     	; 0x1e58 <malloc+0xcc>
    1e48:	20 91 02 28 	lds	r18, 0x2802	; 0x802802 <__malloc_heap_start>
    1e4c:	30 91 03 28 	lds	r19, 0x2803	; 0x802803 <__malloc_heap_start+0x1>
    1e50:	20 93 8d 29 	sts	0x298D, r18	; 0x80298d <__brkval>
    1e54:	30 93 8e 29 	sts	0x298E, r19	; 0x80298e <__brkval+0x1>
    1e58:	20 91 00 28 	lds	r18, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
    1e5c:	30 91 01 28 	lds	r19, 0x2801	; 0x802801 <__DATA_REGION_ORIGIN__+0x1>
    1e60:	21 15       	cp	r18, r1
    1e62:	31 05       	cpc	r19, r1
    1e64:	41 f4       	brne	.+16     	; 0x1e76 <malloc+0xea>
    1e66:	2d b7       	in	r18, 0x3d	; 61
    1e68:	3e b7       	in	r19, 0x3e	; 62
    1e6a:	40 91 04 28 	lds	r20, 0x2804	; 0x802804 <__malloc_margin>
    1e6e:	50 91 05 28 	lds	r21, 0x2805	; 0x802805 <__malloc_margin+0x1>
    1e72:	24 1b       	sub	r18, r20
    1e74:	35 0b       	sbc	r19, r21
    1e76:	e0 91 8d 29 	lds	r30, 0x298D	; 0x80298d <__brkval>
    1e7a:	f0 91 8e 29 	lds	r31, 0x298E	; 0x80298e <__brkval+0x1>
    1e7e:	e2 17       	cp	r30, r18
    1e80:	f3 07       	cpc	r31, r19
    1e82:	a0 f4       	brcc	.+40     	; 0x1eac <malloc+0x120>
    1e84:	2e 1b       	sub	r18, r30
    1e86:	3f 0b       	sbc	r19, r31
    1e88:	28 17       	cp	r18, r24
    1e8a:	39 07       	cpc	r19, r25
    1e8c:	78 f0       	brcs	.+30     	; 0x1eac <malloc+0x120>
    1e8e:	ac 01       	movw	r20, r24
    1e90:	4e 5f       	subi	r20, 0xFE	; 254
    1e92:	5f 4f       	sbci	r21, 0xFF	; 255
    1e94:	24 17       	cp	r18, r20
    1e96:	35 07       	cpc	r19, r21
    1e98:	48 f0       	brcs	.+18     	; 0x1eac <malloc+0x120>
    1e9a:	4e 0f       	add	r20, r30
    1e9c:	5f 1f       	adc	r21, r31
    1e9e:	40 93 8d 29 	sts	0x298D, r20	; 0x80298d <__brkval>
    1ea2:	50 93 8e 29 	sts	0x298E, r21	; 0x80298e <__brkval+0x1>
    1ea6:	81 93       	st	Z+, r24
    1ea8:	91 93       	st	Z+, r25
    1eaa:	02 c0       	rjmp	.+4      	; 0x1eb0 <malloc+0x124>
    1eac:	e0 e0       	ldi	r30, 0x00	; 0
    1eae:	f0 e0       	ldi	r31, 0x00	; 0
    1eb0:	cf 01       	movw	r24, r30
    1eb2:	df 91       	pop	r29
    1eb4:	cf 91       	pop	r28
    1eb6:	1f 91       	pop	r17
    1eb8:	0f 91       	pop	r16
    1eba:	08 95       	ret

00001ebc <free>:
    1ebc:	cf 93       	push	r28
    1ebe:	df 93       	push	r29
    1ec0:	00 97       	sbiw	r24, 0x00	; 0
    1ec2:	09 f4       	brne	.+2      	; 0x1ec6 <free+0xa>
    1ec4:	81 c0       	rjmp	.+258    	; 0x1fc8 <free+0x10c>
    1ec6:	fc 01       	movw	r30, r24
    1ec8:	32 97       	sbiw	r30, 0x02	; 2
    1eca:	12 82       	std	Z+2, r1	; 0x02
    1ecc:	13 82       	std	Z+3, r1	; 0x03
    1ece:	a0 91 8f 29 	lds	r26, 0x298F	; 0x80298f <__flp>
    1ed2:	b0 91 90 29 	lds	r27, 0x2990	; 0x802990 <__flp+0x1>
    1ed6:	10 97       	sbiw	r26, 0x00	; 0
    1ed8:	81 f4       	brne	.+32     	; 0x1efa <free+0x3e>
    1eda:	20 81       	ld	r18, Z
    1edc:	31 81       	ldd	r19, Z+1	; 0x01
    1ede:	82 0f       	add	r24, r18
    1ee0:	93 1f       	adc	r25, r19
    1ee2:	20 91 8d 29 	lds	r18, 0x298D	; 0x80298d <__brkval>
    1ee6:	30 91 8e 29 	lds	r19, 0x298E	; 0x80298e <__brkval+0x1>
    1eea:	28 17       	cp	r18, r24
    1eec:	39 07       	cpc	r19, r25
    1eee:	51 f5       	brne	.+84     	; 0x1f44 <free+0x88>
    1ef0:	e0 93 8d 29 	sts	0x298D, r30	; 0x80298d <__brkval>
    1ef4:	f0 93 8e 29 	sts	0x298E, r31	; 0x80298e <__brkval+0x1>
    1ef8:	67 c0       	rjmp	.+206    	; 0x1fc8 <free+0x10c>
    1efa:	ed 01       	movw	r28, r26
    1efc:	20 e0       	ldi	r18, 0x00	; 0
    1efe:	30 e0       	ldi	r19, 0x00	; 0
    1f00:	ce 17       	cp	r28, r30
    1f02:	df 07       	cpc	r29, r31
    1f04:	40 f4       	brcc	.+16     	; 0x1f16 <free+0x5a>
    1f06:	4a 81       	ldd	r20, Y+2	; 0x02
    1f08:	5b 81       	ldd	r21, Y+3	; 0x03
    1f0a:	9e 01       	movw	r18, r28
    1f0c:	41 15       	cp	r20, r1
    1f0e:	51 05       	cpc	r21, r1
    1f10:	f1 f0       	breq	.+60     	; 0x1f4e <free+0x92>
    1f12:	ea 01       	movw	r28, r20
    1f14:	f5 cf       	rjmp	.-22     	; 0x1f00 <free+0x44>
    1f16:	c2 83       	std	Z+2, r28	; 0x02
    1f18:	d3 83       	std	Z+3, r29	; 0x03
    1f1a:	40 81       	ld	r20, Z
    1f1c:	51 81       	ldd	r21, Z+1	; 0x01
    1f1e:	84 0f       	add	r24, r20
    1f20:	95 1f       	adc	r25, r21
    1f22:	c8 17       	cp	r28, r24
    1f24:	d9 07       	cpc	r29, r25
    1f26:	59 f4       	brne	.+22     	; 0x1f3e <free+0x82>
    1f28:	88 81       	ld	r24, Y
    1f2a:	99 81       	ldd	r25, Y+1	; 0x01
    1f2c:	84 0f       	add	r24, r20
    1f2e:	95 1f       	adc	r25, r21
    1f30:	02 96       	adiw	r24, 0x02	; 2
    1f32:	80 83       	st	Z, r24
    1f34:	91 83       	std	Z+1, r25	; 0x01
    1f36:	8a 81       	ldd	r24, Y+2	; 0x02
    1f38:	9b 81       	ldd	r25, Y+3	; 0x03
    1f3a:	82 83       	std	Z+2, r24	; 0x02
    1f3c:	93 83       	std	Z+3, r25	; 0x03
    1f3e:	21 15       	cp	r18, r1
    1f40:	31 05       	cpc	r19, r1
    1f42:	29 f4       	brne	.+10     	; 0x1f4e <free+0x92>
    1f44:	e0 93 8f 29 	sts	0x298F, r30	; 0x80298f <__flp>
    1f48:	f0 93 90 29 	sts	0x2990, r31	; 0x802990 <__flp+0x1>
    1f4c:	3d c0       	rjmp	.+122    	; 0x1fc8 <free+0x10c>
    1f4e:	e9 01       	movw	r28, r18
    1f50:	ea 83       	std	Y+2, r30	; 0x02
    1f52:	fb 83       	std	Y+3, r31	; 0x03
    1f54:	49 91       	ld	r20, Y+
    1f56:	59 91       	ld	r21, Y+
    1f58:	c4 0f       	add	r28, r20
    1f5a:	d5 1f       	adc	r29, r21
    1f5c:	ec 17       	cp	r30, r28
    1f5e:	fd 07       	cpc	r31, r29
    1f60:	61 f4       	brne	.+24     	; 0x1f7a <free+0xbe>
    1f62:	80 81       	ld	r24, Z
    1f64:	91 81       	ldd	r25, Z+1	; 0x01
    1f66:	84 0f       	add	r24, r20
    1f68:	95 1f       	adc	r25, r21
    1f6a:	02 96       	adiw	r24, 0x02	; 2
    1f6c:	e9 01       	movw	r28, r18
    1f6e:	88 83       	st	Y, r24
    1f70:	99 83       	std	Y+1, r25	; 0x01
    1f72:	82 81       	ldd	r24, Z+2	; 0x02
    1f74:	93 81       	ldd	r25, Z+3	; 0x03
    1f76:	8a 83       	std	Y+2, r24	; 0x02
    1f78:	9b 83       	std	Y+3, r25	; 0x03
    1f7a:	e0 e0       	ldi	r30, 0x00	; 0
    1f7c:	f0 e0       	ldi	r31, 0x00	; 0
    1f7e:	12 96       	adiw	r26, 0x02	; 2
    1f80:	8d 91       	ld	r24, X+
    1f82:	9c 91       	ld	r25, X
    1f84:	13 97       	sbiw	r26, 0x03	; 3
    1f86:	00 97       	sbiw	r24, 0x00	; 0
    1f88:	19 f0       	breq	.+6      	; 0x1f90 <free+0xd4>
    1f8a:	fd 01       	movw	r30, r26
    1f8c:	dc 01       	movw	r26, r24
    1f8e:	f7 cf       	rjmp	.-18     	; 0x1f7e <free+0xc2>
    1f90:	8d 91       	ld	r24, X+
    1f92:	9c 91       	ld	r25, X
    1f94:	11 97       	sbiw	r26, 0x01	; 1
    1f96:	9d 01       	movw	r18, r26
    1f98:	2e 5f       	subi	r18, 0xFE	; 254
    1f9a:	3f 4f       	sbci	r19, 0xFF	; 255
    1f9c:	82 0f       	add	r24, r18
    1f9e:	93 1f       	adc	r25, r19
    1fa0:	20 91 8d 29 	lds	r18, 0x298D	; 0x80298d <__brkval>
    1fa4:	30 91 8e 29 	lds	r19, 0x298E	; 0x80298e <__brkval+0x1>
    1fa8:	28 17       	cp	r18, r24
    1faa:	39 07       	cpc	r19, r25
    1fac:	69 f4       	brne	.+26     	; 0x1fc8 <free+0x10c>
    1fae:	30 97       	sbiw	r30, 0x00	; 0
    1fb0:	29 f4       	brne	.+10     	; 0x1fbc <free+0x100>
    1fb2:	10 92 8f 29 	sts	0x298F, r1	; 0x80298f <__flp>
    1fb6:	10 92 90 29 	sts	0x2990, r1	; 0x802990 <__flp+0x1>
    1fba:	02 c0       	rjmp	.+4      	; 0x1fc0 <free+0x104>
    1fbc:	12 82       	std	Z+2, r1	; 0x02
    1fbe:	13 82       	std	Z+3, r1	; 0x03
    1fc0:	a0 93 8d 29 	sts	0x298D, r26	; 0x80298d <__brkval>
    1fc4:	b0 93 8e 29 	sts	0x298E, r27	; 0x80298e <__brkval+0x1>
    1fc8:	df 91       	pop	r29
    1fca:	cf 91       	pop	r28
    1fcc:	08 95       	ret

00001fce <strnlen_P>:
    1fce:	fc 01       	movw	r30, r24
    1fd0:	05 90       	lpm	r0, Z+
    1fd2:	61 50       	subi	r22, 0x01	; 1
    1fd4:	70 40       	sbci	r23, 0x00	; 0
    1fd6:	01 10       	cpse	r0, r1
    1fd8:	d8 f7       	brcc	.-10     	; 0x1fd0 <strnlen_P+0x2>
    1fda:	80 95       	com	r24
    1fdc:	90 95       	com	r25
    1fde:	8e 0f       	add	r24, r30
    1fe0:	9f 1f       	adc	r25, r31
    1fe2:	08 95       	ret

00001fe4 <strnlen>:
    1fe4:	fc 01       	movw	r30, r24
    1fe6:	61 50       	subi	r22, 0x01	; 1
    1fe8:	70 40       	sbci	r23, 0x00	; 0
    1fea:	01 90       	ld	r0, Z+
    1fec:	01 10       	cpse	r0, r1
    1fee:	d8 f7       	brcc	.-10     	; 0x1fe6 <strnlen+0x2>
    1ff0:	80 95       	com	r24
    1ff2:	90 95       	com	r25
    1ff4:	8e 0f       	add	r24, r30
    1ff6:	9f 1f       	adc	r25, r31
    1ff8:	08 95       	ret

00001ffa <fputc>:
    1ffa:	0f 93       	push	r16
    1ffc:	1f 93       	push	r17
    1ffe:	cf 93       	push	r28
    2000:	df 93       	push	r29
    2002:	fb 01       	movw	r30, r22
    2004:	23 81       	ldd	r18, Z+3	; 0x03
    2006:	21 fd       	sbrc	r18, 1
    2008:	03 c0       	rjmp	.+6      	; 0x2010 <fputc+0x16>
    200a:	8f ef       	ldi	r24, 0xFF	; 255
    200c:	9f ef       	ldi	r25, 0xFF	; 255
    200e:	2c c0       	rjmp	.+88     	; 0x2068 <fputc+0x6e>
    2010:	22 ff       	sbrs	r18, 2
    2012:	16 c0       	rjmp	.+44     	; 0x2040 <fputc+0x46>
    2014:	46 81       	ldd	r20, Z+6	; 0x06
    2016:	57 81       	ldd	r21, Z+7	; 0x07
    2018:	24 81       	ldd	r18, Z+4	; 0x04
    201a:	35 81       	ldd	r19, Z+5	; 0x05
    201c:	42 17       	cp	r20, r18
    201e:	53 07       	cpc	r21, r19
    2020:	44 f4       	brge	.+16     	; 0x2032 <fputc+0x38>
    2022:	a0 81       	ld	r26, Z
    2024:	b1 81       	ldd	r27, Z+1	; 0x01
    2026:	9d 01       	movw	r18, r26
    2028:	2f 5f       	subi	r18, 0xFF	; 255
    202a:	3f 4f       	sbci	r19, 0xFF	; 255
    202c:	20 83       	st	Z, r18
    202e:	31 83       	std	Z+1, r19	; 0x01
    2030:	8c 93       	st	X, r24
    2032:	26 81       	ldd	r18, Z+6	; 0x06
    2034:	37 81       	ldd	r19, Z+7	; 0x07
    2036:	2f 5f       	subi	r18, 0xFF	; 255
    2038:	3f 4f       	sbci	r19, 0xFF	; 255
    203a:	26 83       	std	Z+6, r18	; 0x06
    203c:	37 83       	std	Z+7, r19	; 0x07
    203e:	14 c0       	rjmp	.+40     	; 0x2068 <fputc+0x6e>
    2040:	8b 01       	movw	r16, r22
    2042:	ec 01       	movw	r28, r24
    2044:	fb 01       	movw	r30, r22
    2046:	00 84       	ldd	r0, Z+8	; 0x08
    2048:	f1 85       	ldd	r31, Z+9	; 0x09
    204a:	e0 2d       	mov	r30, r0
    204c:	09 95       	icall
    204e:	89 2b       	or	r24, r25
    2050:	e1 f6       	brne	.-72     	; 0x200a <fputc+0x10>
    2052:	d8 01       	movw	r26, r16
    2054:	16 96       	adiw	r26, 0x06	; 6
    2056:	8d 91       	ld	r24, X+
    2058:	9c 91       	ld	r25, X
    205a:	17 97       	sbiw	r26, 0x07	; 7
    205c:	01 96       	adiw	r24, 0x01	; 1
    205e:	16 96       	adiw	r26, 0x06	; 6
    2060:	8d 93       	st	X+, r24
    2062:	9c 93       	st	X, r25
    2064:	17 97       	sbiw	r26, 0x07	; 7
    2066:	ce 01       	movw	r24, r28
    2068:	df 91       	pop	r29
    206a:	cf 91       	pop	r28
    206c:	1f 91       	pop	r17
    206e:	0f 91       	pop	r16
    2070:	08 95       	ret

00002072 <__ultoa_invert>:
    2072:	fa 01       	movw	r30, r20
    2074:	aa 27       	eor	r26, r26
    2076:	28 30       	cpi	r18, 0x08	; 8
    2078:	51 f1       	breq	.+84     	; 0x20ce <__ultoa_invert+0x5c>
    207a:	20 31       	cpi	r18, 0x10	; 16
    207c:	81 f1       	breq	.+96     	; 0x20de <__ultoa_invert+0x6c>
    207e:	e8 94       	clt
    2080:	6f 93       	push	r22
    2082:	6e 7f       	andi	r22, 0xFE	; 254
    2084:	6e 5f       	subi	r22, 0xFE	; 254
    2086:	7f 4f       	sbci	r23, 0xFF	; 255
    2088:	8f 4f       	sbci	r24, 0xFF	; 255
    208a:	9f 4f       	sbci	r25, 0xFF	; 255
    208c:	af 4f       	sbci	r26, 0xFF	; 255
    208e:	b1 e0       	ldi	r27, 0x01	; 1
    2090:	3e d0       	rcall	.+124    	; 0x210e <__ultoa_invert+0x9c>
    2092:	b4 e0       	ldi	r27, 0x04	; 4
    2094:	3c d0       	rcall	.+120    	; 0x210e <__ultoa_invert+0x9c>
    2096:	67 0f       	add	r22, r23
    2098:	78 1f       	adc	r23, r24
    209a:	89 1f       	adc	r24, r25
    209c:	9a 1f       	adc	r25, r26
    209e:	a1 1d       	adc	r26, r1
    20a0:	68 0f       	add	r22, r24
    20a2:	79 1f       	adc	r23, r25
    20a4:	8a 1f       	adc	r24, r26
    20a6:	91 1d       	adc	r25, r1
    20a8:	a1 1d       	adc	r26, r1
    20aa:	6a 0f       	add	r22, r26
    20ac:	71 1d       	adc	r23, r1
    20ae:	81 1d       	adc	r24, r1
    20b0:	91 1d       	adc	r25, r1
    20b2:	a1 1d       	adc	r26, r1
    20b4:	20 d0       	rcall	.+64     	; 0x20f6 <__ultoa_invert+0x84>
    20b6:	09 f4       	brne	.+2      	; 0x20ba <__ultoa_invert+0x48>
    20b8:	68 94       	set
    20ba:	3f 91       	pop	r19
    20bc:	2a e0       	ldi	r18, 0x0A	; 10
    20be:	26 9f       	mul	r18, r22
    20c0:	11 24       	eor	r1, r1
    20c2:	30 19       	sub	r19, r0
    20c4:	30 5d       	subi	r19, 0xD0	; 208
    20c6:	31 93       	st	Z+, r19
    20c8:	de f6       	brtc	.-74     	; 0x2080 <__ultoa_invert+0xe>
    20ca:	cf 01       	movw	r24, r30
    20cc:	08 95       	ret
    20ce:	46 2f       	mov	r20, r22
    20d0:	47 70       	andi	r20, 0x07	; 7
    20d2:	40 5d       	subi	r20, 0xD0	; 208
    20d4:	41 93       	st	Z+, r20
    20d6:	b3 e0       	ldi	r27, 0x03	; 3
    20d8:	0f d0       	rcall	.+30     	; 0x20f8 <__ultoa_invert+0x86>
    20da:	c9 f7       	brne	.-14     	; 0x20ce <__ultoa_invert+0x5c>
    20dc:	f6 cf       	rjmp	.-20     	; 0x20ca <__ultoa_invert+0x58>
    20de:	46 2f       	mov	r20, r22
    20e0:	4f 70       	andi	r20, 0x0F	; 15
    20e2:	40 5d       	subi	r20, 0xD0	; 208
    20e4:	4a 33       	cpi	r20, 0x3A	; 58
    20e6:	18 f0       	brcs	.+6      	; 0x20ee <__ultoa_invert+0x7c>
    20e8:	49 5d       	subi	r20, 0xD9	; 217
    20ea:	31 fd       	sbrc	r19, 1
    20ec:	40 52       	subi	r20, 0x20	; 32
    20ee:	41 93       	st	Z+, r20
    20f0:	02 d0       	rcall	.+4      	; 0x20f6 <__ultoa_invert+0x84>
    20f2:	a9 f7       	brne	.-22     	; 0x20de <__ultoa_invert+0x6c>
    20f4:	ea cf       	rjmp	.-44     	; 0x20ca <__ultoa_invert+0x58>
    20f6:	b4 e0       	ldi	r27, 0x04	; 4
    20f8:	a6 95       	lsr	r26
    20fa:	97 95       	ror	r25
    20fc:	87 95       	ror	r24
    20fe:	77 95       	ror	r23
    2100:	67 95       	ror	r22
    2102:	ba 95       	dec	r27
    2104:	c9 f7       	brne	.-14     	; 0x20f8 <__ultoa_invert+0x86>
    2106:	00 97       	sbiw	r24, 0x00	; 0
    2108:	61 05       	cpc	r22, r1
    210a:	71 05       	cpc	r23, r1
    210c:	08 95       	ret
    210e:	9b 01       	movw	r18, r22
    2110:	ac 01       	movw	r20, r24
    2112:	0a 2e       	mov	r0, r26
    2114:	06 94       	lsr	r0
    2116:	57 95       	ror	r21
    2118:	47 95       	ror	r20
    211a:	37 95       	ror	r19
    211c:	27 95       	ror	r18
    211e:	ba 95       	dec	r27
    2120:	c9 f7       	brne	.-14     	; 0x2114 <__ultoa_invert+0xa2>
    2122:	62 0f       	add	r22, r18
    2124:	73 1f       	adc	r23, r19
    2126:	84 1f       	adc	r24, r20
    2128:	95 1f       	adc	r25, r21
    212a:	a0 1d       	adc	r26, r0
    212c:	08 95       	ret

0000212e <__prologue_saves__>:
    212e:	2f 92       	push	r2
    2130:	3f 92       	push	r3
    2132:	4f 92       	push	r4
    2134:	5f 92       	push	r5
    2136:	6f 92       	push	r6
    2138:	7f 92       	push	r7
    213a:	8f 92       	push	r8
    213c:	9f 92       	push	r9
    213e:	af 92       	push	r10
    2140:	bf 92       	push	r11
    2142:	cf 92       	push	r12
    2144:	df 92       	push	r13
    2146:	ef 92       	push	r14
    2148:	ff 92       	push	r15
    214a:	0f 93       	push	r16
    214c:	1f 93       	push	r17
    214e:	cf 93       	push	r28
    2150:	df 93       	push	r29
    2152:	cd b7       	in	r28, 0x3d	; 61
    2154:	de b7       	in	r29, 0x3e	; 62
    2156:	ca 1b       	sub	r28, r26
    2158:	db 0b       	sbc	r29, r27
    215a:	cd bf       	out	0x3d, r28	; 61
    215c:	de bf       	out	0x3e, r29	; 62
    215e:	09 94       	ijmp

00002160 <__epilogue_restores__>:
    2160:	2a 88       	ldd	r2, Y+18	; 0x12
    2162:	39 88       	ldd	r3, Y+17	; 0x11
    2164:	48 88       	ldd	r4, Y+16	; 0x10
    2166:	5f 84       	ldd	r5, Y+15	; 0x0f
    2168:	6e 84       	ldd	r6, Y+14	; 0x0e
    216a:	7d 84       	ldd	r7, Y+13	; 0x0d
    216c:	8c 84       	ldd	r8, Y+12	; 0x0c
    216e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2170:	aa 84       	ldd	r10, Y+10	; 0x0a
    2172:	b9 84       	ldd	r11, Y+9	; 0x09
    2174:	c8 84       	ldd	r12, Y+8	; 0x08
    2176:	df 80       	ldd	r13, Y+7	; 0x07
    2178:	ee 80       	ldd	r14, Y+6	; 0x06
    217a:	fd 80       	ldd	r15, Y+5	; 0x05
    217c:	0c 81       	ldd	r16, Y+4	; 0x04
    217e:	1b 81       	ldd	r17, Y+3	; 0x03
    2180:	aa 81       	ldd	r26, Y+2	; 0x02
    2182:	b9 81       	ldd	r27, Y+1	; 0x01
    2184:	ce 0f       	add	r28, r30
    2186:	d1 1d       	adc	r29, r1
    2188:	cd bf       	out	0x3d, r28	; 61
    218a:	de bf       	out	0x3e, r29	; 62
    218c:	ed 01       	movw	r28, r26
    218e:	08 95       	ret

00002190 <_exit>:
    2190:	f8 94       	cli

00002192 <__stop_program>:
    2192:	ff cf       	rjmp	.-2      	; 0x2192 <__stop_program>
